
c:/Users/jasonma.Vecima/Documents/particle/xenon/ENDPOINT_V0/target/ENDPOINT_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00019270  2**0
                  CONTENTS
  3 .data         000000a4  2003e200  000d91a0  0000e200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000054c  2003e2a8  2003e2a8  0001e2a8  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d9244  000d9244  00019244  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d926c  000d926c  0001926c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009fd57  00000000  00000000  00019270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ebab  00000000  00000000  000b8fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014ab6  00000000  00000000  000c7b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ea0  00000000  00000000  000dc628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000031e0  00000000  00000000  000de4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000311f2  00000000  00000000  000e16a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023e4f  00000000  00000000  0011289a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000cf645  00000000  00000000  001366e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bc30  00000000  00000000  00205d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	b4 8b 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fff5 	bl	d701c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fffa 	bl	d7032 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e200 	.word	0x2003e200
   d4048:	000d91a0 	.word	0x000d91a0
   d404c:	2003e2a4 	.word	0x2003e2a4
   d4050:	2003e2a8 	.word	0x2003e2a8
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe3b 	bl	d5cd4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d91a0 	.word	0x000d91a0
   d4080:	000d9164 	.word	0x000d9164

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b856 	b.w	d4134 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9d7 	bl	d443c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bded 	b.w	d5c70 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 ba6d 	b.w	d5574 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 ba6b 	b.w	d5574 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <__tcf_0>:
 String TempName; //corresponds to color of cable to the hive
 float HiveTemp;
 String WeightName;
 float HiveWeight;

}HiveData[] = {
   d40b0:	b538      	push	{r3, r4, r5, lr}
#ifndef MYDATA_H
#define MYDATA_H

struct sHiveData
   d40b2:	4d0b      	ldr	r5, [pc, #44]	; (d40e0 <__tcf_0+0x30>)
 String TempName; //corresponds to color of cable to the hive
 float HiveTemp;
 String WeightName;
 float HiveWeight;

}HiveData[] = {
   d40b4:	2400      	movs	r4, #0
#ifndef MYDATA_H
#define MYDATA_H

struct sHiveData
   d40b6:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   d40ba:	4428      	add	r0, r5
   d40bc:	f001 faec 	bl	d5698 <_ZN6StringD1Ev>
   d40c0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d40c4:	4428      	add	r0, r5
   d40c6:	f001 fae7 	bl	d5698 <_ZN6StringD1Ev>
   d40ca:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d40ce:	4428      	add	r0, r5
   d40d0:	3c38      	subs	r4, #56	; 0x38
   d40d2:	f001 fae1 	bl	d5698 <_ZN6StringD1Ev>
 String TempName; //corresponds to color of cable to the hive
 float HiveTemp;
 String WeightName;
 float HiveWeight;

}HiveData[] = {
   d40d6:	f114 0fe0 	cmn.w	r4, #224	; 0xe0
   d40da:	d1ec      	bne.n	d40b6 <__tcf_0+0x6>
   d40dc:	bd38      	pop	{r3, r4, r5, pc}
   d40de:	bf00      	nop
   d40e0:	2003e2ac 	.word	0x2003e2ac

000d40e4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4b03      	ldr	r3, [pc, #12]	; (d40f4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40e8:	6003      	str	r3, [r0, #0]
   d40ea:	4604      	mov	r4, r0
   d40ec:	f000 fb4a 	bl	d4784 <_ZN10JsonWriterD1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	bd10      	pop	{r4, pc}
   d40f4:	000d8bd0 	.word	0x000d8bd0

000d40f8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40f8:	b510      	push	{r4, lr}
   d40fa:	4604      	mov	r4, r0
   d40fc:	f7ff fff2 	bl	d40e4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4100:	4620      	mov	r0, r4
   d4102:	f7ff ffc8 	bl	d4096 <_ZdlPv>
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}
	...

000d410c <_ZN16JsonParserStaticILj256ELj20EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d410c:	b510      	push	{r4, lr}
   d410e:	4b03      	ldr	r3, [pc, #12]	; (d411c <_ZN16JsonParserStaticILj256ELj20EED1Ev+0x10>)
   d4110:	6003      	str	r3, [r0, #0]
   d4112:	4604      	mov	r4, r0
   d4114:	f000 fb1a 	bl	d474c <_ZN10JsonParserD1Ev>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}
   d411c:	000d8be0 	.word	0x000d8be0

000d4120 <_ZN16JsonParserStaticILj256ELj20EED0Ev>:
   d4120:	b510      	push	{r4, lr}
   d4122:	4604      	mov	r4, r0
   d4124:	f7ff fff2 	bl	d410c <_ZN16JsonParserStaticILj256ELj20EED1Ev>
   d4128:	4620      	mov	r0, r4
   d412a:	f7ff ffb4 	bl	d4096 <_ZdlPv>
   d412e:	4620      	mov	r0, r4
   d4130:	bd10      	pop	{r4, pc}
	...

000d4134 <setup>:
};
*/


// setup() runs once, when the device is first turned on.
void setup() {
   d4134:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4136:	b085      	sub	sp, #20
  // Put initialization like pinMode and begin functions here.
   Serial.begin(9600);
   d4138:	f001 fea6 	bl	d5e88 <_Z16_fetch_usbserialv>
   d413c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4140:	f001 fe92 	bl	d5e68 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4144:	2000      	movs	r0, #0
   d4146:	f001 f891 	bl	d526c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d414a:	2500      	movs	r5, #0
   d414c:	4604      	mov	r4, r0
   d414e:	f247 562f 	movw	r6, #29999	; 0x752f
   d4152:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4154:	2000      	movs	r0, #0
   d4156:	f001 f889 	bl	d526c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d415a:	1b00      	subs	r0, r0, r4
   d415c:	eb61 0105 	sbc.w	r1, r1, r5
   d4160:	428f      	cmp	r7, r1
   d4162:	bf08      	it	eq
   d4164:	4286      	cmpeq	r6, r0
   d4166:	d307      	bcc.n	d4178 <setup+0x44>
   int len=0;
   // Wait for a USB serial connection for up to 30 seconds
   waitFor(Serial.isConnected, 30000);
   d4168:	f001 fe8e 	bl	d5e88 <_Z16_fetch_usbserialv>
   d416c:	f001 fe80 	bl	d5e70 <_ZN9USBSerial11isConnectedEv>
   d4170:	b910      	cbnz	r0, d4178 <setup+0x44>
            spark_process();
   d4172:	f001 f9df 	bl	d5534 <spark_process>
   d4176:	e7ed      	b.n	d4154 <setup+0x20>
   d4178:	f001 fe86 	bl	d5e88 <_Z16_fetch_usbserialv>
   d417c:	f001 fe78 	bl	d5e70 <_ZN9USBSerial11isConnectedEv>

#ifdef Serial_DEBUG
   Serial.println("DEBUG - ENDNODE: ***Connecting to MESH network**");
   d4180:	f001 fe82 	bl	d5e88 <_Z16_fetch_usbserialv>
   d4184:	4924      	ldr	r1, [pc, #144]	; (d4218 <setup+0xe4>)
#endif   
   
   Mesh.connect();
   
   //System.deviceID().toCharArray(id, sizeof(id));
   gDeviceID = System.deviceID();
   d4186:	4c25      	ldr	r4, [pc, #148]	; (d421c <setup+0xe8>)
   int len=0;
   // Wait for a USB serial connection for up to 30 seconds
   waitFor(Serial.isConnected, 30000);

#ifdef Serial_DEBUG
   Serial.println("DEBUG - ENDNODE: ***Connecting to MESH network**");
   d4188:	f001 fbc7 	bl	d591a <_ZN5Print7printlnEPKc>
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d418c:	4824      	ldr	r0, [pc, #144]	; (d4220 <setup+0xec>)
   d418e:	2300      	movs	r3, #0
   d4190:	461a      	mov	r2, r3
   d4192:	4619      	mov	r1, r3
   d4194:	6840      	ldr	r0, [r0, #4]
   d4196:	f001 f97d 	bl	d5494 <network_connect>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d419a:	4668      	mov	r0, sp
   d419c:	f001 f9d2 	bl	d5544 <spark_deviceID>
#endif   
   
   Mesh.connect();
   
   //System.deviceID().toCharArray(id, sizeof(id));
   gDeviceID = System.deviceID();
   d41a0:	4669      	mov	r1, sp
   d41a2:	4620      	mov	r0, r4
   d41a4:	f001 fb09 	bl	d57ba <_ZN6StringaSEOS_>
   d41a8:	4668      	mov	r0, sp
   d41aa:	f001 fa75 	bl	d5698 <_ZN6StringD1Ev>
   len = strlen(gDeviceID);
   d41ae:	6820      	ldr	r0, [r4, #0]
   d41b0:	f002 ff82 	bl	d70b8 <strlen>
   gDeviceID4 = gDeviceID.substring(len - 4, len);
   d41b4:	1f06      	subs	r6, r0, #4
   d41b6:	4603      	mov	r3, r0
   d41b8:	4632      	mov	r2, r6
   
   Mesh.connect();
   
   //System.deviceID().toCharArray(id, sizeof(id));
   gDeviceID = System.deviceID();
   len = strlen(gDeviceID);
   d41ba:	4605      	mov	r5, r0
   gDeviceID4 = gDeviceID.substring(len - 4, len);
   d41bc:	4621      	mov	r1, r4
   d41be:	4668      	mov	r0, sp
   d41c0:	f001 fb4a 	bl	d5858 <_ZNK6String9substringEjj>
   d41c4:	4669      	mov	r1, sp
   d41c6:	4817      	ldr	r0, [pc, #92]	; (d4224 <setup+0xf0>)
   d41c8:	f001 faf7 	bl	d57ba <_ZN6StringaSEOS_>
   d41cc:	4668      	mov	r0, sp
   d41ce:	f001 fa63 	bl	d5698 <_ZN6StringD1Ev>
   

#ifdef Serial_DEBUG
  //This was to get last 4 chars of a device ID for a unique identifyer
  Serial.println(sizeof(gDeviceID));
   d41d2:	f001 fe59 	bl	d5e88 <_Z16_fetch_usbserialv>
   d41d6:	220a      	movs	r2, #10
   d41d8:	2110      	movs	r1, #16
   d41da:	f001 fbd7 	bl	d598c <_ZN5Print7printlnEji>
  Serial.println(strlen(gDeviceID));
   d41de:	f001 fe53 	bl	d5e88 <_Z16_fetch_usbserialv>
   d41e2:	4607      	mov	r7, r0
   d41e4:	6820      	ldr	r0, [r4, #0]
   d41e6:	f002 ff67 	bl	d70b8 <strlen>
   d41ea:	220a      	movs	r2, #10
   d41ec:	4601      	mov	r1, r0
   d41ee:	4638      	mov	r0, r7
   d41f0:	f001 fbcc 	bl	d598c <_ZN5Print7printlnEji>
  Serial.println(gDeviceID.substring(len - 4, len));
   d41f4:	f001 fe48 	bl	d5e88 <_Z16_fetch_usbserialv>
   d41f8:	462b      	mov	r3, r5
   d41fa:	4632      	mov	r2, r6
   d41fc:	4607      	mov	r7, r0
   d41fe:	4621      	mov	r1, r4
   d4200:	4668      	mov	r0, sp
   d4202:	f001 fb29 	bl	d5858 <_ZNK6String9substringEjj>
   d4206:	9900      	ldr	r1, [sp, #0]
   d4208:	4638      	mov	r0, r7
   d420a:	f001 fb86 	bl	d591a <_ZN5Print7printlnEPKc>
   d420e:	4668      	mov	r0, sp
   d4210:	f001 fa42 	bl	d5698 <_ZN6StringD1Ev>
  
#endif

   
   
}
   d4214:	b005      	add	sp, #20
   d4216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4218:	000d8be8 	.word	0x000d8be8
   d421c:	2003e38c 	.word	0x2003e38c
   d4220:	2003e540 	.word	0x2003e540
   d4224:	2003e3c8 	.word	0x2003e3c8

000d4228 <_Z13getTempANALOGv>:





void getTempANALOG(void){
   d4228:	b570      	push	{r4, r5, r6, lr}
   d422a:	4e1f      	ldr	r6, [pc, #124]	; (d42a8 <_Z13getTempANALOGv+0x80>)
   d422c:	4d1f      	ldr	r5, [pc, #124]	; (d42ac <_Z13getTempANALOGv+0x84>)
   d422e:	2413      	movs	r4, #19
   // gTemp_val = ((adc_value * 3.3)/4095);	/* Convert adc value to equivalent voltage */    
   // gTemp_val = ((gTemp_val - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */  

    for(int i = 0, j=0; (i+19) >= 16; i--,j++)
    {
      adc_value = analogRead((i+19));	/* Read Temperature */
   d4230:	4620      	mov	r0, r4
   d4232:	f002 f839 	bl	d62a8 <analogRead>
      gTemp_val[j] = ((adc_value * 3.3)/4095);	/* Convert adc value to equivalent voltage */    
      gTemp_val[j] = ((gTemp_val[j] - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */ 
   d4236:	f002 fb31 	bl	d689c <__aeabi_i2d>
   d423a:	a313      	add	r3, pc, #76	; (adr r3, d4288 <_Z13getTempANALOGv+0x60>)
   d423c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4240:	f002 fb92 	bl	d6968 <__aeabi_dmul>
   d4244:	a312      	add	r3, pc, #72	; (adr r3, d4290 <_Z13getTempANALOGv+0x68>)
   d4246:	e9d3 2300 	ldrd	r2, r3, [r3]
   d424a:	f002 fcb7 	bl	d6bbc <__aeabi_ddiv>
   d424e:	f002 fe83 	bl	d6f58 <__aeabi_d2f>
   d4252:	f002 fb35 	bl	d68c0 <__aeabi_f2d>
   d4256:	a310      	add	r3, pc, #64	; (adr r3, d4298 <_Z13getTempANALOGv+0x70>)
   d4258:	e9d3 2300 	ldrd	r2, r3, [r3]
   d425c:	f002 f9d0 	bl	d6600 <__aeabi_dsub>
   d4260:	a30f      	add	r3, pc, #60	; (adr r3, d42a0 <_Z13getTempANALOGv+0x78>)
   d4262:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4266:	f002 fca9 	bl	d6bbc <__aeabi_ddiv>
   d426a:	f002 fe75 	bl	d6f58 <__aeabi_d2f>
   d426e:	3c01      	subs	r4, #1
   d4270:	b2a4      	uxth	r4, r4
*/
   // adc_value = analogRead(gLm35_pin);	/* Read Temperature */
   // gTemp_val = ((adc_value * 3.3)/4095);	/* Convert adc value to equivalent voltage */    
   // gTemp_val = ((gTemp_val - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */  

    for(int i = 0, j=0; (i+19) >= 16; i--,j++)
   d4272:	2c0f      	cmp	r4, #15
    {
      adc_value = analogRead((i+19));	/* Read Temperature */
      gTemp_val[j] = ((adc_value * 3.3)/4095);	/* Convert adc value to equivalent voltage */    
      gTemp_val[j] = ((gTemp_val[j] - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */ 
      HiveData[j].HiveTemp = gTemp_val[j];
   d4274:	6228      	str	r0, [r5, #32]

    for(int i = 0, j=0; (i+19) >= 16; i--,j++)
    {
      adc_value = analogRead((i+19));	/* Read Temperature */
      gTemp_val[j] = ((adc_value * 3.3)/4095);	/* Convert adc value to equivalent voltage */    
      gTemp_val[j] = ((gTemp_val[j] - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */ 
   d4276:	f846 0b04 	str.w	r0, [r6], #4
   d427a:	f105 0538 	add.w	r5, r5, #56	; 0x38
*/
   // adc_value = analogRead(gLm35_pin);	/* Read Temperature */
   // gTemp_val = ((adc_value * 3.3)/4095);	/* Convert adc value to equivalent voltage */    
   // gTemp_val = ((gTemp_val - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */  

    for(int i = 0, j=0; (i+19) >= 16; i--,j++)
   d427e:	d1d7      	bne.n	d4230 <_Z13getTempANALOGv+0x8>
      gTemp_val[j] = ((gTemp_val[j] - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */ 
      HiveData[j].HiveTemp = gTemp_val[j];
    }


}
   d4280:	bd70      	pop	{r4, r5, r6, pc}
   d4282:	bf00      	nop
   d4284:	f3af 8000 	nop.w
   d4288:	66666666 	.word	0x66666666
   d428c:	400a6666 	.word	0x400a6666
   d4290:	00000000 	.word	0x00000000
   d4294:	40affe00 	.word	0x40affe00
   d4298:	e5604189 	.word	0xe5604189
   d429c:	3fdb22d0 	.word	0x3fdb22d0
   d42a0:	9999999a 	.word	0x9999999a
   d42a4:	3f799999 	.word	0x3f799999
   d42a8:	2003e3b0 	.word	0x2003e3b0
   d42ac:	2003e2ac 	.word	0x2003e2ac

000d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d42b0:	b538      	push	{r3, r4, r5, lr}
   d42b2:	4604      	mov	r4, r0
   d42b4:	ed2d 8b02 	vpush	{d8}
   d42b8:	460d      	mov	r5, r1
   d42ba:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d42be:	f000 fd3f 	bl	d4d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d42c2:	4629      	mov	r1, r5
   d42c4:	4620      	mov	r0, r4
   d42c6:	2201      	movs	r2, #1
   d42c8:	f000 fcae 	bl	d4c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d42cc:	4620      	mov	r0, r4
   d42ce:	213a      	movs	r1, #58	; 0x3a
   d42d0:	f000 fc4c 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d42d4:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d42d8:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d42dc:	4620      	mov	r0, r4
	}
   d42de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d42e2:	f000 bd39 	b.w	d4d58 <_ZN10JsonWriter11insertValueEf>
	...

000d42e8 <_GLOBAL__sub_I_HiveData>:
   d42e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {"SITE_1", "Temp", 1.0, "Weight", 2.0},
  {"SITE_2", "Temp", 3.0, "Weight", 4.0},
  {"SITE_3", "Temp", 5.0, "Weight", 6.0},
  {"SITE_4", "Temp", 7.0, "Weight", 8.0},
};
   d42ea:	4c42      	ldr	r4, [pc, #264]	; (d43f4 <_GLOBAL__sub_I_HiveData+0x10c>)
   d42ec:	4e42      	ldr	r6, [pc, #264]	; (d43f8 <_GLOBAL__sub_I_HiveData+0x110>)
   d42ee:	4d43      	ldr	r5, [pc, #268]	; (d43fc <_GLOBAL__sub_I_HiveData+0x114>)
bool gUPDATE_temp = 0;
float gTemp_val[3];
float gWeight_val[3];

//Global variables --- prefixed with lower case 'g'
String gDeviceID;
   d42f0:	4f43      	ldr	r7, [pc, #268]	; (d4400 <_GLOBAL__sub_I_HiveData+0x118>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42f2:	f000 ff83 	bl	d51fc <HAL_Pin_Map>
   d42f6:	4943      	ldr	r1, [pc, #268]	; (d4404 <_GLOBAL__sub_I_HiveData+0x11c>)
   d42f8:	4620      	mov	r0, r4
   d42fa:	f001 fa14 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d42fe:	4631      	mov	r1, r6
   d4300:	f104 0010 	add.w	r0, r4, #16
   d4304:	f001 fa0f 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4308:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d430c:	6223      	str	r3, [r4, #32]
   d430e:	4629      	mov	r1, r5
   d4310:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d4314:	f001 fa07 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d431c:	6363      	str	r3, [r4, #52]	; 0x34
   d431e:	493a      	ldr	r1, [pc, #232]	; (d4408 <_GLOBAL__sub_I_HiveData+0x120>)
   d4320:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4324:	f001 f9ff 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4328:	4631      	mov	r1, r6
   d432a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d432e:	f001 f9fa 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4332:	4b36      	ldr	r3, [pc, #216]	; (d440c <_GLOBAL__sub_I_HiveData+0x124>)
   d4334:	65a3      	str	r3, [r4, #88]	; 0x58
   d4336:	4629      	mov	r1, r5
   d4338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d433c:	f001 f9f3 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4340:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
   d4344:	66e3      	str	r3, [r4, #108]	; 0x6c
   d4346:	4932      	ldr	r1, [pc, #200]	; (d4410 <_GLOBAL__sub_I_HiveData+0x128>)
   d4348:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d434c:	f001 f9eb 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4350:	4631      	mov	r1, r6
   d4352:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d4356:	f001 f9e6 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d435a:	4b2e      	ldr	r3, [pc, #184]	; (d4414 <_GLOBAL__sub_I_HiveData+0x12c>)
   d435c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d4360:	4629      	mov	r1, r5
   d4362:	f104 0094 	add.w	r0, r4, #148	; 0x94
   d4366:	f001 f9de 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d436a:	4b2b      	ldr	r3, [pc, #172]	; (d4418 <_GLOBAL__sub_I_HiveData+0x130>)
   d436c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   d4370:	492a      	ldr	r1, [pc, #168]	; (d441c <_GLOBAL__sub_I_HiveData+0x134>)
   d4372:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d4376:	f001 f9d6 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d437a:	4631      	mov	r1, r6
   d437c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4380:	f001 f9d1 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4384:	4b26      	ldr	r3, [pc, #152]	; (d4420 <_GLOBAL__sub_I_HiveData+0x138>)
   d4386:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
   d438a:	4629      	mov	r1, r5
   d438c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   d4390:	f001 f9c9 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d4394:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   d4398:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 String TempName; //corresponds to color of cable to the hive
 float HiveTemp;
 String WeightName;
 float HiveWeight;

}HiveData[] = {
   d439c:	4c21      	ldr	r4, [pc, #132]	; (d4424 <_GLOBAL__sub_I_HiveData+0x13c>)
   d439e:	4922      	ldr	r1, [pc, #136]	; (d4428 <_GLOBAL__sub_I_HiveData+0x140>)
   d43a0:	4d22      	ldr	r5, [pc, #136]	; (d442c <_GLOBAL__sub_I_HiveData+0x144>)
   d43a2:	4e23      	ldr	r6, [pc, #140]	; (d4430 <_GLOBAL__sub_I_HiveData+0x148>)
   d43a4:	4622      	mov	r2, r4
   d43a6:	2000      	movs	r0, #0
   d43a8:	f001 ffd8 	bl	d635c <__aeabi_atexit>

#include "JsonParserGeneratorRK.h"
#include "HX711ADC.h"
#include "Mydata.h"

SYSTEM_THREAD(ENABLED);
   d43ac:	2100      	movs	r1, #0
   d43ae:	2001      	movs	r0, #1
   d43b0:	f001 f854 	bl	d545c <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d43b4:	4b1f      	ldr	r3, [pc, #124]	; (d4434 <_GLOBAL__sub_I_HiveData+0x14c>)
   d43b6:	2200      	movs	r2, #0
   d43b8:	701a      	strb	r2, [r3, #0]
   d43ba:	805a      	strh	r2, [r3, #2]
   d43bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d43c0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43c2:	2003      	movs	r0, #3
   d43c4:	f001 f842 	bl	d544c <set_system_mode>
bool gUPDATE_temp = 0;
float gTemp_val[3];
float gWeight_val[3];

//Global variables --- prefixed with lower case 'g'
String gDeviceID;
   d43c8:	4639      	mov	r1, r7
   d43ca:	4628      	mov	r0, r5
   d43cc:	f001 f9ab 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d43d0:	4628      	mov	r0, r5
String gDeviceID4;
   d43d2:	4d19      	ldr	r5, [pc, #100]	; (d4438 <_GLOBAL__sub_I_HiveData+0x150>)
bool gUPDATE_temp = 0;
float gTemp_val[3];
float gWeight_val[3];

//Global variables --- prefixed with lower case 'g'
String gDeviceID;
   d43d4:	4622      	mov	r2, r4
   d43d6:	4631      	mov	r1, r6
   d43d8:	f001 ffc0 	bl	d635c <__aeabi_atexit>
String gDeviceID4;
   d43dc:	4639      	mov	r1, r7
   d43de:	4628      	mov	r0, r5
   d43e0:	f001 f9a1 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
   d43e4:	4622      	mov	r2, r4
   d43e6:	4631      	mov	r1, r6
   d43e8:	4628      	mov	r0, r5
      gTemp_val[j] = ((gTemp_val[j] - 0.424)/0.00625);	/* LM35 gives output of 6.25mv/°C */ 
      HiveData[j].HiveTemp = gTemp_val[j];
    }


}
   d43ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
float gTemp_val[3];
float gWeight_val[3];

//Global variables --- prefixed with lower case 'g'
String gDeviceID;
String gDeviceID4;
   d43ee:	f001 bfb5 	b.w	d635c <__aeabi_atexit>
   d43f2:	bf00      	nop
   d43f4:	2003e2ac 	.word	0x2003e2ac
   d43f8:	000d8c20 	.word	0x000d8c20
   d43fc:	000d8c25 	.word	0x000d8c25
   d4400:	000d8db2 	.word	0x000d8db2
   d4404:	000d8c19 	.word	0x000d8c19
   d4408:	000d8c2c 	.word	0x000d8c2c
   d440c:	40400000 	.word	0x40400000
   d4410:	000d8c33 	.word	0x000d8c33
   d4414:	40a00000 	.word	0x40a00000
   d4418:	40c00000 	.word	0x40c00000
   d441c:	000d8c3a 	.word	0x000d8c3a
   d4420:	40e00000 	.word	0x40e00000
   d4424:	2003e2a8 	.word	0x2003e2a8
   d4428:	000d40b1 	.word	0x000d40b1
   d442c:	2003e38c 	.word	0x2003e38c
   d4430:	000d5699 	.word	0x000d5699
   d4434:	2003e3a8 	.word	0x2003e3a8
   d4438:	2003e3c8 	.word	0x2003e3c8

000d443c <loop>:
   
}

// loop() runs over and over again, as quickly as it can execute.

void loop() {
   d443c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // The core of your code will likely live here.

  if(millis() - gTemp_read_interval >= TEMP_UPDATE_INTERVAL)
   d443e:	4c96      	ldr	r4, [pc, #600]	; (d4698 <loop+0x25c>)
   d4440:	4d96      	ldr	r5, [pc, #600]	; (d469c <loop+0x260>)
   
}

// loop() runs over and over again, as quickly as it can execute.

void loop() {
   d4442:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4446:	f000 ff09 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
  // The core of your code will likely live here.

  if(millis() - gTemp_read_interval >= TEMP_UPDATE_INTERVAL)
   d444a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d444e:	2100      	movs	r1, #0
   d4450:	1a80      	subs	r0, r0, r2
   d4452:	eb61 0103 	sbc.w	r1, r1, r3
   d4456:	2900      	cmp	r1, #0
   d4458:	bf08      	it	eq
   d445a:	f5b0 7f7a 	cmpeq.w	r0, #1000	; 0x3e8
   d445e:	d306      	bcc.n	d446e <loop+0x32>
   d4460:	f000 fefc 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
  {
    gTemp_read_interval = millis();
   d4464:	2300      	movs	r3, #0
   d4466:	6063      	str	r3, [r4, #4]
    gUPDATE_temp = 1;  
   d4468:	2301      	movs	r3, #1
void loop() {
  // The core of your code will likely live here.

  if(millis() - gTemp_read_interval >= TEMP_UPDATE_INTERVAL)
  {
    gTemp_read_interval = millis();
   d446a:	6020      	str	r0, [r4, #0]
    gUPDATE_temp = 1;  
   d446c:	702b      	strb	r3, [r5, #0]
  }

  if(millis() - gUpdate_Termainal_interval >= UPDATE_TERMINAL_INTERVAL)
   d446e:	4c8c      	ldr	r4, [pc, #560]	; (d46a0 <loop+0x264>)
   d4470:	4f8c      	ldr	r7, [pc, #560]	; (d46a4 <loop+0x268>)
   d4472:	4e8d      	ldr	r6, [pc, #564]	; (d46a8 <loop+0x26c>)
   d4474:	f000 fef2 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
   d4478:	e9d4 2300 	ldrd	r2, r3, [r4]
   d447c:	2100      	movs	r1, #0
   d447e:	1a80      	subs	r0, r0, r2
   d4480:	eb61 0103 	sbc.w	r1, r1, r3
   d4484:	2900      	cmp	r1, #0
   d4486:	bf08      	it	eq
   d4488:	f5b0 6ffa 	cmpeq.w	r0, #2000	; 0x7d0
   d448c:	d307      	bcc.n	d449e <loop+0x62>
   d448e:	f000 fee5 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
  {
    gUpdate_Termainal_interval = millis();
   d4492:	2300      	movs	r3, #0
   d4494:	6063      	str	r3, [r4, #4]
    gUPDATE_Terminal = 1;
   d4496:	2301      	movs	r3, #1
    gUPDATE_temp = 1;  
  }

  if(millis() - gUpdate_Termainal_interval >= UPDATE_TERMINAL_INTERVAL)
  {
    gUpdate_Termainal_interval = millis();
   d4498:	6020      	str	r0, [r4, #0]
    gUPDATE_Terminal = 1;
   d449a:	703b      	strb	r3, [r7, #0]
    gSend_MESH_MESSAGE = 1;  //test JSON mesage to send  
   d449c:	7033      	strb	r3, [r6, #0]
  }


  if(gUPDATE_temp && gTEMP_ready)
   d449e:	782b      	ldrb	r3, [r5, #0]
   d44a0:	b143      	cbz	r3, d44b4 <loop+0x78>
   d44a2:	4c82      	ldr	r4, [pc, #520]	; (d46ac <loop+0x270>)
   d44a4:	7823      	ldrb	r3, [r4, #0]
   d44a6:	b12b      	cbz	r3, d44b4 <loop+0x78>
  {
    gTEMP_ready = 0;
   d44a8:	2300      	movs	r3, #0
   d44aa:	7023      	strb	r3, [r4, #0]
    getTempANALOG();
   d44ac:	f7ff febc 	bl	d4228 <_Z13getTempANALOGv>
    gTEMP_ready = 1;
   d44b0:	2301      	movs	r3, #1
   d44b2:	7023      	strb	r3, [r4, #0]
  }

  if(gUPDATE_Terminal && gTERMINAL_ready) 
   d44b4:	783b      	ldrb	r3, [r7, #0]
   d44b6:	b19b      	cbz	r3, d44e0 <loop+0xa4>
   d44b8:	4c7d      	ldr	r4, [pc, #500]	; (d46b0 <loop+0x274>)
   d44ba:	7823      	ldrb	r3, [r4, #0]
   d44bc:	b183      	cbz	r3, d44e0 <loop+0xa4>
  {
    gUPDATE_Terminal = 0;
   d44be:	4a79      	ldr	r2, [pc, #484]	; (d46a4 <loop+0x268>)
   d44c0:	2300      	movs	r3, #0
   d44c2:	7013      	strb	r3, [r2, #0]
    gTERMINAL_ready = 0;
   d44c4:	7023      	strb	r3, [r4, #0]

    Serial.print("ENDPOINT: Device iD: ");
   d44c6:	f001 fcdf 	bl	d5e88 <_Z16_fetch_usbserialv>
   d44ca:	497a      	ldr	r1, [pc, #488]	; (d46b4 <loop+0x278>)
   d44cc:	f001 fa12 	bl	d58f4 <_ZN5Print5printEPKc>
    Serial.println(gDeviceID);  //print with linefeed
   d44d0:	f001 fcda 	bl	d5e88 <_Z16_fetch_usbserialv>
   d44d4:	4b78      	ldr	r3, [pc, #480]	; (d46b8 <loop+0x27c>)
   d44d6:	6819      	ldr	r1, [r3, #0]
   d44d8:	f001 fa1f 	bl	d591a <_ZN5Print7printlnEPKc>


  }    
#endif     

    gTERMINAL_ready = 1;
   d44dc:	2301      	movs	r3, #1
   d44de:	7023      	strb	r3, [r4, #0]

  }

  if(gSend_MESH_MESSAGE && gMESHready)
   d44e0:	7833      	ldrb	r3, [r6, #0]
   d44e2:	4d76      	ldr	r5, [pc, #472]	; (d46bc <loop+0x280>)
   d44e4:	2b00      	cmp	r3, #0
   d44e6:	f000 80d2 	beq.w	d468e <loop+0x252>
   d44ea:	782b      	ldrb	r3, [r5, #0]
   d44ec:	2b00      	cmp	r3, #0
   d44ee:	f000 80ce 	beq.w	d468e <loop+0x252>
  {
    //build JSON message
     
    float value=99;
    char sID[20];
    gSend_MESH_MESSAGE = 0;
   d44f2:	4a6d      	ldr	r2, [pc, #436]	; (d46a8 <loop+0x26c>)

             //gDeviceID4.toCharArray(sID,20);
            //Construct the MESH message
             MESHmessage.insertKeyValue("NODE:", gDeviceID4);

             MESHmessage.insertKeyValue("BT", HiveData[0].HiveTemp);
   d44f4:	4c72      	ldr	r4, [pc, #456]	; (d46c0 <loop+0x284>)
  {
    //build JSON message
     
    float value=99;
    char sID[20];
    gSend_MESH_MESSAGE = 0;
   d44f6:	2300      	movs	r3, #0
   d44f8:	7013      	strb	r3, [r2, #0]
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d44fa:	a917      	add	r1, sp, #92	; 0x5c
   d44fc:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4500:	a80b      	add	r0, sp, #44	; 0x2c
    gMESHready = 0;
   d4502:	702b      	strb	r3, [r5, #0]
   d4504:	f000 fb20 	bl	d4b48 <_ZN10JsonWriterC1EPcj>
   d4508:	4b6e      	ldr	r3, [pc, #440]	; (d46c4 <loop+0x288>)
   d450a:	930b      	str	r3, [sp, #44]	; 0x2c
class JsonParserStatic : public JsonParser {
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d450c:	2314      	movs	r3, #20
   d450e:	9300      	str	r3, [sp, #0]
   d4510:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4514:	aba2      	add	r3, sp, #648	; 0x288
   d4516:	a962      	add	r1, sp, #392	; 0x188
   d4518:	a857      	add	r0, sp, #348	; 0x15c
   d451a:	f000 f97d 	bl	d4818 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d451e:	4b6a      	ldr	r3, [pc, #424]	; (d46c8 <loop+0x28c>)
   d4520:	9357      	str	r3, [sp, #348]	; 0x15c
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4522:	227d      	movs	r2, #125	; 0x7d
   d4524:	217b      	movs	r1, #123	; 0x7b
   d4526:	a80b      	add	r0, sp, #44	; 0x2c
   d4528:	f000 fb2e 	bl	d4b88 <_ZN10JsonWriter18startObjectOrArrayEcc>
	 * @brief Sets the number of digits for formatting float and double values.
	 *
	 * @param floatPlaces The number of decimal places for float and double.
	 * Set it to -1 to use the default for snprintf. -1 is the default value if you don't call setFloatPlaces.
	 */
	void setFloatPlaces(int floatPlaces) { this->floatPlaces = floatPlaces; }
   d452c:	2602      	movs	r6, #2

       MESHmessage.setFloatPlaces(2);

             //gDeviceID4.toCharArray(sID,20);
            //Construct the MESH message
             MESHmessage.insertKeyValue("NODE:", gDeviceID4);
   d452e:	4967      	ldr	r1, [pc, #412]	; (d46cc <loop+0x290>)
   d4530:	9616      	str	r6, [sp, #88]	; 0x58
   d4532:	a807      	add	r0, sp, #28
   d4534:	f001 f936 	bl	d57a4 <_ZN6StringC1ERKS_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4538:	a80b      	add	r0, sp, #44	; 0x2c
   d453a:	f000 fc01 	bl	d4d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d453e:	2201      	movs	r2, #1
   d4540:	4963      	ldr	r1, [pc, #396]	; (d46d0 <loop+0x294>)
   d4542:	a80b      	add	r0, sp, #44	; 0x2c
   d4544:	f000 fb70 	bl	d4c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4548:	213a      	movs	r1, #58	; 0x3a
   d454a:	a80b      	add	r0, sp, #44	; 0x2c
   d454c:	f000 fb0e 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   d4550:	2201      	movs	r2, #1
   d4552:	9907      	ldr	r1, [sp, #28]
   d4554:	a80b      	add	r0, sp, #44	; 0x2c
   d4556:	f000 fb67 	bl	d4c28 <_ZN10JsonWriter12insertStringEPKcb>
   d455a:	a807      	add	r0, sp, #28
   d455c:	f001 f89c 	bl	d5698 <_ZN6StringD1Ev>

             MESHmessage.insertKeyValue("BT", HiveData[0].HiveTemp);
   d4560:	ed94 0a08 	vldr	s0, [r4, #32]
   d4564:	495b      	ldr	r1, [pc, #364]	; (d46d4 <loop+0x298>)
   d4566:	a80b      	add	r0, sp, #44	; 0x2c
   d4568:	f7ff fea2 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
             MESHmessage.insertKeyValue("BW", HiveData[0].HiveWeight);
   d456c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
   d4570:	4959      	ldr	r1, [pc, #356]	; (d46d8 <loop+0x29c>)
   d4572:	a80b      	add	r0, sp, #44	; 0x2c
   d4574:	f7ff fe9c 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

             MESHmessage.insertKeyValue("GT", HiveData[1].HiveTemp);
   d4578:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
   d457c:	4957      	ldr	r1, [pc, #348]	; (d46dc <loop+0x2a0>)
   d457e:	a80b      	add	r0, sp, #44	; 0x2c
   d4580:	f7ff fe96 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
             MESHmessage.insertKeyValue("GW", HiveData[1].HiveWeight);
   d4584:	ed94 0a1b 	vldr	s0, [r4, #108]	; 0x6c
   d4588:	4955      	ldr	r1, [pc, #340]	; (d46e0 <loop+0x2a4>)
   d458a:	a80b      	add	r0, sp, #44	; 0x2c
   d458c:	f7ff fe90 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

             MESHmessage.insertKeyValue("WT", HiveData[2].HiveTemp);
   d4590:	ed94 0a24 	vldr	s0, [r4, #144]	; 0x90
   d4594:	4953      	ldr	r1, [pc, #332]	; (d46e4 <loop+0x2a8>)
   d4596:	a80b      	add	r0, sp, #44	; 0x2c
   d4598:	f7ff fe8a 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
             MESHmessage.insertKeyValue("WW", HiveData[2].HiveWeight);
   d459c:	ed94 0a29 	vldr	s0, [r4, #164]	; 0xa4
   d45a0:	4951      	ldr	r1, [pc, #324]	; (d46e8 <loop+0x2ac>)
   d45a2:	a80b      	add	r0, sp, #44	; 0x2c
   d45a4:	f7ff fe84 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

             MESHmessage.insertKeyValue("YT", HiveData[3].HiveTemp);
   d45a8:	ed94 0a32 	vldr	s0, [r4, #200]	; 0xc8
   d45ac:	494f      	ldr	r1, [pc, #316]	; (d46ec <loop+0x2b0>)
   d45ae:	a80b      	add	r0, sp, #44	; 0x2c
   d45b0:	f7ff fe7e 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
             MESHmessage.insertKeyValue("YW", HiveData[3].HiveWeight);
   d45b4:	ed94 0a37 	vldr	s0, [r4, #220]	; 0xdc
   d45b8:	494d      	ldr	r1, [pc, #308]	; (d46f0 <loop+0x2b4>)
   d45ba:	a80b      	add	r0, sp, #44	; 0x2c
   d45bc:	f7ff fe78 	bl	d42b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d45c0:	a80b      	add	r0, sp, #44	; 0x2c
   d45c2:	f000 faf2 	bl	d4baa <_ZN10JsonWriter19finishObjectOrArrayEv>
 //Printed Data: {"a":true,"b":1234,"c":"test"}        
*/	  

//if (strcmp(jw.getBuffer(), "{\"a\":true,\"b\":1234,\"c\":\"test\"}")) {
#ifdef Serial_DEBUG  
		Serial.printlnf("DEBUG: - ENDNODE: MESH JSON MESSAGE:\r\n %s", MESHmessage.getBuffer());
   d45c6:	f001 fc5f 	bl	d5e88 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d45ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d45cc:	4a49      	ldr	r2, [pc, #292]	; (d46f4 <loop+0x2b8>)
   d45ce:	2101      	movs	r1, #1
   d45d0:	f001 fabd 	bl	d5b4e <_ZN5Print11printf_implEbPKcz>
    
    parser.clear();
   d45d4:	a857      	add	r0, sp, #348	; 0x15c
   d45d6:	f000 f91b 	bl	d4810 <_ZN10JsonBuffer5clearEv>
   d45da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	/**
	 * @brief Add a c-string to the end of the buffer
	 *
	 * @param data Pointer to a c-string (null terminated).
	 */
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d45dc:	4620      	mov	r0, r4
   d45de:	f002 fd6b 	bl	d70b8 <strlen>
   d45e2:	4621      	mov	r1, r4
   d45e4:	4602      	mov	r2, r0
   d45e6:	a857      	add	r0, sp, #348	; 0x15c
   d45e8:	f000 f8f4 	bl	d47d4 <_ZN10JsonBuffer7addDataEPKcj>
	  parser.addString(MESHmessage.getBuffer());
    //parser.
   	if (!parser.parse()) {
   d45ec:	a857      	add	r0, sp, #348	; 0x15c
   d45ee:	f000 fda2 	bl	d5136 <_ZN10JsonParser5parseEv>
   d45f2:	b958      	cbnz	r0, d460c <loop+0x1d0>
		Serial.println("Parsing FAILED!!!");
   d45f4:	f001 fc48 	bl	d5e88 <_Z16_fetch_usbserialv>
   d45f8:	493f      	ldr	r1, [pc, #252]	; (d46f8 <loop+0x2bc>)
   d45fa:	f001 f98e 	bl	d591a <_ZN5Print7printlnEPKc>
		return;
   d45fe:	a857      	add	r0, sp, #348	; 0x15c
   d4600:	f7ff fd84 	bl	d410c <_ZN16JsonParserStaticILj256ELj20EED1Ev>
   d4604:	a80b      	add	r0, sp, #44	; 0x2c
   d4606:	f7ff fd6d 	bl	d40e4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d460a:	e042      	b.n	d4692 <loop+0x256>
    
	}
    Serial.println("Parsing PASSED!!!");
   d460c:	f001 fc3c 	bl	d5e88 <_Z16_fetch_usbserialv>
   d4610:	493a      	ldr	r1, [pc, #232]	; (d46fc <loop+0x2c0>)
   d4612:	f001 f982 	bl	d591a <_ZN5Print7printlnEPKc>
    value = parser.getReference().key("BT").valueFloat();
   d4616:	a957      	add	r1, sp, #348	; 0x15c
   d4618:	a804      	add	r0, sp, #16
   d461a:	f000 f90d 	bl	d4838 <_ZNK10JsonParser12getReferenceEv>
   d461e:	4a2d      	ldr	r2, [pc, #180]	; (d46d4 <loop+0x298>)
   d4620:	a904      	add	r1, sp, #16
   d4622:	a807      	add	r0, sp, #28
   d4624:	f000 fa6e 	bl	d4b04 <_ZNK13JsonReference3keyEPKc>
   d4628:	a807      	add	r0, sp, #28
   d462a:	ed9f 0a35 	vldr	s0, [pc, #212]	; d4700 <loop+0x2c4>
   d462e:	f000 f97f 	bl	d4930 <_ZNK13JsonReference10valueFloatEf>
   d4632:	a807      	add	r0, sp, #28
   d4634:	ed8d 0a03 	vstr	s0, [sp, #12]
   d4638:	f000 f868 	bl	d470c <_ZN13JsonReferenceD1Ev>
   d463c:	a804      	add	r0, sp, #16
   d463e:	f000 f865 	bl	d470c <_ZN13JsonReferenceD1Ev>
    Serial.printlnf("");
   d4642:	f001 fc21 	bl	d5e88 <_Z16_fetch_usbserialv>
   d4646:	4a2f      	ldr	r2, [pc, #188]	; (d4704 <loop+0x2c8>)
   d4648:	2101      	movs	r1, #1
   d464a:	f001 fa80 	bl	d5b4e <_ZN5Print11printf_implEbPKcz>
    Serial.print("Retrieved from JSON:  ");
   d464e:	f001 fc1b 	bl	d5e88 <_Z16_fetch_usbserialv>
   d4652:	492d      	ldr	r1, [pc, #180]	; (d4708 <loop+0x2cc>)
   d4654:	f001 f94e 	bl	d58f4 <_ZN5Print5printEPKc>
    Serial.print(value);
   d4658:	f001 fc16 	bl	d5e88 <_Z16_fetch_usbserialv>
   d465c:	ed9d 0a03 	vldr	s0, [sp, #12]
   d4660:	4604      	mov	r4, r0
   d4662:	ee10 0a10 	vmov	r0, s0
   d4666:	f002 f92b 	bl	d68c0 <__aeabi_f2d>
   d466a:	ec41 0b10 	vmov	d0, r0, r1
   d466e:	4631      	mov	r1, r6
   d4670:	4620      	mov	r0, r4
   d4672:	f001 fa69 	bl	d5b48 <_ZN5Print5printEdi>
    Serial.printlnf("");
   d4676:	f001 fc07 	bl	d5e88 <_Z16_fetch_usbserialv>
   d467a:	4a22      	ldr	r2, [pc, #136]	; (d4704 <loop+0x2c8>)
   d467c:	2101      	movs	r1, #1
   d467e:	f001 fa66 	bl	d5b4e <_ZN5Print11printf_implEbPKcz>
    char sID[20];
    gSend_MESH_MESSAGE = 0;
    gMESHready = 0;
   //JsonWriterStatic<256> jw;  
    JsonWriterStatic<256> MESHmessage;  
    JsonParserStatic<256,20> parser; 
   d4682:	a857      	add	r0, sp, #348	; 0x15c
   d4684:	f7ff fd42 	bl	d410c <_ZN16JsonParserStaticILj256ELj20EED1Ev>
    float value=99;
    char sID[20];
    gSend_MESH_MESSAGE = 0;
    gMESHready = 0;
   //JsonWriterStatic<256> jw;  
    JsonWriterStatic<256> MESHmessage;  
   d4688:	a80b      	add	r0, sp, #44	; 0x2c
   d468a:	f7ff fd2b 	bl	d40e4 <_ZN16JsonWriterStaticILj256EED1Ev>
      Serial.println("ENDPOINT: - ERROR - MESH NETWORK NOT READY!!!");
      Serial.printlnf("");
    }  
*/
  }   
   gMESHready = 1; 
   d468e:	2301      	movs	r3, #1
   d4690:	702b      	strb	r3, [r5, #0]
}
   d4692:	f50d 7d73 	add.w	sp, sp, #972	; 0x3cc
   d4696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4698:	2003e3c0 	.word	0x2003e3c0
   d469c:	2003e3d9 	.word	0x2003e3d9
   d46a0:	2003e3a0 	.word	0x2003e3a0
   d46a4:	2003e39c 	.word	0x2003e39c
   d46a8:	2003e3d8 	.word	0x2003e3d8
   d46ac:	2003e201 	.word	0x2003e201
   d46b0:	2003e200 	.word	0x2003e200
   d46b4:	000d8c41 	.word	0x000d8c41
   d46b8:	2003e38c 	.word	0x2003e38c
   d46bc:	2003e202 	.word	0x2003e202
   d46c0:	2003e2ac 	.word	0x2003e2ac
   d46c4:	000d8bd0 	.word	0x000d8bd0
   d46c8:	000d8be0 	.word	0x000d8be0
   d46cc:	2003e3c8 	.word	0x2003e3c8
   d46d0:	000d8c57 	.word	0x000d8c57
   d46d4:	000d8c5d 	.word	0x000d8c5d
   d46d8:	000d8c60 	.word	0x000d8c60
   d46dc:	000d8c63 	.word	0x000d8c63
   d46e0:	000d8c66 	.word	0x000d8c66
   d46e4:	000d8c69 	.word	0x000d8c69
   d46e8:	000d8c6c 	.word	0x000d8c6c
   d46ec:	000d8c6f 	.word	0x000d8c6f
   d46f0:	000d8c72 	.word	0x000d8c72
   d46f4:	000d8c75 	.word	0x000d8c75
   d46f8:	000d8c9f 	.word	0x000d8c9f
   d46fc:	000d8cb1 	.word	0x000d8cb1
   d4700:	00000000 	.word	0x00000000
   d4704:	000d8db2 	.word	0x000d8db2
   d4708:	000d8cc3 	.word	0x000d8cc3

000d470c <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   d470c:	4770      	bx	lr

000d470e <_ZN13JsonReferenceD0Ev>:

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
   d470e:	b510      	push	{r4, lr}
   d4710:	4604      	mov	r4, r0
}
   d4712:	f7ff fcc0 	bl	d4096 <_ZdlPv>
   d4716:	4620      	mov	r0, r4
   d4718:	bd10      	pop	{r4, pc}
	...

000d471c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d471c:	b510      	push	{r4, lr}
   d471e:	4b05      	ldr	r3, [pc, #20]	; (d4734 <_ZN10JsonBufferD1Ev+0x18>)
   d4720:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4722:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4724:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4726:	b91b      	cbnz	r3, d4730 <_ZN10JsonBufferD1Ev+0x14>
   d4728:	6840      	ldr	r0, [r0, #4]
   d472a:	b108      	cbz	r0, d4730 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d472c:	f000 ff22 	bl	d5574 <free>
	}
}
   d4730:	4620      	mov	r0, r4
   d4732:	bd10      	pop	{r4, pc}
   d4734:	000d8cf4 	.word	0x000d8cf4

000d4738 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4738:	b510      	push	{r4, lr}
   d473a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d473c:	f7ff ffee 	bl	d471c <_ZN10JsonBufferD1Ev>
   d4740:	4620      	mov	r0, r4
   d4742:	f7ff fca8 	bl	d4096 <_ZdlPv>
   d4746:	4620      	mov	r0, r4
   d4748:	bd10      	pop	{r4, pc}
	...

000d474c <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d474c:	b510      	push	{r4, lr}
   d474e:	4b07      	ldr	r3, [pc, #28]	; (d476c <_ZN10JsonParserD1Ev+0x20>)
   d4750:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d4752:	7c03      	ldrb	r3, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4754:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d4756:	b91b      	cbnz	r3, d4760 <_ZN10JsonParserD1Ev+0x14>
   d4758:	6940      	ldr	r0, [r0, #20]
   d475a:	b108      	cbz	r0, d4760 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d475c:	f000 ff0a 	bl	d5574 <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4760:	4620      	mov	r0, r4
   d4762:	f7ff ffdb 	bl	d471c <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d4766:	4620      	mov	r0, r4
   d4768:	bd10      	pop	{r4, pc}
   d476a:	bf00      	nop
   d476c:	000d8d44 	.word	0x000d8d44

000d4770 <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4770:	b510      	push	{r4, lr}
   d4772:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d4774:	f7ff ffea 	bl	d474c <_ZN10JsonParserD1Ev>
   d4778:	4620      	mov	r0, r4
   d477a:	f7ff fc8c 	bl	d4096 <_ZdlPv>
   d477e:	4620      	mov	r0, r4
   d4780:	bd10      	pop	{r4, pc}
	...

000d4784 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4784:	b510      	push	{r4, lr}
   d4786:	4b03      	ldr	r3, [pc, #12]	; (d4794 <_ZN10JsonWriterD1Ev+0x10>)
   d4788:	6003      	str	r3, [r0, #0]
   d478a:	4604      	mov	r4, r0
   d478c:	f7ff ffc6 	bl	d471c <_ZN10JsonBufferD1Ev>

}
   d4790:	4620      	mov	r0, r4
   d4792:	bd10      	pop	{r4, pc}
   d4794:	000d8d04 	.word	0x000d8d04

000d4798 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4798:	b510      	push	{r4, lr}
   d479a:	4604      	mov	r4, r0

}
   d479c:	f7ff fff2 	bl	d4784 <_ZN10JsonWriterD1Ev>
   d47a0:	4620      	mov	r0, r4
   d47a2:	f7ff fc78 	bl	d4096 <_ZdlPv>
   d47a6:	4620      	mov	r0, r4
   d47a8:	bd10      	pop	{r4, pc}

000d47aa <_ZN10JsonBuffer8allocateEj>:

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d47aa:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d47ac:	7c03      	ldrb	r3, [r0, #16]

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d47ae:	4604      	mov	r4, r0
   d47b0:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d47b2:	b10b      	cbz	r3, d47b8 <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
   d47b4:	2000      	movs	r0, #0
   d47b6:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
   d47b8:	6840      	ldr	r0, [r0, #4]
   d47ba:	b110      	cbz	r0, d47c2 <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
   d47bc:	f000 fee2 	bl	d5584 <realloc>
   d47c0:	e002      	b.n	d47c8 <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
   d47c2:	4608      	mov	r0, r1
   d47c4:	f000 fece 	bl	d5564 <malloc>
		}
		if (newBuffer) {
   d47c8:	2800      	cmp	r0, #0
   d47ca:	d0f3      	beq.n	d47b4 <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
   d47cc:	6060      	str	r0, [r4, #4]
			bufferLen = len;
   d47ce:	60a5      	str	r5, [r4, #8]
			return true;
   d47d0:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
   d47d2:	bd38      	pop	{r3, r4, r5, pc}

000d47d4 <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d47d4:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   d47d6:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d47d8:	460e      	mov	r6, r1
   d47da:	4604      	mov	r4, r0
   d47dc:	4615      	mov	r5, r2
   d47de:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
   d47e0:	b17b      	cbz	r3, d4802 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d47e2:	1853      	adds	r3, r2, r1
   d47e4:	6882      	ldr	r2, [r0, #8]
   d47e6:	4293      	cmp	r3, r2
   d47e8:	d80b      	bhi.n	d4802 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
   d47ea:	68e3      	ldr	r3, [r4, #12]
   d47ec:	6860      	ldr	r0, [r4, #4]
   d47ee:	462a      	mov	r2, r5
   d47f0:	4631      	mov	r1, r6
   d47f2:	4418      	add	r0, r3
   d47f4:	f002 fc12 	bl	d701c <memcpy>
	offset += dataLen;
   d47f8:	68e3      	ldr	r3, [r4, #12]
   d47fa:	441d      	add	r5, r3
   d47fc:	60e5      	str	r5, [r4, #12]

	return true;
   d47fe:	2001      	movs	r0, #1
   d4800:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
   d4802:	4429      	add	r1, r5
   d4804:	4620      	mov	r0, r4
   d4806:	f7ff ffd0 	bl	d47aa <_ZN10JsonBuffer8allocateEj>
   d480a:	2800      	cmp	r0, #0
   d480c:	d1ed      	bne.n	d47ea <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
   d480e:	bd70      	pop	{r4, r5, r6, pc}

000d4810 <_ZN10JsonBuffer5clearEv>:

void JsonBuffer::clear() {
	offset = 0;
   d4810:	2300      	movs	r3, #0
   d4812:	60c3      	str	r3, [r0, #12]
   d4814:	4770      	bx	lr
	...

000d4818 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d4818:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d481a:	6082      	str	r2, [r0, #8]
   d481c:	2200      	movs	r2, #0
   d481e:	60c2      	str	r2, [r0, #12]
   d4820:	2201      	movs	r2, #1
   d4822:	7402      	strb	r2, [r0, #16]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d4824:	6143      	str	r3, [r0, #20]
   d4826:	4a03      	ldr	r2, [pc, #12]	; (d4834 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d4828:	9b02      	ldr	r3, [sp, #8]
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d482a:	6041      	str	r1, [r0, #4]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d482c:	6002      	str	r2, [r0, #0]
   d482e:	61c3      	str	r3, [r0, #28]

}
   d4830:	bd10      	pop	{r4, pc}
   d4832:	bf00      	nop
   d4834:	000d8d44 	.word	0x000d8d44

000d4838 <_ZNK10JsonParser12getReferenceEv>:
	return true;
}

JsonReference JsonParser::getReference() const {

	if (tokens < tokensEnd) {
   d4838:	698b      	ldr	r3, [r1, #24]
   d483a:	694a      	ldr	r2, [r1, #20]
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d483c:	6041      	str	r1, [r0, #4]
	return true;
}

JsonReference JsonParser::getReference() const {

	if (tokens < tokensEnd) {
   d483e:	429a      	cmp	r2, r3
   d4840:	4b03      	ldr	r3, [pc, #12]	; (d4850 <_ZNK10JsonParser12getReferenceEv+0x18>)
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4842:	6003      	str	r3, [r0, #0]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4844:	bf2a      	itet	cs
   d4846:	2300      	movcs	r3, #0
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4848:	6082      	strcc	r2, [r0, #8]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d484a:	6083      	strcs	r3, [r0, #8]
		return JsonReference(this, &tokens[0]);
	}
	else {
		return JsonReference(this);
	}
}
   d484c:	4770      	bx	lr
   d484e:	bf00      	nop
   d4850:	000d8ce4 	.word	0x000d8ce4

000d4854 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d4854:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d4856:	6813      	ldr	r3, [r2, #0]
   d4858:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d485a:	6813      	ldr	r3, [r2, #0]
   d485c:	f103 0410 	add.w	r4, r3, #16
   d4860:	6014      	str	r4, [r2, #0]
   d4862:	6986      	ldr	r6, [r0, #24]
   d4864:	42b4      	cmp	r4, r6
   d4866:	d20a      	bcs.n	d487e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d4868:	699b      	ldr	r3, [r3, #24]
   d486a:	688c      	ldr	r4, [r1, #8]
   d486c:	42a3      	cmp	r3, r4
   d486e:	da01      	bge.n	d4874 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d4870:	429d      	cmp	r5, r3
   d4872:	daf2      	bge.n	d485a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   d4874:	42a3      	cmp	r3, r4
   d4876:	bfcc      	ite	gt
   d4878:	2000      	movgt	r0, #0
   d487a:	2001      	movle	r0, #1
   d487c:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
   d487e:	2000      	movs	r0, #0
	}
	return true;
}
   d4880:	bd70      	pop	{r4, r5, r6, pc}

000d4882 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4882:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4886:	ad02      	add	r5, sp, #8
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4888:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d488a:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d488e:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4890:	f845 3d04 	str.w	r3, [r5, #-4]!
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4894:	4607      	mov	r7, r0
   d4896:	460c      	mov	r4, r1
   d4898:	4691      	mov	r9, r2

	size_t index = 0;
   d489a:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d489e:	9b01      	ldr	r3, [sp, #4]
   d48a0:	69ba      	ldr	r2, [r7, #24]
   d48a2:	429a      	cmp	r2, r3
   d48a4:	d91e      	bls.n	d48e4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
   d48a6:	6899      	ldr	r1, [r3, #8]
   d48a8:	68a2      	ldr	r2, [r4, #8]
   d48aa:	4291      	cmp	r1, r2
   d48ac:	da1a      	bge.n	d48e4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
   d48ae:	45b0      	cmp	r8, r6
   d48b0:	d10b      	bne.n	d48ca <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
   d48b2:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
   d48b6:	462a      	mov	r2, r5
   d48b8:	4621      	mov	r1, r4
   d48ba:	4638      	mov	r0, r7
   d48bc:	f7ff ffca 	bl	d4854 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d48c0:	b118      	cbz	r0, d48ca <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
   d48c2:	9b01      	ldr	r3, [sp, #4]
   d48c4:	f8ca 3000 	str.w	r3, [sl]
				return true;
   d48c8:	e00d      	b.n	d48e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
   d48ca:	462a      	mov	r2, r5
   d48cc:	4621      	mov	r1, r4
   d48ce:	4638      	mov	r0, r7
   d48d0:	f7ff ffc0 	bl	d4854 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d48d4:	462a      	mov	r2, r5
   d48d6:	4621      	mov	r1, r4
   d48d8:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
   d48da:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
   d48de:	f7ff ffb9 	bl	d4854 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d48e2:	e7dc      	b.n	d489e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
   d48e4:	2000      	movs	r0, #0
}
   d48e6:	b002      	add	sp, #8
   d48e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d48ec <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
	}

	return index;
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   d48ec:	b570      	push	{r4, r5, r6, lr}

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   d48ee:	3b01      	subs	r3, #1
   d48f0:	2400      	movs	r4, #0
   d48f2:	684e      	ldr	r6, [r1, #4]
   d48f4:	688d      	ldr	r5, [r1, #8]
   d48f6:	1bad      	subs	r5, r5, r6
   d48f8:	42ac      	cmp	r4, r5
   d48fa:	da07      	bge.n	d490c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
   d48fc:	429c      	cmp	r4, r3
   d48fe:	da05      	bge.n	d490c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
		dst[ii] = buffer[token->start + ii];
   d4900:	6845      	ldr	r5, [r0, #4]
   d4902:	4425      	add	r5, r4
   d4904:	5dad      	ldrb	r5, [r5, r6]
   d4906:	5515      	strb	r5, [r2, r4]
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   d4908:	3401      	adds	r4, #1
   d490a:	e7f2      	b.n	d48f2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
		dst[ii] = buffer[token->start + ii];
 	}
	dst[ii] = 0;
   d490c:	2300      	movs	r3, #0
   d490e:	5513      	strb	r3, [r2, r4]
   d4910:	bd70      	pop	{r4, r5, r6, pc}

000d4912 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
	}
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   d4912:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4914:	4614      	mov	r4, r2
	// Copy data here, because tokens are not null terminated
	char tmp[16];
	copyTokenValue(token, tmp, sizeof(tmp));
   d4916:	2310      	movs	r3, #16
   d4918:	466a      	mov	r2, sp
   d491a:	f7ff ffe7 	bl	d48ec <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>

	result = strtof(tmp, 0);
   d491e:	4668      	mov	r0, sp
   d4920:	2100      	movs	r1, #0
   d4922:	f003 fa05 	bl	d7d30 <strtof>
	return true;
}
   d4926:	2001      	movs	r0, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
	// Copy data here, because tokens are not null terminated
	char tmp[16];
	copyTokenValue(token, tmp, sizeof(tmp));

	result = strtof(tmp, 0);
   d4928:	ed84 0a00 	vstr	s0, [r4]
	return true;
}
   d492c:	b004      	add	sp, #16
   d492e:	bd10      	pop	{r4, pc}

000d4930 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   d4930:	b507      	push	{r0, r1, r2, lr}
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   d4932:	6881      	ldr	r1, [r0, #8]
   d4934:	ed8d 0a01 	vstr	s0, [sp, #4]
   d4938:	b119      	cbz	r1, d4942 <_ZNK13JsonReference10valueFloatEf+0x12>
   d493a:	aa01      	add	r2, sp, #4
   d493c:	6840      	ldr	r0, [r0, #4]
   d493e:	f7ff ffe8 	bl	d4912 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   d4942:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4946:	b003      	add	sp, #12
   d4948:	f85d fb04 	ldr.w	pc, [sp], #4

000d494c <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d494c:	b538      	push	{r3, r4, r5, lr}
   d494e:	4604      	mov	r4, r0
	if (str) {
   d4950:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d4952:	460d      	mov	r5, r1
	if (str) {
   d4954:	b110      	cbz	r0, d495c <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
   d4956:	f000 ff60 	bl	d581a <_ZN6String6concatEc>
   d495a:	e007      	b.n	d496c <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
   d495c:	6861      	ldr	r1, [r4, #4]
   d495e:	b129      	cbz	r1, d496c <_ZN16JsonParserString6appendEc+0x20>
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	68e2      	ldr	r2, [r4, #12]
   d4964:	3b01      	subs	r3, #1
   d4966:	429a      	cmp	r2, r3
			buf[length] = ch;
   d4968:	bf38      	it	cc
   d496a:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
   d496c:	68e3      	ldr	r3, [r4, #12]
   d496e:	3301      	adds	r3, #1
   d4970:	60e3      	str	r3, [r4, #12]
   d4972:	bd38      	pop	{r3, r4, r5, pc}

000d4974 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
   d4974:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d4976:	b570      	push	{r4, r5, r6, lr}
   d4978:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
   d497a:	d801      	bhi.n	d4980 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
   d497c:	b2c1      	uxtb	r1, r0
   d497e:	e019      	b.n	d49b4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
   d4980:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   d4984:	ea4f 15a0 	mov.w	r5, r0, asr #6
   d4988:	f000 063f 	and.w	r6, r0, #63	; 0x3f
   d498c:	d203      	bcs.n	d4996 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
   d498e:	f065 013f 	orn	r1, r5, #63	; 0x3f
   d4992:	b2c9      	uxtb	r1, r1
   d4994:	e009      	b.n	d49aa <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
   d4996:	0b01      	lsrs	r1, r0, #12
   d4998:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff ffd5 	bl	d494c <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
   d49a2:	f005 013f 	and.w	r1, r5, #63	; 0x3f
   d49a6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d49aa:	4620      	mov	r0, r4
   d49ac:	f7ff ffce 	bl	d494c <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d49b0:	f046 0180 	orr.w	r1, r6, #128	; 0x80
   d49b4:	4620      	mov	r0, r4
	}
}
   d49b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d49ba:	f7ff bfc7 	b.w	d494c <_ZN16JsonParserString6appendEc>
	...

000d49c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d49c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d49c4:	684d      	ldr	r5, [r1, #4]
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d49c6:	4680      	mov	r8, r0
   d49c8:	460f      	mov	r7, r1
   d49ca:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;
   d49cc:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
   d49ce:	68b8      	ldr	r0, [r7, #8]
   d49d0:	4285      	cmp	r5, r0
   d49d2:	da46      	bge.n	d4a62 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa2>
   d49d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
   d49d8:	b3cc      	cbz	r4, d4a4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8e>
			escape = false;
			switch(buffer[ii]) {
   d49da:	5d59      	ldrb	r1, [r3, r5]
   d49dc:	296e      	cmp	r1, #110	; 0x6e
   d49de:	eb03 0205 	add.w	r2, r3, r5
   d49e2:	d00f      	beq.n	d4a04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
   d49e4:	d805      	bhi.n	d49f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x32>
   d49e6:	2962      	cmp	r1, #98	; 0x62
   d49e8:	d00a      	beq.n	d4a00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x40>
   d49ea:	2966      	cmp	r1, #102	; 0x66
   d49ec:	d10b      	bne.n	d4a06 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d49ee:	210c      	movs	r1, #12
   d49f0:	e009      	b.n	d4a06 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
   d49f2:	2974      	cmp	r1, #116	; 0x74
   d49f4:	d00e      	beq.n	d4a14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x54>
   d49f6:	2975      	cmp	r1, #117	; 0x75
   d49f8:	d00e      	beq.n	d4a18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x58>
   d49fa:	2972      	cmp	r1, #114	; 0x72
   d49fc:	d103      	bne.n	d4a06 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
   d49fe:	e007      	b.n	d4a10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x50>
			case 'b':
				str.append('\b');
   d4a00:	2108      	movs	r1, #8
   d4a02:	e000      	b.n	d4a06 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
   d4a04:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d4a06:	4630      	mov	r0, r6
   d4a08:	f7ff ffa0 	bl	d494c <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
   d4a0c:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
   d4a0e:	e026      	b.n	d4a5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
   d4a10:	210d      	movs	r1, #13
   d4a12:	e7f8      	b.n	d4a06 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 't':
				str.append('\t');
   d4a14:	2109      	movs	r1, #9
   d4a16:	e7f6      	b.n	d4a06 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
   d4a18:	1d2b      	adds	r3, r5, #4
   d4a1a:	4298      	cmp	r0, r3
   d4a1c:	ddf6      	ble.n	d4a0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
   d4a1e:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
   d4a20:	a802      	add	r0, sp, #8
   d4a22:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d4a26:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
   d4a28:	3301      	adds	r3, #1
   d4a2a:	2b04      	cmp	r3, #4
   d4a2c:	d1f8      	bne.n	d4a20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x60>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d4a2e:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4a30:	aa01      	add	r2, sp, #4
   d4a32:	490e      	ldr	r1, [pc, #56]	; (d4a6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xac>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d4a34:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4a38:	f000 fdac 	bl	d5594 <sscanf>
   d4a3c:	2801      	cmp	r0, #1
   d4a3e:	d1e5      	bne.n	d4a0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
						appendUtf8((uint16_t)unicode, str);
   d4a40:	4631      	mov	r1, r6
   d4a42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4a46:	f7ff ff95 	bl	d4974 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d4a4a:	3505      	adds	r5, #5
   d4a4c:	e7de      	b.n	d4a0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
   d4a4e:	5d59      	ldrb	r1, [r3, r5]
   d4a50:	295c      	cmp	r1, #92	; 0x5c
   d4a52:	d003      	beq.n	d4a5c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
   d4a54:	4630      	mov	r0, r6
   d4a56:	f7ff ff79 	bl	d494c <_ZN16JsonParserString6appendEc>
   d4a5a:	e000      	b.n	d4a5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
   d4a5c:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d4a5e:	3501      	adds	r5, #1
   d4a60:	e7b5      	b.n	d49ce <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
   d4a62:	2001      	movs	r0, #1
   d4a64:	b004      	add	sp, #16
   d4a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a6a:	bf00      	nop
   d4a6c:	000d8d13 	.word	0x000d8d13

000d4a70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d4a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4a72:	460c      	mov	r4, r1
   d4a74:	4606      	mov	r6, r0

	result = "";
   d4a76:	490c      	ldr	r1, [pc, #48]	; (d4aa8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d4a78:	4610      	mov	r0, r2
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d4a7a:	4615      	mov	r5, r2

	result = "";
   d4a7c:	f000 fea5 	bl	d57ca <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d4a80:	68a3      	ldr	r3, [r4, #8]
   d4a82:	6861      	ldr	r1, [r4, #4]
   d4a84:	1a59      	subs	r1, r3, r1
   d4a86:	3101      	adds	r1, #1
   d4a88:	4628      	mov	r0, r5
   d4a8a:	f000 fe23 	bl	d56d4 <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d4a8e:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d4a90:	466a      	mov	r2, sp
   d4a92:	4621      	mov	r1, r4
   d4a94:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d4a96:	9500      	str	r5, [sp, #0]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	9302      	str	r3, [sp, #8]
   d4a9c:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d4a9e:	f7ff ff8f 	bl	d49c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d4aa2:	b004      	add	sp, #16
   d4aa4:	bd70      	pop	{r4, r5, r6, pc}
   d4aa6:	bf00      	nop
   d4aa8:	000d8db2 	.word	0x000d8db2

000d4aac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ab0:	b089      	sub	sp, #36	; 0x24
   d4ab2:	4606      	mov	r6, r0
   d4ab4:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4ab6:	a804      	add	r0, sp, #16
   d4ab8:	4911      	ldr	r1, [pc, #68]	; (d4b00 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4aba:	4690      	mov	r8, r2
   d4abc:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4abe:	f000 fe32 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d4ac2:	2500      	movs	r5, #0
   d4ac4:	9500      	str	r5, [sp, #0]
   d4ac6:	464b      	mov	r3, r9
   d4ac8:	aa03      	add	r2, sp, #12
   d4aca:	4639      	mov	r1, r7
   d4acc:	4630      	mov	r0, r6
   d4ace:	f7ff fed8 	bl	d4882 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d4ad2:	4604      	mov	r4, r0
   d4ad4:	b168      	cbz	r0, d4af2 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
   d4ad6:	aa04      	add	r2, sp, #16
   d4ad8:	9903      	ldr	r1, [sp, #12]
   d4ada:	4630      	mov	r0, r6
   d4adc:	f7ff ffc8 	bl	d4a70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d4ae0:	4604      	mov	r4, r0
   d4ae2:	b120      	cbz	r0, d4aee <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4ae4:	4641      	mov	r1, r8
   d4ae6:	a804      	add	r0, sp, #16
   d4ae8:	f000 fea4 	bl	d5834 <_ZNK6String6equalsEPKc>
   d4aec:	b908      	cbnz	r0, d4af2 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d4aee:	3501      	adds	r5, #1
   d4af0:	e7e8      	b.n	d4ac4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4af2:	a804      	add	r0, sp, #16
   d4af4:	f000 fdd0 	bl	d5698 <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
   d4af8:	4620      	mov	r0, r4
   d4afa:	b009      	add	sp, #36	; 0x24
   d4afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b00:	000d8db2 	.word	0x000d8db2

000d4b04 <_ZNK13JsonReference3keyEPKc>:
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
}

JsonReference JsonReference::key(const char *name) const {
   d4b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4b06:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d4b08:	6889      	ldr	r1, [r1, #8]
   d4b0a:	4e0a      	ldr	r6, [pc, #40]	; (d4b34 <_ZNK13JsonReference3keyEPKc+0x30>)
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
}

JsonReference JsonReference::key(const char *name) const {
   d4b0c:	4604      	mov	r4, r0
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d4b0e:	b121      	cbz	r1, d4b1a <_ZNK13JsonReference3keyEPKc+0x16>
   d4b10:	ab01      	add	r3, sp, #4
   d4b12:	6868      	ldr	r0, [r5, #4]
   d4b14:	f7ff ffca 	bl	d4aac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d4b18:	b920      	cbnz	r0, d4b24 <_ZNK13JsonReference3keyEPKc+0x20>
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
   d4b1a:	686b      	ldr	r3, [r5, #4]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4b1c:	6063      	str	r3, [r4, #4]
   d4b1e:	6026      	str	r6, [r4, #0]
   d4b20:	2300      	movs	r3, #0
   d4b22:	e003      	b.n	d4b2c <_ZNK13JsonReference3keyEPKc+0x28>

JsonReference JsonReference::key(const char *name) const {
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
		return JsonReference(parser, newToken);
   d4b24:	686b      	ldr	r3, [r5, #4]
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4b26:	6063      	str	r3, [r4, #4]
   d4b28:	9b01      	ldr	r3, [sp, #4]
   d4b2a:	6026      	str	r6, [r4, #0]
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
	}
}
   d4b2c:	4620      	mov	r0, r4
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4b2e:	60a3      	str	r3, [r4, #8]
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
	}
}
   d4b30:	b002      	add	sp, #8
   d4b32:	bd70      	pop	{r4, r5, r6, pc}
   d4b34:	000d8ce4 	.word	0x000d8ce4

000d4b38 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4b38:	2300      	movs	r3, #0
   d4b3a:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4b3c:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = false;
   d4b3e:	7603      	strb	r3, [r0, #24]
	context[contextIndex].terminator = 0;
   d4b40:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d4b42:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d4b46:	4770      	bx	lr

000d4b48 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4b48:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4b4a:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4b4c:	60c3      	str	r3, [r0, #12]
   d4b4e:	2301      	movs	r3, #1
   d4b50:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4b52:	4b05      	ldr	r3, [pc, #20]	; (d4b68 <_ZN10JsonWriterC1EPcj+0x20>)
   d4b54:	6003      	str	r3, [r0, #0]
   d4b56:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4b5a:	6041      	str	r1, [r0, #4]
   d4b5c:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4b5e:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4b60:	f7ff ffea 	bl	d4b38 <_ZN10JsonWriter4initEv>
}
   d4b64:	bd10      	pop	{r4, pc}
   d4b66:	bf00      	nop
   d4b68:	000d8d04 	.word	0x000d8d04

000d4b6c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4b6c:	68c3      	ldr	r3, [r0, #12]
   d4b6e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d4b70:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d4b72:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d4b74:	bf3f      	itttt	cc
   d4b76:	6842      	ldrcc	r2, [r0, #4]
   d4b78:	1c5c      	addcc	r4, r3, #1
   d4b7a:	60c4      	strcc	r4, [r0, #12]
   d4b7c:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4b7e:	bf24      	itt	cs
   d4b80:	2301      	movcs	r3, #1
   d4b82:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d4b86:	bd10      	pop	{r4, pc}

000d4b88 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4b88:	b538      	push	{r3, r4, r5, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4b8a:	6944      	ldr	r4, [r0, #20]
   d4b8c:	1c65      	adds	r5, r4, #1
   d4b8e:	2d08      	cmp	r5, #8
   d4b90:	d809      	bhi.n	d4ba6 <_ZN10JsonWriter18startObjectOrArrayEcc+0x1e>
   d4b92:	eb00 0344 	add.w	r3, r0, r4, lsl #1
		return false;
	}
	contextIndex++;

	context[contextIndex].isFirst = true;
   d4b96:	2401      	movs	r4, #1

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	contextIndex++;
   d4b98:	6145      	str	r5, [r0, #20]

	context[contextIndex].isFirst = true;
   d4b9a:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4b9c:	76da      	strb	r2, [r3, #27]

	insertChar(startChar);
   d4b9e:	f7ff ffe5 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
	return true;
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	bd38      	pop	{r3, r4, r5, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4ba6:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4ba8:	bd38      	pop	{r3, r4, r5, pc}

000d4baa <_ZN10JsonWriter19finishObjectOrArrayEv>:


void JsonWriter::finishObjectOrArray() {
   d4baa:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d4bac:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4bae:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4bb0:	b143      	cbz	r3, d4bc4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4bb2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d4bb6:	7e59      	ldrb	r1, [r3, #25]
   d4bb8:	b109      	cbz	r1, d4bbe <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d4bba:	f7ff ffd7 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4bbe:	6963      	ldr	r3, [r4, #20]
   d4bc0:	3b01      	subs	r3, #1
   d4bc2:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d4bc4:	68a3      	ldr	r3, [r4, #8]
   d4bc6:	68e0      	ldr	r0, [r4, #12]
   d4bc8:	6861      	ldr	r1, [r4, #4]
   d4bca:	4298      	cmp	r0, r3
   d4bcc:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4bd0:	bf2a      	itet	cs
   d4bd2:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d4bd4:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4bd6:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d4bda:	bd10      	pop	{r4, pc}

000d4bdc <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d4bdc:	b570      	push	{r4, r5, r6, lr}
   d4bde:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4be0:	68c0      	ldr	r0, [r0, #12]
   d4be2:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4be4:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d4be6:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4be8:	4613      	mov	r3, r2
   d4bea:	4430      	add	r0, r6
   d4bec:	460a      	mov	r2, r1
   d4bee:	4629      	mov	r1, r5
   d4bf0:	f000 fcd8 	bl	d55a4 <vsnprintf>
	if (count <= spaceAvailable) {
   d4bf4:	4285      	cmp	r5, r0
		offset += count;
   d4bf6:	bf2d      	iteet	cs
   d4bf8:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4bfa:	68a3      	ldrcc	r3, [r4, #8]
   d4bfc:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4bfe:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4c00:	bf36      	itet	cc
   d4c02:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4c04:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4c06:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4c0a:	bd70      	pop	{r4, r5, r6, pc}

000d4c0c <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4c0c:	b40e      	push	{r1, r2, r3}
   d4c0e:	b503      	push	{r0, r1, lr}
   d4c10:	aa03      	add	r2, sp, #12
   d4c12:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d4c16:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d4c18:	f7ff ffe0 	bl	d4bdc <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d4c1c:	b002      	add	sp, #8
   d4c1e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4c22:	b003      	add	sp, #12
   d4c24:	4770      	bx	lr
	...

000d4c28 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c2c:	4604      	mov	r4, r0
   d4c2e:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d4c30:	4617      	mov	r7, r2
   d4c32:	b112      	cbz	r2, d4c3a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d4c34:	2122      	movs	r1, #34	; 0x22
   d4c36:	f7ff ff99 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4c3a:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4c3c:	5d71      	ldrb	r1, [r6, r5]
   d4c3e:	eb06 0805 	add.w	r8, r6, r5
   d4c42:	2900      	cmp	r1, #0
   d4c44:	d071      	beq.n	d4d2a <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d4c46:	68e2      	ldr	r2, [r4, #12]
   d4c48:	68a3      	ldr	r3, [r4, #8]
   d4c4a:	429a      	cmp	r2, r3
   d4c4c:	d26d      	bcs.n	d4d2a <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d4c4e:	060b      	lsls	r3, r1, #24
   d4c50:	d533      	bpl.n	d4cba <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d4c52:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d4c56:	2be0      	cmp	r3, #224	; 0xe0
   d4c58:	d117      	bne.n	d4c8a <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4c5a:	f898 3001 	ldrb.w	r3, [r8, #1]
   d4c5e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4c62:	2a80      	cmp	r2, #128	; 0x80
   d4c64:	d111      	bne.n	d4c8a <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4c66:	f105 0802 	add.w	r8, r5, #2
   d4c6a:	f816 2008 	ldrb.w	r2, [r6, r8]
   d4c6e:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d4c72:	2880      	cmp	r0, #128	; 0x80
   d4c74:	d109      	bne.n	d4c8a <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d4c7a:	019b      	lsls	r3, r3, #6
   d4c7c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d4c80:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d4c84:	431a      	orrs	r2, r3
   d4c86:	b292      	uxth	r2, r2
   d4c88:	e011      	b.n	d4cae <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d4c8a:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d4c8e:	2bc0      	cmp	r3, #192	; 0xc0
   d4c90:	d146      	bne.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d4c92:	f105 0801 	add.w	r8, r5, #1
   d4c96:	f816 3008 	ldrb.w	r3, [r6, r8]
   d4c9a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4c9e:	2a80      	cmp	r2, #128	; 0x80
   d4ca0:	d13e      	bne.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4ca2:	0189      	lsls	r1, r1, #6
   d4ca4:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d4ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d4cac:	431a      	orrs	r2, r3
   d4cae:	4923      	ldr	r1, [pc, #140]	; (d4d3c <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	f7ff ffab 	bl	d4c0c <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d4cb6:	4645      	mov	r5, r8
   d4cb8:	e035      	b.n	d4d26 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4cba:	290c      	cmp	r1, #12
   d4cbc:	d018      	beq.n	d4cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d4cbe:	d80b      	bhi.n	d4cd8 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d4cc0:	2909      	cmp	r1, #9
   d4cc2:	d021      	beq.n	d4d08 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d4cc4:	290a      	cmp	r1, #10
   d4cc6:	d019      	beq.n	d4cfc <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d4cc8:	2908      	cmp	r1, #8
   d4cca:	d129      	bne.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d4ccc:	215c      	movs	r1, #92	; 0x5c
   d4cce:	4620      	mov	r0, r4
   d4cd0:	f7ff ff4c 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d4cd4:	2162      	movs	r1, #98	; 0x62
   d4cd6:	e023      	b.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4cd8:	2922      	cmp	r1, #34	; 0x22
   d4cda:	d01b      	beq.n	d4d14 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4cdc:	295c      	cmp	r1, #92	; 0x5c
   d4cde:	d019      	beq.n	d4d14 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4ce0:	290d      	cmp	r1, #13
   d4ce2:	d11d      	bne.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d4ce4:	215c      	movs	r1, #92	; 0x5c
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	f7ff ff40 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d4cec:	2172      	movs	r1, #114	; 0x72
   d4cee:	e017      	b.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d4cf0:	215c      	movs	r1, #92	; 0x5c
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	f7ff ff3a 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4cf8:	2166      	movs	r1, #102	; 0x66
   d4cfa:	e011      	b.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d4cfc:	215c      	movs	r1, #92	; 0x5c
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff ff34 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4d04:	216e      	movs	r1, #110	; 0x6e
   d4d06:	e00b      	b.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d4d08:	215c      	movs	r1, #92	; 0x5c
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff ff2e 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d4d10:	2174      	movs	r1, #116	; 0x74
   d4d12:	e005      	b.n	d4d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d4d14:	215c      	movs	r1, #92	; 0x5c
   d4d16:	4620      	mov	r0, r4
   d4d18:	f7ff ff28 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d4d1c:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d4d20:	4620      	mov	r0, r4
   d4d22:	f7ff ff23 	bl	d4b6c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4d26:	3501      	adds	r5, #1
   d4d28:	e788      	b.n	d4c3c <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d4d2a:	b12f      	cbz	r7, d4d38 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	2122      	movs	r1, #34	; 0x22
	}

}
   d4d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d4d34:	f7ff bf1a 	b.w	d4b6c <_ZN10JsonWriter10insertCharEc>
   d4d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d3c:	000d8d18 	.word	0x000d8d18

000d4d40 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d4d40:	6942      	ldr	r2, [r0, #20]
   d4d42:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d4d46:	7e1a      	ldrb	r2, [r3, #24]
   d4d48:	b112      	cbz	r2, d4d50 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d4d4a:	2200      	movs	r2, #0
   d4d4c:	761a      	strb	r2, [r3, #24]
   d4d4e:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d4d50:	212c      	movs	r1, #44	; 0x2c
   d4d52:	f7ff bf0b 	b.w	d4b6c <_ZN10JsonWriter10insertCharEc>
	...

000d4d58 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d4d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4d5a:	4604      	mov	r4, r0
   d4d5c:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d4d60:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d4d62:	2d00      	cmp	r5, #0
   d4d64:	db0a      	blt.n	d4d7c <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d4d66:	f001 fdab 	bl	d68c0 <__aeabi_f2d>
   d4d6a:	462a      	mov	r2, r5
   d4d6c:	e9cd 0100 	strd	r0, r1, [sp]
   d4d70:	4908      	ldr	r1, [pc, #32]	; (d4d94 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d4d72:	4620      	mov	r0, r4
   d4d74:	f7ff ff4a 	bl	d4c0c <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d4d78:	b003      	add	sp, #12
   d4d7a:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4d7c:	f001 fda0 	bl	d68c0 <__aeabi_f2d>
   d4d80:	460b      	mov	r3, r1
   d4d82:	4905      	ldr	r1, [pc, #20]	; (d4d98 <_ZN10JsonWriter11insertValueEf+0x40>)
   d4d84:	4602      	mov	r2, r0
   d4d86:	4620      	mov	r0, r4
	}
}
   d4d88:	b003      	add	sp, #12
   d4d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4d8e:	f7ff bf3d 	b.w	d4c0c <_ZN10JsonWriter13insertsprintfEPKcz>
   d4d92:	bf00      	nop
   d4d94:	000d8d2a 	.word	0x000d8d2a
   d4d98:	000d8d2f 	.word	0x000d8d2f

000d4d9c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d4d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d4da0:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4da2:	f04f 35ff 	mov.w	r5, #4294967295
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d4da6:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d4daa:	f8d0 c000 	ldr.w	ip, [r0]
   d4dae:	4594      	cmp	ip, r2
   d4db0:	f080 819e 	bcs.w	d50f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
   d4db4:	f811 800c 	ldrb.w	r8, [r1, ip]
   d4db8:	f1b8 0f00 	cmp.w	r8, #0
   d4dbc:	f000 8198 	beq.w	d50f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d4dc0:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d4dc4:	f000 8116 	beq.w	d4ff4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
   d4dc8:	d818      	bhi.n	d4dfc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
   d4dca:	f1b8 0f0d 	cmp.w	r8, #13
   d4dce:	f000 818b 	beq.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4dd2:	d806      	bhi.n	d4de2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
   d4dd4:	f1a8 0809 	sub.w	r8, r8, #9
   d4dd8:	f1b8 0f01 	cmp.w	r8, #1
   d4ddc:	f240 8184 	bls.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4de0:	e13d      	b.n	d505e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d4de2:	f1b8 0f20 	cmp.w	r8, #32
   d4de6:	f000 817f 	beq.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4dea:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d4dee:	f040 8136 	bne.w	d505e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
   d4df2:	f10c 0901 	add.w	r9, ip, #1
   d4df6:	f8c0 9000 	str.w	r9, [r0]
   d4dfa:	e092      	b.n	d4f22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d4dfc:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d4e00:	d03c      	beq.n	d4e7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d4e02:	d807      	bhi.n	d4e14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
   d4e04:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d4e08:	f000 80f0 	beq.w	d4fec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
   d4e0c:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d4e10:	d007      	beq.n	d4e22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d4e12:	e124      	b.n	d505e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d4e14:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d4e18:	d003      	beq.n	d4e22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d4e1a:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d4e1e:	d02d      	beq.n	d4e7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d4e20:	e11d      	b.n	d505e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
   d4e22:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d4e24:	2b00      	cmp	r3, #0
   d4e26:	f000 815f 	beq.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d4e2a:	6847      	ldr	r7, [r0, #4]
   d4e2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d4e2e:	42be      	cmp	r6, r7
   d4e30:	f240 817d 	bls.w	d512e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x392>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d4e34:	f107 0c01 	add.w	ip, r7, #1
   d4e38:	f8c0 c004 	str.w	ip, [r0, #4]
   d4e3c:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   d4e40:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
   d4e44:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4e46:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
   d4e4a:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4e4e:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
   d4e52:	6887      	ldr	r7, [r0, #8]
   d4e54:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d4e56:	bf1f      	itttt	ne
   d4e58:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d4e5c:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d4e60:	3701      	addne	r7, #1
   d4e62:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d4e66:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d4e6a:	bf14      	ite	ne
   d4e6c:	2702      	movne	r7, #2
   d4e6e:	2701      	moveq	r7, #1
   d4e70:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
   d4e74:	6807      	ldr	r7, [r0, #0]
   d4e76:	f8ca 7004 	str.w	r7, [sl, #4]
   d4e7a:	e0b7      	b.n	d4fec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d4e7c:	2b00      	cmp	r3, #0
   d4e7e:	f000 8133 	beq.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d4e82:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d4e84:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d4e88:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
   d4e8c:	f108 38ff 	add.w	r8, r8, #4294967295
   d4e90:	bf14      	ite	ne
   d4e92:	f04f 0a02 	movne.w	sl, #2
   d4e96:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d4e9a:	f107 39ff 	add.w	r9, r7, #4294967295
   d4e9e:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   d4ea2:	f1b9 0f00 	cmp.w	r9, #0
   d4ea6:	db19      	blt.n	d4edc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d4ea8:	f8d8 7004 	ldr.w	r7, [r8, #4]
   d4eac:	3701      	adds	r7, #1
   d4eae:	d010      	beq.n	d4ed2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
   d4eb0:	f8d8 7008 	ldr.w	r7, [r8, #8]
   d4eb4:	1c7e      	adds	r6, r7, #1
   d4eb6:	d10c      	bne.n	d4ed2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
   d4eb8:	f898 b000 	ldrb.w	fp, [r8]
   d4ebc:	45d3      	cmp	fp, sl
   d4ebe:	f040 8129 	bne.w	d5114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d4ec2:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d4ec4:	f10c 0701 	add.w	r7, ip, #1
   d4ec8:	f8c8 7008 	str.w	r7, [r8, #8]
   d4ecc:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
   d4ed0:	e011      	b.n	d4ef6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d4ed2:	f109 39ff 	add.w	r9, r9, #4294967295
   d4ed6:	f1a8 0810 	sub.w	r8, r8, #16
   d4eda:	e7e2      	b.n	d4ea2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d4edc:	f1b9 3fff 	cmp.w	r9, #4294967295
   d4ee0:	f040 8102 	bne.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4ee4:	e116      	b.n	d5114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
				for (; i >= 0; i--) {
   d4ee6:	f109 39ff 	add.w	r9, r9, #4294967295
   d4eea:	f1b9 3fff 	cmp.w	r9, #4294967295
   d4eee:	f1ac 0c10 	sub.w	ip, ip, #16
   d4ef2:	f000 80f9 	beq.w	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d4ef6:	f8dc 7004 	ldr.w	r7, [ip, #4]
   d4efa:	3701      	adds	r7, #1
   d4efc:	d0f3      	beq.n	d4ee6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
   d4efe:	f8dc 7008 	ldr.w	r7, [ip, #8]
   d4f02:	3701      	adds	r7, #1
   d4f04:	d1ef      	bne.n	d4ee6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
   d4f06:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
   d4f0a:	e0ed      	b.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d4f0c:	f811 7008 	ldrb.w	r7, [r1, r8]
   d4f10:	2f00      	cmp	r7, #0
   d4f12:	d068      	beq.n	d4fe6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
   d4f14:	2f22      	cmp	r7, #34	; 0x22
   d4f16:	d009      	beq.n	d4f2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d4f18:	2f5c      	cmp	r7, #92	; 0x5c
   d4f1a:	d026      	beq.n	d4f6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d4f1c:	6807      	ldr	r7, [r0, #0]
   d4f1e:	3701      	adds	r7, #1
   d4f20:	6007      	str	r7, [r0, #0]
   d4f22:	f8d0 8000 	ldr.w	r8, [r0]
   d4f26:	4542      	cmp	r2, r8
   d4f28:	d8f0      	bhi.n	d4f0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
   d4f2a:	e05c      	b.n	d4fe6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
   d4f2c:	2b00      	cmp	r3, #0
   d4f2e:	f000 80ce 	beq.w	d50ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d4f32:	6847      	ldr	r7, [r0, #4]
   d4f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d4f36:	42be      	cmp	r6, r7
   d4f38:	f240 80f7 	bls.w	d512a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d4f3c:	f107 0c01 	add.w	ip, r7, #1
   d4f40:	013f      	lsls	r7, r7, #4
   d4f42:	f8c0 c004 	str.w	ip, [r0, #4]
   d4f46:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d4f4a:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4f4c:	f8cc 5008 	str.w	r5, [ip, #8]
   d4f50:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
   d4f54:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d4f58:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d4f5c:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
   d4f60:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
   d4f64:	f8cc 8008 	str.w	r8, [ip, #8]
   d4f68:	e0b1      	b.n	d50ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d4f6a:	f108 0701 	add.w	r7, r8, #1
   d4f6e:	42ba      	cmp	r2, r7
   d4f70:	d9d4      	bls.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
   d4f72:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d4f74:	5dcf      	ldrb	r7, [r1, r7]
   d4f76:	2f66      	cmp	r7, #102	; 0x66
   d4f78:	d0d0      	beq.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d4f7a:	d808      	bhi.n	d4f8e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
   d4f7c:	2f2f      	cmp	r7, #47	; 0x2f
   d4f7e:	d0cd      	beq.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d4f80:	d801      	bhi.n	d4f86 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
   d4f82:	2f22      	cmp	r7, #34	; 0x22
   d4f84:	e007      	b.n	d4f96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d4f86:	2f5c      	cmp	r7, #92	; 0x5c
   d4f88:	d0c8      	beq.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d4f8a:	2f62      	cmp	r7, #98	; 0x62
   d4f8c:	e003      	b.n	d4f96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d4f8e:	2f72      	cmp	r7, #114	; 0x72
   d4f90:	d0c4      	beq.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d4f92:	d802      	bhi.n	d4f9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
   d4f94:	2f6e      	cmp	r7, #110	; 0x6e
   d4f96:	d175      	bne.n	d5084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
   d4f98:	e7c0      	b.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d4f9a:	2f74      	cmp	r7, #116	; 0x74
   d4f9c:	d0be      	beq.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d4f9e:	2f75      	cmp	r7, #117	; 0x75
   d4fa0:	d170      	bne.n	d5084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
   d4fa2:	f108 0702 	add.w	r7, r8, #2
   d4fa6:	6007      	str	r7, [r0, #0]
   d4fa8:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d4fac:	f8d0 8000 	ldr.w	r8, [r0]
   d4fb0:	4542      	cmp	r2, r8
   d4fb2:	d803      	bhi.n	d4fbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
   d4fb4:	6807      	ldr	r7, [r0, #0]
   d4fb6:	3f01      	subs	r7, #1
   d4fb8:	6007      	str	r7, [r0, #0]
   d4fba:	e7af      	b.n	d4f1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d4fbc:	f811 7008 	ldrb.w	r7, [r1, r8]
   d4fc0:	2f00      	cmp	r7, #0
   d4fc2:	d0f7      	beq.n	d4fb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d4fc4:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d4fc8:	f1bb 0f09 	cmp.w	fp, #9
   d4fcc:	d904      	bls.n	d4fd8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
   d4fce:	f027 0720 	bic.w	r7, r7, #32
   d4fd2:	3f41      	subs	r7, #65	; 0x41
   d4fd4:	2f05      	cmp	r7, #5
   d4fd6:	d855      	bhi.n	d5084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d4fd8:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d4fdc:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d4fe0:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d4fe2:	d1e3      	bne.n	d4fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
   d4fe4:	e7e6      	b.n	d4fb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
   d4fe6:	f8c0 c000 	str.w	ip, [r0]
   d4fea:	e09a      	b.n	d5122 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   d4fec:	6847      	ldr	r7, [r0, #4]
   d4fee:	3f01      	subs	r7, #1
   d4ff0:	6087      	str	r7, [r0, #8]
				break;
   d4ff2:	e079      	b.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
   d4ff4:	2b00      	cmp	r3, #0
   d4ff6:	d077      	beq.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4ff8:	6887      	ldr	r7, [r0, #8]
   d4ffa:	1c7e      	adds	r6, r7, #1
   d4ffc:	d074      	beq.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d4ffe:	013f      	lsls	r7, r7, #4
   d5000:	5ddf      	ldrb	r7, [r3, r7]
   d5002:	3f01      	subs	r7, #1
   d5004:	2f01      	cmp	r7, #1
   d5006:	d96f      	bls.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5008:	6847      	ldr	r7, [r0, #4]
   d500a:	f107 38ff 	add.w	r8, r7, #4294967295
   d500e:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d5012:	f1b8 0f00 	cmp.w	r8, #0
   d5016:	db67      	blt.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d5018:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
   d501c:	3f01      	subs	r7, #1
   d501e:	2f01      	cmp	r7, #1
   d5020:	d80a      	bhi.n	d5038 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d5022:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   d5026:	3701      	adds	r7, #1
   d5028:	d006      	beq.n	d5038 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
   d502a:	f85c 7c08 	ldr.w	r7, [ip, #-8]
   d502e:	3701      	adds	r7, #1
   d5030:	d102      	bne.n	d5038 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
   d5032:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d5036:	e057      	b.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5038:	f108 38ff 	add.w	r8, r8, #4294967295
   d503c:	f1ac 0c10 	sub.w	ip, ip, #16
   d5040:	e7e7      	b.n	d5012 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5042:	f811 7008 	ldrb.w	r7, [r1, r8]
   d5046:	b307      	cbz	r7, d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d5048:	2f20      	cmp	r7, #32
   d504a:	d01e      	beq.n	d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d504c:	d810      	bhi.n	d5070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
   d504e:	2f09      	cmp	r7, #9
   d5050:	d20a      	bcs.n	d5068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d5052:	3f20      	subs	r7, #32
   d5054:	2f5e      	cmp	r7, #94	; 0x5e
   d5056:	d815      	bhi.n	d5084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5058:	f108 0701 	add.w	r7, r8, #1
   d505c:	6007      	str	r7, [r0, #0]
   d505e:	f8d0 8000 	ldr.w	r8, [r0]
   d5062:	4542      	cmp	r2, r8
   d5064:	d8ed      	bhi.n	d5042 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
   d5066:	e010      	b.n	d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d5068:	2f0a      	cmp	r7, #10
   d506a:	d90e      	bls.n	d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d506c:	2f0d      	cmp	r7, #13
   d506e:	e007      	b.n	d5080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d5070:	2f3a      	cmp	r7, #58	; 0x3a
   d5072:	d00a      	beq.n	d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5074:	d801      	bhi.n	d507a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
   d5076:	2f2c      	cmp	r7, #44	; 0x2c
   d5078:	e002      	b.n	d5080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d507a:	2f5d      	cmp	r7, #93	; 0x5d
   d507c:	d005      	beq.n	d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d507e:	2f7d      	cmp	r7, #125	; 0x7d
   d5080:	d1e7      	bne.n	d5052 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
   d5082:	e002      	b.n	d508a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
   d5084:	f8c0 c000 	str.w	ip, [r0]
   d5088:	e044      	b.n	d5114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
   d508a:	b913      	cbnz	r3, d5092 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
   d508c:	f108 37ff 	add.w	r7, r8, #4294967295
   d5090:	e01c      	b.n	d50cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d5092:	6847      	ldr	r7, [r0, #4]
   d5094:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5096:	42be      	cmp	r6, r7
   d5098:	d947      	bls.n	d512a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d509a:	f107 0801 	add.w	r8, r7, #1
   d509e:	013f      	lsls	r7, r7, #4
   d50a0:	f8c0 8004 	str.w	r8, [r0, #4]
   d50a4:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d50a8:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d50aa:	f8c8 5008 	str.w	r5, [r8, #8]
   d50ae:	f8c8 5004 	str.w	r5, [r8, #4]
	tok->size = 0;
   d50b2:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d50b6:	f04f 0604 	mov.w	r6, #4
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d50ba:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d50be:	55de      	strb	r6, [r3, r7]
	token->start = start;
   d50c0:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
   d50c4:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
   d50c8:	6807      	ldr	r7, [r0, #0]
   d50ca:	3f01      	subs	r7, #1
   d50cc:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
   d50ce:	6887      	ldr	r7, [r0, #8]
   d50d0:	1c7e      	adds	r6, r7, #1
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
   d50d2:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d50d6:	d007      	beq.n	d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d50d8:	b133      	cbz	r3, d50e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					tokens[parser->toksuper].size++;
   d50da:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d50de:	f8dc 700c 	ldr.w	r7, [ip, #12]
   d50e2:	3701      	adds	r7, #1
   d50e4:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d50e8:	6807      	ldr	r7, [r0, #0]
   d50ea:	3701      	adds	r7, #1
   d50ec:	6007      	str	r7, [r0, #0]
   d50ee:	e65c      	b.n	d4daa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
   d50f0:	b1a3      	cbz	r3, d511c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d50f2:	6842      	ldr	r2, [r0, #4]
   d50f4:	1e51      	subs	r1, r2, #1
   d50f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d50fa:	2900      	cmp	r1, #0
   d50fc:	db0e      	blt.n	d511c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d50fe:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d5102:	3201      	adds	r2, #1
   d5104:	d003      	beq.n	d510e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x372>
   d5106:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d510a:	3201      	adds	r2, #1
   d510c:	d009      	beq.n	d5122 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
   d510e:	3901      	subs	r1, #1
   d5110:	3b10      	subs	r3, #16
   d5112:	e7f2      	b.n	d50fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
   d5114:	f06f 0001 	mvn.w	r0, #1
   d5118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d511c:	4620      	mov	r0, r4
   d511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
   d5122:	f06f 0002 	mvn.w	r0, #2
   d5126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
   d512a:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
   d512e:	f04f 30ff 	mov.w	r0, #4294967295
   d5132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5136 <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d5136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
   d5138:	6943      	ldr	r3, [r0, #20]
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d513a:	4604      	mov	r4, r0
   d513c:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   d5140:	b1f3      	cbz	r3, d5180 <_ZN10JsonParser5parseEv+0x4a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5142:	2200      	movs	r2, #0
   d5144:	6202      	str	r2, [r0, #32]
	parser->toknext = 0;
   d5146:	6242      	str	r2, [r0, #36]	; 0x24
	parser->toksuper = -1;
   d5148:	f04f 32ff 	mov.w	r2, #4294967295
   d514c:	6282      	str	r2, [r0, #40]	; 0x28

bool JsonParser::parse() {
	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d514e:	69c2      	ldr	r2, [r0, #28]
   d5150:	9200      	str	r2, [sp, #0]
   d5152:	68c2      	ldr	r2, [r0, #12]
   d5154:	6841      	ldr	r1, [r0, #4]
   d5156:	4630      	mov	r0, r6
   d5158:	f7ff fe20 	bl	d4d9c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d515c:	1c43      	adds	r3, r0, #1
   d515e:	d109      	bne.n	d5174 <_ZN10JsonParser5parseEv+0x3e>
			if (staticBuffers) {
   d5160:	7c25      	ldrb	r5, [r4, #16]
   d5162:	b10d      	cbz	r5, d5168 <_ZN10JsonParser5parseEv+0x32>
				// If using static buffers and there is not enough space, fail
				return false;
   d5164:	2000      	movs	r0, #0
   d5166:	e033      	b.n	d51d0 <_ZN10JsonParser5parseEv+0x9a>
			}
			free(tokens);
   d5168:	6960      	ldr	r0, [r4, #20]
   d516a:	f000 fa03 	bl	d5574 <free>
			tokens = 0;
   d516e:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d5170:	61e5      	str	r5, [r4, #28]
   d5172:	e005      	b.n	d5180 <_ZN10JsonParser5parseEv+0x4a>
		}
		else
		if (result < 0) {
   d5174:	2800      	cmp	r0, #0
   d5176:	dbf5      	blt.n	d5164 <_ZN10JsonParser5parseEv+0x2e>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
   d5178:	6963      	ldr	r3, [r4, #20]
   d517a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   d517e:	e025      	b.n	d51cc <_ZN10JsonParser5parseEv+0x96>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5180:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
   d5182:	f04f 37ff 	mov.w	r7, #4294967295
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5186:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d5188:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d518a:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d518c:	9500      	str	r5, [sp, #0]
   d518e:	462b      	mov	r3, r5
   d5190:	68e2      	ldr	r2, [r4, #12]
   d5192:	6861      	ldr	r1, [r4, #4]
   d5194:	4630      	mov	r0, r6
   d5196:	f7ff fe01 	bl	d4d9c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d519a:	2800      	cmp	r0, #0
   d519c:	dbe2      	blt.n	d5164 <_ZN10JsonParser5parseEv+0x2e>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
   d519e:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d51a0:	d013      	beq.n	d51ca <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d51a2:	0100      	lsls	r0, r0, #4
   d51a4:	f000 f9de 	bl	d5564 <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d51a8:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d51aa:	6160      	str	r0, [r4, #20]
   d51ac:	4603      	mov	r3, r0

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d51ae:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d51b0:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d51b2:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d51b4:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d51b6:	68e2      	ldr	r2, [r4, #12]
   d51b8:	6861      	ldr	r1, [r4, #4]
   d51ba:	4630      	mov	r0, r6
   d51bc:	f7ff fdee 	bl	d4d9c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
   d51c0:	6963      	ldr	r3, [r4, #20]
   d51c2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d51c6:	61a0      	str	r0, [r4, #24]
   d51c8:	e001      	b.n	d51ce <_ZN10JsonParser5parseEv+0x98>
	}
	else {
		tokensEnd = tokens;
   d51ca:	6963      	ldr	r3, [r4, #20]
   d51cc:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
   d51ce:	2001      	movs	r0, #1
}
   d51d0:	b003      	add	sp, #12
   d51d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51d4 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d51d4:	f000 b812 	b.w	d51fc <HAL_Pin_Map>

000d51d8 <_GLOBAL__sub_I__ZN8HX711ADCC2Ehhh>:
   d51d8:	f000 b810 	b.w	d51fc <HAL_Pin_Map>

000d51dc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <netdb_freeaddrinfo+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	689b      	ldr	r3, [r3, #8]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030268 	.word	0x00030268

000d51ec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <netdb_getaddrinfo+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	68db      	ldr	r3, [r3, #12]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030268 	.word	0x00030268

000d51fc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <HAL_Pin_Map+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	681b      	ldr	r3, [r3, #0]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003022c 	.word	0x0003022c

000d520c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_Validate_Pin_Function+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	685b      	ldr	r3, [r3, #4]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003022c 	.word	0x0003022c

000d521c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_ADC_Read+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003022c 	.word	0x0003022c

000d522c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_SPI_Init+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	69db      	ldr	r3, [r3, #28]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030230 	.word	0x00030230

000d523c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_SPI_Is_Enabled+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6a1b      	ldr	r3, [r3, #32]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030230 	.word	0x00030230

000d524c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <HAL_RNG_GetRandomNumber+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	685b      	ldr	r3, [r3, #4]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030218 	.word	0x00030218

000d525c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	695b      	ldr	r3, [r3, #20]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030218 	.word	0x00030218

000d526c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <hal_timer_millis+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030218 	.word	0x00030218

000d527c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <os_thread_is_current+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	689b      	ldr	r3, [r3, #8]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030248 	.word	0x00030248

000d528c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <os_thread_join+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	691b      	ldr	r3, [r3, #16]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030248 	.word	0x00030248

000d529c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <os_thread_cleanup+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	695b      	ldr	r3, [r3, #20]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030248 	.word	0x00030248

000d52ac <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <os_mutex_create+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030248 	.word	0x00030248

000d52bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <os_mutex_recursive_create+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030248 	.word	0x00030248

000d52cc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <inet_inet_ntop+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	695b      	ldr	r3, [r3, #20]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030264 	.word	0x00030264

000d52dc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_USART_Init+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	681b      	ldr	r3, [r3, #0]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	0003023c 	.word	0x0003023c

000d52ec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_USART_Write_Data+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	68db      	ldr	r3, [r3, #12]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003023c 	.word	0x0003023c

000d52fc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_USART_Available_Data+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	691b      	ldr	r3, [r3, #16]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	0003023c 	.word	0x0003023c

000d530c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_USART_Read_Data+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	695b      	ldr	r3, [r3, #20]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	0003023c 	.word	0x0003023c

000d531c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_USART_Peek_Data+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	699b      	ldr	r3, [r3, #24]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	0003023c 	.word	0x0003023c

000d532c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_USART_Flush_Data+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	69db      	ldr	r3, [r3, #28]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	0003023c 	.word	0x0003023c

000d533c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_USART_Is_Enabled+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6a1b      	ldr	r3, [r3, #32]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003023c 	.word	0x0003023c

000d534c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_USART_Available_Data_For_Write+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003023c 	.word	0x0003023c

000d535c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_I2C_Write_Data+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6a1b      	ldr	r3, [r3, #32]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030228 	.word	0x00030228

000d536c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_I2C_Available_Data+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030228 	.word	0x00030228

000d537c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_I2C_Read_Data+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030228 	.word	0x00030228

000d538c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_I2C_Peek_Data+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030228 	.word	0x00030228

000d539c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <HAL_I2C_Flush_Data+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030228 	.word	0x00030228

000d53ac <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <HAL_I2C_Is_Enabled+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030228 	.word	0x00030228

000d53bc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <HAL_I2C_Init+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030228 	.word	0x00030228

000d53cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <HAL_USB_USART_Init+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	681b      	ldr	r3, [r3, #0]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	0003024c 	.word	0x0003024c

000d53dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <HAL_USB_USART_Begin+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	685b      	ldr	r3, [r3, #4]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	0003024c 	.word	0x0003024c

000d53ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <HAL_USB_USART_Available_Data+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	691b      	ldr	r3, [r3, #16]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003024c 	.word	0x0003024c

000d53fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	695b      	ldr	r3, [r3, #20]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	0003024c 	.word	0x0003024c

000d540c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <HAL_USB_USART_Receive_Data+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	699b      	ldr	r3, [r3, #24]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	0003024c 	.word	0x0003024c

000d541c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <HAL_USB_USART_Send_Data+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	69db      	ldr	r3, [r3, #28]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	0003024c 	.word	0x0003024c

000d542c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <HAL_USB_USART_Flush_Data+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6a1b      	ldr	r3, [r3, #32]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	0003024c 	.word	0x0003024c

000d543c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_USB_USART_Is_Connected+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	0003024c 	.word	0x0003024c

000d544c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <set_system_mode+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	685b      	ldr	r3, [r3, #4]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030220 	.word	0x00030220

000d545c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <system_thread_set_state+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030220 	.word	0x00030220

000d546c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b03      	ldr	r3, [pc, #12]	; (d547c <system_ctrl_set_app_request_handler+0x10>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5476:	9301      	str	r3, [sp, #4]
   d5478:	bd08      	pop	{r3, pc}
   d547a:	0000      	.short	0x0000
   d547c:	00030220 	.word	0x00030220

000d5480 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b03      	ldr	r3, [pc, #12]	; (d5490 <system_ctrl_set_result+0x10>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d548a:	9301      	str	r3, [sp, #4]
   d548c:	bd08      	pop	{r3, pc}
   d548e:	0000      	.short	0x0000
   d5490:	00030220 	.word	0x00030220

000d5494 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <network_connect+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	685b      	ldr	r3, [r3, #4]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030240 	.word	0x00030240

000d54a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <network_connecting+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	689b      	ldr	r3, [r3, #8]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030240 	.word	0x00030240

000d54b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <network_disconnect+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	68db      	ldr	r3, [r3, #12]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030240 	.word	0x00030240

000d54c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <network_ready+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	691b      	ldr	r3, [r3, #16]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030240 	.word	0x00030240

000d54d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <network_on+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	695b      	ldr	r3, [r3, #20]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030240 	.word	0x00030240

000d54e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <network_off+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	699b      	ldr	r3, [r3, #24]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030240 	.word	0x00030240

000d54f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <network_listen+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	69db      	ldr	r3, [r3, #28]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030240 	.word	0x00030240

000d5504 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <network_listening+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6a1b      	ldr	r3, [r3, #32]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030240 	.word	0x00030240

000d5514 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <network_set_listen_timeout+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030240 	.word	0x00030240

000d5524 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <network_get_listen_timeout+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030240 	.word	0x00030240

000d5534 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <spark_process+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	689b      	ldr	r3, [r3, #8]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030244 	.word	0x00030244

000d5544 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <spark_deviceID+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	69db      	ldr	r3, [r3, #28]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030244 	.word	0x00030244

000d5554 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030244 	.word	0x00030244

000d5564 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <malloc+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	681b      	ldr	r3, [r3, #0]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	0003021c 	.word	0x0003021c

000d5574 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <free+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	685b      	ldr	r3, [r3, #4]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	0003021c 	.word	0x0003021c

000d5584 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <realloc+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	689b      	ldr	r3, [r3, #8]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003021c 	.word	0x0003021c

000d5594 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <sscanf+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	695b      	ldr	r3, [r3, #20]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003021c 	.word	0x0003021c

000d55a4 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <vsnprintf+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	0003021c 	.word	0x0003021c

000d55b4 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <_malloc_r+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	0003021c 	.word	0x0003021c

000d55c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55c4:	2200      	movs	r2, #0
   d55c6:	4611      	mov	r1, r2
   d55c8:	6840      	ldr	r0, [r0, #4]
   d55ca:	f7ff bf9b 	b.w	d5504 <network_listening>

000d55ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55ce:	2200      	movs	r2, #0
   d55d0:	4611      	mov	r1, r2
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	f7ff bfa6 	b.w	d5524 <network_get_listen_timeout>

000d55d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55d8:	2200      	movs	r2, #0
   d55da:	6840      	ldr	r0, [r0, #4]
   d55dc:	f7ff bf9a 	b.w	d5514 <network_set_listen_timeout>

000d55e0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55e0:	2200      	movs	r2, #0
   d55e2:	f081 0101 	eor.w	r1, r1, #1
   d55e6:	6840      	ldr	r0, [r0, #4]
   d55e8:	f7ff bf84 	b.w	d54f4 <network_listen>

000d55ec <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55ec:	2300      	movs	r3, #0
   d55ee:	461a      	mov	r2, r3
   d55f0:	4619      	mov	r1, r3
   d55f2:	6840      	ldr	r0, [r0, #4]
   d55f4:	f7ff bf76 	b.w	d54e4 <network_off>

000d55f8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55f8:	2300      	movs	r3, #0
   d55fa:	461a      	mov	r2, r3
   d55fc:	4619      	mov	r1, r3
   d55fe:	6840      	ldr	r0, [r0, #4]
   d5600:	f7ff bf68 	b.w	d54d4 <network_on>

000d5604 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5604:	2200      	movs	r2, #0
   d5606:	4611      	mov	r1, r2
   d5608:	6840      	ldr	r0, [r0, #4]
   d560a:	f7ff bf5b 	b.w	d54c4 <network_ready>

000d560e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d560e:	2200      	movs	r2, #0
   d5610:	4611      	mov	r1, r2
   d5612:	6840      	ldr	r0, [r0, #4]
   d5614:	f7ff bf46 	b.w	d54a4 <network_connecting>

000d5618 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5618:	2200      	movs	r2, #0
   d561a:	2102      	movs	r1, #2
   d561c:	6840      	ldr	r0, [r0, #4]
   d561e:	f7ff bf49 	b.w	d54b4 <network_disconnect>

000d5622 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5622:	2300      	movs	r3, #0
   d5624:	461a      	mov	r2, r3
   d5626:	6840      	ldr	r0, [r0, #4]
   d5628:	f7ff bf34 	b.w	d5494 <network_connect>

000d562c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d562c:	4b02      	ldr	r3, [pc, #8]	; (d5638 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d562e:	2203      	movs	r2, #3
   d5630:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5632:	4a02      	ldr	r2, [pc, #8]	; (d563c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5634:	601a      	str	r2, [r3, #0]
   d5636:	4770      	bx	lr
   d5638:	2003e3dc 	.word	0x2003e3dc
   d563c:	000d8d54 	.word	0x000d8d54

000d5640 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5640:	4770      	bx	lr

000d5642 <_ZN8SPIClassD0Ev>:
   d5642:	b510      	push	{r4, lr}
   d5644:	4604      	mov	r4, r0
   d5646:	f7fe fd26 	bl	d4096 <_ZdlPv>
   d564a:	4620      	mov	r0, r4
   d564c:	bd10      	pop	{r4, pc}
	...

000d5650 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5650:	b570      	push	{r4, r5, r6, lr}
   d5652:	4b08      	ldr	r3, [pc, #32]	; (d5674 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5654:	6003      	str	r3, [r0, #0]
   d5656:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5658:	2500      	movs	r5, #0
   d565a:	460e      	mov	r6, r1
   d565c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5660:	f7ff fe24 	bl	d52ac <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5664:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5666:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5668:	f7ff fde0 	bl	d522c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d566c:	60a5      	str	r5, [r4, #8]
}
   d566e:	4620      	mov	r0, r4
   d5670:	bd70      	pop	{r4, r5, r6, pc}
   d5672:	bf00      	nop
   d5674:	000d8d88 	.word	0x000d8d88

000d5678 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5678:	7900      	ldrb	r0, [r0, #4]
   d567a:	f7ff bddf 	b.w	d523c <HAL_SPI_Is_Enabled>
	...

000d5680 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5680:	4b04      	ldr	r3, [pc, #16]	; (d5694 <_GLOBAL__sub_I_System+0x14>)
   d5682:	2000      	movs	r0, #0
   d5684:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5688:	7018      	strb	r0, [r3, #0]
   d568a:	8058      	strh	r0, [r3, #2]
   d568c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d568e:	f7ff bedd 	b.w	d544c <set_system_mode>
   d5692:	bf00      	nop
   d5694:	2003e3e4 	.word	0x2003e3e4

000d5698 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5698:	b510      	push	{r4, lr}
   d569a:	4604      	mov	r4, r0
{
	free(buffer);
   d569c:	6800      	ldr	r0, [r0, #0]
   d569e:	f7ff ff69 	bl	d5574 <free>
}
   d56a2:	4620      	mov	r0, r4
   d56a4:	bd10      	pop	{r4, pc}

000d56a6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d56a6:	b510      	push	{r4, lr}
   d56a8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d56aa:	6800      	ldr	r0, [r0, #0]
   d56ac:	b108      	cbz	r0, d56b2 <_ZN6String10invalidateEv+0xc>
   d56ae:	f7ff ff61 	bl	d5574 <free>
	buffer = NULL;
   d56b2:	2300      	movs	r3, #0
   d56b4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d56b6:	60a3      	str	r3, [r4, #8]
   d56b8:	6063      	str	r3, [r4, #4]
   d56ba:	bd10      	pop	{r4, pc}

000d56bc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d56bc:	b538      	push	{r3, r4, r5, lr}
   d56be:	4604      	mov	r4, r0
   d56c0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d56c2:	6800      	ldr	r0, [r0, #0]
   d56c4:	3101      	adds	r1, #1
   d56c6:	f7ff ff5d 	bl	d5584 <realloc>
	if (newbuffer) {
   d56ca:	b110      	cbz	r0, d56d2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d56cc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d56d0:	2001      	movs	r0, #1
	}
	return 0;
}
   d56d2:	bd38      	pop	{r3, r4, r5, pc}

000d56d4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d56d4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d56d6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d56d8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d56da:	b113      	cbz	r3, d56e2 <_ZN6String7reserveEj+0xe>
   d56dc:	6843      	ldr	r3, [r0, #4]
   d56de:	428b      	cmp	r3, r1
   d56e0:	d207      	bcs.n	d56f2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d56e2:	4620      	mov	r0, r4
   d56e4:	f7ff ffea 	bl	d56bc <_ZN6String12changeBufferEj>
   d56e8:	b120      	cbz	r0, d56f4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d56ea:	68a3      	ldr	r3, [r4, #8]
   d56ec:	b90b      	cbnz	r3, d56f2 <_ZN6String7reserveEj+0x1e>
   d56ee:	6822      	ldr	r2, [r4, #0]
   d56f0:	7013      	strb	r3, [r2, #0]
   d56f2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d56f4:	bd10      	pop	{r4, pc}

000d56f6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d56f6:	b570      	push	{r4, r5, r6, lr}
   d56f8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d56fa:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d56fc:	4604      	mov	r4, r0
   d56fe:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5700:	f7ff ffe8 	bl	d56d4 <_ZN6String7reserveEj>
   d5704:	b918      	cbnz	r0, d570e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5706:	4620      	mov	r0, r4
   d5708:	f7ff ffcd 	bl	d56a6 <_ZN6String10invalidateEv>
		return *this;
   d570c:	e009      	b.n	d5722 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d570e:	462a      	mov	r2, r5
   d5710:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5712:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5714:	6820      	ldr	r0, [r4, #0]
   d5716:	f001 fc81 	bl	d701c <memcpy>
	buffer[len] = 0;
   d571a:	6822      	ldr	r2, [r4, #0]
   d571c:	68a3      	ldr	r3, [r4, #8]
   d571e:	2100      	movs	r1, #0
   d5720:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5722:	4620      	mov	r0, r4
   d5724:	bd70      	pop	{r4, r5, r6, pc}

000d5726 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5726:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5728:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d572a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d572c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d572e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5730:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5732:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5734:	460d      	mov	r5, r1
   d5736:	b139      	cbz	r1, d5748 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5738:	4608      	mov	r0, r1
   d573a:	f001 fcbd 	bl	d70b8 <strlen>
   d573e:	4629      	mov	r1, r5
   d5740:	4602      	mov	r2, r0
   d5742:	4620      	mov	r0, r4
   d5744:	f7ff ffd7 	bl	d56f6 <_ZN6String4copyEPKcj>
}
   d5748:	4620      	mov	r0, r4
   d574a:	bd38      	pop	{r3, r4, r5, pc}

000d574c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d574c:	b538      	push	{r3, r4, r5, lr}
   d574e:	4605      	mov	r5, r0
	if (buffer) {
   d5750:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5752:	460c      	mov	r4, r1
	if (buffer) {
   d5754:	b160      	cbz	r0, d5770 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5756:	686a      	ldr	r2, [r5, #4]
   d5758:	688b      	ldr	r3, [r1, #8]
   d575a:	429a      	cmp	r2, r3
   d575c:	d306      	bcc.n	d576c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d575e:	6809      	ldr	r1, [r1, #0]
   d5760:	f001 fca2 	bl	d70a8 <strcpy>
			len = rhs.len;
   d5764:	68a3      	ldr	r3, [r4, #8]
   d5766:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5768:	2300      	movs	r3, #0
   d576a:	e00a      	b.n	d5782 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d576c:	f7ff ff02 	bl	d5574 <free>
		}
	}
	buffer = rhs.buffer;
   d5770:	6823      	ldr	r3, [r4, #0]
   d5772:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5774:	6863      	ldr	r3, [r4, #4]
   d5776:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5778:	68a3      	ldr	r3, [r4, #8]
   d577a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d577c:	2300      	movs	r3, #0
   d577e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5780:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5782:	60a3      	str	r3, [r4, #8]
   d5784:	bd38      	pop	{r3, r4, r5, pc}

000d5786 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5786:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5788:	b510      	push	{r4, lr}
   d578a:	460b      	mov	r3, r1
   d578c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d578e:	d007      	beq.n	d57a0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5790:	6809      	ldr	r1, [r1, #0]
   d5792:	b119      	cbz	r1, d579c <_ZN6StringaSERKS_+0x16>
   d5794:	689a      	ldr	r2, [r3, #8]
   d5796:	f7ff ffae 	bl	d56f6 <_ZN6String4copyEPKcj>
   d579a:	e001      	b.n	d57a0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d579c:	f7ff ff83 	bl	d56a6 <_ZN6String10invalidateEv>

	return *this;
}
   d57a0:	4620      	mov	r0, r4
   d57a2:	bd10      	pop	{r4, pc}

000d57a4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d57a4:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57a6:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d57a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57aa:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d57ac:	6043      	str	r3, [r0, #4]
	len = 0;
   d57ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   d57b0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d57b2:	f7ff ffe8 	bl	d5786 <_ZN6StringaSERKS_>
}
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d57ba:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d57bc:	b510      	push	{r4, lr}
   d57be:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d57c0:	d001      	beq.n	d57c6 <_ZN6StringaSEOS_+0xc>
   d57c2:	f7ff ffc3 	bl	d574c <_ZN6String4moveERS_>
	return *this;
}
   d57c6:	4620      	mov	r0, r4
   d57c8:	bd10      	pop	{r4, pc}

000d57ca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d57ca:	b538      	push	{r3, r4, r5, lr}
   d57cc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d57ce:	460c      	mov	r4, r1
   d57d0:	b141      	cbz	r1, d57e4 <_ZN6StringaSEPKc+0x1a>
   d57d2:	4608      	mov	r0, r1
   d57d4:	f001 fc70 	bl	d70b8 <strlen>
   d57d8:	4621      	mov	r1, r4
   d57da:	4602      	mov	r2, r0
   d57dc:	4628      	mov	r0, r5
   d57de:	f7ff ff8a 	bl	d56f6 <_ZN6String4copyEPKcj>
   d57e2:	e001      	b.n	d57e8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d57e4:	f7ff ff5f 	bl	d56a6 <_ZN6String10invalidateEv>

	return *this;
}
   d57e8:	4628      	mov	r0, r5
   d57ea:	bd38      	pop	{r3, r4, r5, pc}

000d57ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d57ec:	b570      	push	{r4, r5, r6, lr}
   d57ee:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d57f0:	460e      	mov	r6, r1
   d57f2:	b909      	cbnz	r1, d57f8 <_ZN6String6concatEPKcj+0xc>
   d57f4:	2000      	movs	r0, #0
   d57f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d57f8:	b16a      	cbz	r2, d5816 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d57fa:	6883      	ldr	r3, [r0, #8]
   d57fc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d57fe:	4629      	mov	r1, r5
   d5800:	f7ff ff68 	bl	d56d4 <_ZN6String7reserveEj>
   d5804:	2800      	cmp	r0, #0
   d5806:	d0f5      	beq.n	d57f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5808:	6820      	ldr	r0, [r4, #0]
   d580a:	68a3      	ldr	r3, [r4, #8]
   d580c:	4631      	mov	r1, r6
   d580e:	4418      	add	r0, r3
   d5810:	f001 fc4a 	bl	d70a8 <strcpy>
	len = newlen;
   d5814:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5816:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5818:	bd70      	pop	{r4, r5, r6, pc}

000d581a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d581a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d581c:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d581e:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5822:	2201      	movs	r2, #1
   d5824:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5826:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d582a:	f7ff ffdf 	bl	d57ec <_ZN6String6concatEPKcj>
}
   d582e:	b003      	add	sp, #12
   d5830:	f85d fb04 	ldr.w	pc, [sp], #4

000d5834 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5834:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5836:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5838:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d583a:	b912      	cbnz	r2, d5842 <_ZNK6String6equalsEPKc+0xe>
   d583c:	b919      	cbnz	r1, d5846 <_ZNK6String6equalsEPKc+0x12>
   d583e:	2001      	movs	r0, #1
   d5840:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5842:	b911      	cbnz	r1, d584a <_ZNK6String6equalsEPKc+0x16>
   d5844:	6803      	ldr	r3, [r0, #0]
   d5846:	7818      	ldrb	r0, [r3, #0]
   d5848:	e002      	b.n	d5850 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d584a:	6800      	ldr	r0, [r0, #0]
   d584c:	f001 fc22 	bl	d7094 <strcmp>
   d5850:	fab0 f080 	clz	r0, r0
   d5854:	0940      	lsrs	r0, r0, #5
}
   d5856:	bd08      	pop	{r3, pc}

000d5858 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d585c:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d585e:	460e      	mov	r6, r1
   d5860:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5862:	4910      	ldr	r1, [pc, #64]	; (d58a4 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d5864:	bf88      	it	hi
   d5866:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5868:	4615      	mov	r5, r2
   d586a:	4607      	mov	r7, r0
	if (left > right) {
   d586c:	bf84      	itt	hi
   d586e:	4625      	movhi	r5, r4
   d5870:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5872:	f7ff ff58 	bl	d5726 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d5876:	68b1      	ldr	r1, [r6, #8]
   d5878:	428d      	cmp	r5, r1
   d587a:	d80f      	bhi.n	d589c <_ZNK6String9substringEjj+0x44>
   d587c:	428c      	cmp	r4, r1
   d587e:	bf28      	it	cs
   d5880:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d5882:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d5884:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d5886:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d588a:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d588c:	6831      	ldr	r1, [r6, #0]
   d588e:	4638      	mov	r0, r7
   d5890:	4429      	add	r1, r5
   d5892:	f7ff ff9a 	bl	d57ca <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d5896:	6833      	ldr	r3, [r6, #0]
   d5898:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d589c:	4638      	mov	r0, r7
   d589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58a2:	bf00      	nop
   d58a4:	000d8db2 	.word	0x000d8db2

000d58a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d58a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58aa:	4606      	mov	r6, r0
   d58ac:	460d      	mov	r5, r1
   d58ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d58b0:	2400      	movs	r4, #0
  while (size--) {
   d58b2:	42bd      	cmp	r5, r7
   d58b4:	d00c      	beq.n	d58d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d58b6:	6833      	ldr	r3, [r6, #0]
   d58b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d58bc:	689b      	ldr	r3, [r3, #8]
   d58be:	4630      	mov	r0, r6
   d58c0:	4798      	blx	r3
     if (chunk>=0)
   d58c2:	2800      	cmp	r0, #0
   d58c4:	db01      	blt.n	d58ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d58c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d58c8:	e7f3      	b.n	d58b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d58ca:	2c00      	cmp	r4, #0
   d58cc:	bf08      	it	eq
   d58ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d58d0:	4620      	mov	r0, r4
   d58d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d58d4:	b570      	push	{r4, r5, r6, lr}
   d58d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d58d8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d58da:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d58dc:	b149      	cbz	r1, d58f2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d58de:	f001 fbeb 	bl	d70b8 <strlen>
   d58e2:	682b      	ldr	r3, [r5, #0]
   d58e4:	4602      	mov	r2, r0
   d58e6:	4621      	mov	r1, r4
   d58e8:	4628      	mov	r0, r5
   d58ea:	68db      	ldr	r3, [r3, #12]
    }
   d58ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58f0:	4718      	bx	r3
    }
   d58f2:	bd70      	pop	{r4, r5, r6, pc}

000d58f4 <_ZN5Print5printEPKc>:
   d58f4:	b508      	push	{r3, lr}
   d58f6:	f7ff ffed 	bl	d58d4 <_ZN5Print5writeEPKc>
   d58fa:	bd08      	pop	{r3, pc}

000d58fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d58fc:	6803      	ldr	r3, [r0, #0]
   d58fe:	689b      	ldr	r3, [r3, #8]
   d5900:	4718      	bx	r3

000d5902 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5902:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5904:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5906:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5908:	f7ff fff8 	bl	d58fc <_ZN5Print5printEc>
  n += print('\n');
   d590c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d590e:	4604      	mov	r4, r0
  n += print('\n');
   d5910:	4628      	mov	r0, r5
   d5912:	f7ff fff3 	bl	d58fc <_ZN5Print5printEc>
  return n;
}
   d5916:	4420      	add	r0, r4
   d5918:	bd38      	pop	{r3, r4, r5, pc}

000d591a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d591a:	b538      	push	{r3, r4, r5, lr}
   d591c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d591e:	f7ff ffd9 	bl	d58d4 <_ZN5Print5writeEPKc>
   d5922:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5924:	4628      	mov	r0, r5
   d5926:	f7ff ffec 	bl	d5902 <_ZN5Print7printlnEv>
  return n;
}
   d592a:	4420      	add	r0, r4
   d592c:	bd38      	pop	{r3, r4, r5, pc}

000d592e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d592e:	b530      	push	{r4, r5, lr}
   d5930:	b08b      	sub	sp, #44	; 0x2c
   d5932:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5934:	2100      	movs	r1, #0
   d5936:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d593a:	2a01      	cmp	r2, #1
   d593c:	bf98      	it	ls
   d593e:	220a      	movls	r2, #10
   d5940:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5944:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5948:	fb05 3312 	mls	r3, r5, r2, r3
   d594c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5950:	2b09      	cmp	r3, #9
   d5952:	bf94      	ite	ls
   d5954:	3330      	addls	r3, #48	; 0x30
   d5956:	3337      	addhi	r3, #55	; 0x37
   d5958:	b2db      	uxtb	r3, r3
   d595a:	4621      	mov	r1, r4
   d595c:	f804 3901 	strb.w	r3, [r4], #-1
   d5960:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5962:	2d00      	cmp	r5, #0
   d5964:	d1ee      	bne.n	d5944 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5966:	f7ff ffb5 	bl	d58d4 <_ZN5Print5writeEPKc>
}
   d596a:	b00b      	add	sp, #44	; 0x2c
   d596c:	bd30      	pop	{r4, r5, pc}

000d596e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d596e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5970:	b92a      	cbnz	r2, d597e <_ZN5Print5printEmi+0x10>
   d5972:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5974:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5978:	689b      	ldr	r3, [r3, #8]
   d597a:	b2c9      	uxtb	r1, r1
   d597c:	4718      	bx	r3
  else return printNumber(n, base);
   d597e:	b2d2      	uxtb	r2, r2
}
   d5980:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5984:	f7ff bfd3 	b.w	d592e <_ZN5Print11printNumberEmh>

000d5988 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5988:	f7ff bff1 	b.w	d596e <_ZN5Print5printEmi>

000d598c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
   d598c:	b538      	push	{r3, r4, r5, lr}
   d598e:	4605      	mov	r5, r0
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   d5990:	f7ff ffed 	bl	d596e <_ZN5Print5printEmi>
   d5994:	4604      	mov	r4, r0
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d5996:	4628      	mov	r0, r5
   d5998:	f7ff ffb3 	bl	d5902 <_ZN5Print7printlnEv>
  return n;
}
   d599c:	4420      	add	r0, r4
   d599e:	bd38      	pop	{r3, r4, r5, pc}

000d59a0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d59a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59a4:	4607      	mov	r7, r0
   d59a6:	460e      	mov	r6, r1
  if (base == 0) {
   d59a8:	4615      	mov	r5, r2
   d59aa:	b92a      	cbnz	r2, d59b8 <_ZN5Print5printEli+0x18>
    return write(n);
   d59ac:	6803      	ldr	r3, [r0, #0]
   d59ae:	b2c9      	uxtb	r1, r1
   d59b0:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d59b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d59b6:	4718      	bx	r3
  } else if (base == 10) {
   d59b8:	2a0a      	cmp	r2, #10
   d59ba:	d102      	bne.n	d59c2 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d59bc:	2900      	cmp	r1, #0
   d59be:	da01      	bge.n	d59c4 <_ZN5Print5printEli+0x24>
   d59c0:	e004      	b.n	d59cc <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d59c2:	b2d2      	uxtb	r2, r2
  }
}
   d59c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d59c8:	f7ff bfb1 	b.w	d592e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d59cc:	212d      	movs	r1, #45	; 0x2d
   d59ce:	f7ff ff95 	bl	d58fc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d59d2:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d59d4:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d59d6:	4271      	negs	r1, r6
   d59d8:	4638      	mov	r0, r7
   d59da:	f7ff ffa8 	bl	d592e <_ZN5Print11printNumberEmh>
   d59de:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d59e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d59e4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d59e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d59e8:	ec57 6b10 	vmov	r6, r7, d0
   d59ec:	4682      	mov	sl, r0
   d59ee:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d59f0:	ee10 2a10 	vmov	r2, s0
   d59f4:	463b      	mov	r3, r7
   d59f6:	ee10 0a10 	vmov	r0, s0
   d59fa:	4639      	mov	r1, r7
   d59fc:	f001 fa4e 	bl	d6e9c <__aeabi_dcmpun>
   d5a00:	b108      	cbz	r0, d5a06 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5a02:	4948      	ldr	r1, [pc, #288]	; (d5b24 <_ZN5Print10printFloatEdh+0x140>)
   d5a04:	e012      	b.n	d5a2c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5a06:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5a0a:	f04f 32ff 	mov.w	r2, #4294967295
   d5a0e:	4b46      	ldr	r3, [pc, #280]	; (d5b28 <_ZN5Print10printFloatEdh+0x144>)
   d5a10:	4630      	mov	r0, r6
   d5a12:	4649      	mov	r1, r9
   d5a14:	f001 fa42 	bl	d6e9c <__aeabi_dcmpun>
   d5a18:	b968      	cbnz	r0, d5a36 <_ZN5Print10printFloatEdh+0x52>
   d5a1a:	f04f 32ff 	mov.w	r2, #4294967295
   d5a1e:	4b42      	ldr	r3, [pc, #264]	; (d5b28 <_ZN5Print10printFloatEdh+0x144>)
   d5a20:	4630      	mov	r0, r6
   d5a22:	4649      	mov	r1, r9
   d5a24:	f001 fa1c 	bl	d6e60 <__aeabi_dcmple>
   d5a28:	b928      	cbnz	r0, d5a36 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5a2a:	4940      	ldr	r1, [pc, #256]	; (d5b2c <_ZN5Print10printFloatEdh+0x148>)
   d5a2c:	4650      	mov	r0, sl
   d5a2e:	f7ff ff51 	bl	d58d4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5a36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5a3a:	4b3d      	ldr	r3, [pc, #244]	; (d5b30 <_ZN5Print10printFloatEdh+0x14c>)
   d5a3c:	4630      	mov	r0, r6
   d5a3e:	4639      	mov	r1, r7
   d5a40:	f001 fa22 	bl	d6e88 <__aeabi_dcmpgt>
   d5a44:	b108      	cbz	r0, d5a4a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5a46:	493b      	ldr	r1, [pc, #236]	; (d5b34 <_ZN5Print10printFloatEdh+0x150>)
   d5a48:	e7f0      	b.n	d5a2c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5a4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5a4e:	4b3a      	ldr	r3, [pc, #232]	; (d5b38 <_ZN5Print10printFloatEdh+0x154>)
   d5a50:	4630      	mov	r0, r6
   d5a52:	4639      	mov	r1, r7
   d5a54:	f001 f9fa 	bl	d6e4c <__aeabi_dcmplt>
   d5a58:	2800      	cmp	r0, #0
   d5a5a:	d1f4      	bne.n	d5a46 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5a5c:	2200      	movs	r2, #0
   d5a5e:	2300      	movs	r3, #0
   d5a60:	4630      	mov	r0, r6
   d5a62:	4639      	mov	r1, r7
   d5a64:	f001 f9f2 	bl	d6e4c <__aeabi_dcmplt>
   d5a68:	b140      	cbz	r0, d5a7c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5a6a:	212d      	movs	r1, #45	; 0x2d
   d5a6c:	4650      	mov	r0, sl
   d5a6e:	f7ff ff45 	bl	d58fc <_ZN5Print5printEc>
     number = -number;
   d5a72:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5a76:	4604      	mov	r4, r0
     number = -number;
   d5a78:	461f      	mov	r7, r3
   d5a7a:	e000      	b.n	d5a7e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5a7c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5a7e:	492f      	ldr	r1, [pc, #188]	; (d5b3c <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5a80:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5a84:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5a86:	fa5f f388 	uxtb.w	r3, r8
   d5a8a:	429d      	cmp	r5, r3
   d5a8c:	d906      	bls.n	d5a9c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5a8e:	2200      	movs	r2, #0
   d5a90:	4b2b      	ldr	r3, [pc, #172]	; (d5b40 <_ZN5Print10printFloatEdh+0x15c>)
   d5a92:	f001 f893 	bl	d6bbc <__aeabi_ddiv>
   d5a96:	f108 0801 	add.w	r8, r8, #1
   d5a9a:	e7f4      	b.n	d5a86 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5a9c:	4632      	mov	r2, r6
   d5a9e:	463b      	mov	r3, r7
   d5aa0:	f000 fdb0 	bl	d6604 <__adddf3>
   d5aa4:	460f      	mov	r7, r1
   d5aa6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5aa8:	f001 fa36 	bl	d6f18 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5aac:	220a      	movs	r2, #10
   d5aae:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5ab0:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5ab2:	4650      	mov	r0, sl
   d5ab4:	f7ff ff3b 	bl	d592e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5ab8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5aba:	b37d      	cbz	r5, d5b1c <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5abc:	4640      	mov	r0, r8
   d5abe:	f000 fedd 	bl	d687c <__aeabi_ui2d>
   d5ac2:	4602      	mov	r2, r0
   d5ac4:	460b      	mov	r3, r1
   d5ac6:	4630      	mov	r0, r6
   d5ac8:	4639      	mov	r1, r7
   d5aca:	f000 fd99 	bl	d6600 <__aeabi_dsub>
   d5ace:	4606      	mov	r6, r0
   d5ad0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ad2:	4650      	mov	r0, sl
   d5ad4:	491b      	ldr	r1, [pc, #108]	; (d5b44 <_ZN5Print10printFloatEdh+0x160>)
   d5ad6:	f7ff fefd 	bl	d58d4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5ada:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5adc:	4b18      	ldr	r3, [pc, #96]	; (d5b40 <_ZN5Print10printFloatEdh+0x15c>)
   d5ade:	2200      	movs	r2, #0
   d5ae0:	4630      	mov	r0, r6
   d5ae2:	4639      	mov	r1, r7
   d5ae4:	f000 ff40 	bl	d6968 <__aeabi_dmul>
   d5ae8:	460f      	mov	r7, r1
   d5aea:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5aec:	f001 f9ec 	bl	d6ec8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5af0:	220a      	movs	r2, #10
   d5af2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5af4:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5af6:	4650      	mov	r0, sl
   d5af8:	f7ff ff52 	bl	d59a0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5afc:	4404      	add	r4, r0
    remainder -= toPrint;
   d5afe:	4640      	mov	r0, r8
   d5b00:	f000 fecc 	bl	d689c <__aeabi_i2d>
   d5b04:	4602      	mov	r2, r0
   d5b06:	460b      	mov	r3, r1
   d5b08:	4630      	mov	r0, r6
   d5b0a:	4639      	mov	r1, r7
   d5b0c:	f000 fd78 	bl	d6600 <__aeabi_dsub>
   d5b10:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5b12:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5b16:	4606      	mov	r6, r0
   d5b18:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5b1a:	d1df      	bne.n	d5adc <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5b22:	bf00      	nop
   d5b24:	000d8d90 	.word	0x000d8d90
   d5b28:	7fefffff 	.word	0x7fefffff
   d5b2c:	000d8d9a 	.word	0x000d8d9a
   d5b30:	41efffff 	.word	0x41efffff
   d5b34:	000d8d94 	.word	0x000d8d94
   d5b38:	c1efffff 	.word	0xc1efffff
   d5b3c:	3fe00000 	.word	0x3fe00000
   d5b40:	40240000 	.word	0x40240000
   d5b44:	000d8d98 	.word	0x000d8d98

000d5b48 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5b48:	b2c9      	uxtb	r1, r1
   d5b4a:	f7ff bf4b 	b.w	d59e4 <_ZN5Print10printFloatEdh>

000d5b4e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5b4e:	b40c      	push	{r2, r3}
   d5b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b54:	b087      	sub	sp, #28
   d5b56:	af00      	add	r7, sp, #0
   d5b58:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5b5c:	4605      	mov	r5, r0
   d5b5e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5b62:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5b64:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5b66:	4623      	mov	r3, r4
   d5b68:	464a      	mov	r2, r9
   d5b6a:	2114      	movs	r1, #20
   d5b6c:	1d38      	adds	r0, r7, #4
   d5b6e:	f7ff fd19 	bl	d55a4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5b72:	2813      	cmp	r0, #19
   d5b74:	d805      	bhi.n	d5b82 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5b76:	1d39      	adds	r1, r7, #4
   d5b78:	4628      	mov	r0, r5
   d5b7a:	f7ff feab 	bl	d58d4 <_ZN5Print5writeEPKc>
   d5b7e:	4604      	mov	r4, r0
   d5b80:	e013      	b.n	d5baa <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5b82:	f100 0308 	add.w	r3, r0, #8
   d5b86:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5b8a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5b8c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5b90:	1c41      	adds	r1, r0, #1
   d5b92:	4623      	mov	r3, r4
   d5b94:	464a      	mov	r2, r9
   d5b96:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5b98:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5b9a:	f7ff fd03 	bl	d55a4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5b9e:	4669      	mov	r1, sp
   d5ba0:	4628      	mov	r0, r5
   d5ba2:	f7ff fe97 	bl	d58d4 <_ZN5Print5writeEPKc>
   d5ba6:	4604      	mov	r4, r0
   d5ba8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5baa:	b11e      	cbz	r6, d5bb4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5bac:	4628      	mov	r0, r5
   d5bae:	f7ff fea8 	bl	d5902 <_ZN5Print7printlnEv>
   d5bb2:	4404      	add	r4, r0
    return n;
}
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	371c      	adds	r7, #28
   d5bb8:	46bd      	mov	sp, r7
   d5bba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5bbe:	b002      	add	sp, #8
   d5bc0:	4770      	bx	lr
	...

000d5bc4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5bc4:	4b01      	ldr	r3, [pc, #4]	; (d5bcc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5bc6:	4a02      	ldr	r2, [pc, #8]	; (d5bd0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5bc8:	601a      	str	r2, [r3, #0]
   d5bca:	4770      	bx	lr
   d5bcc:	2003e3ec 	.word	0x2003e3ec
   d5bd0:	000d8e51 	.word	0x000d8e51

000d5bd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5bd4:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5bda:	601a      	str	r2, [r3, #0]
   d5bdc:	4770      	bx	lr
   d5bde:	bf00      	nop
   d5be0:	2003e204 	.word	0x2003e204
   d5be4:	2003e3f0 	.word	0x2003e3f0

000d5be8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5be8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5bea:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bec:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5bee:	b113      	cbz	r3, d5bf6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bf0:	2203      	movs	r2, #3
   d5bf2:	4601      	mov	r1, r0
   d5bf4:	4798      	blx	r3
    }
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	bd10      	pop	{r4, pc}

000d5bfa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5bfa:	b510      	push	{r4, lr}
   d5bfc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5bfe:	f7ff fff3 	bl	d5be8 <_ZNSt14_Function_baseD1Ev>
   d5c02:	4620      	mov	r0, r4
   d5c04:	bd10      	pop	{r4, pc}
	...

000d5c08 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c08:	4803      	ldr	r0, [pc, #12]	; (d5c18 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5c0a:	4a04      	ldr	r2, [pc, #16]	; (d5c1c <_GLOBAL__sub_I_RGB+0x14>)
   d5c0c:	4904      	ldr	r1, [pc, #16]	; (d5c20 <_GLOBAL__sub_I_RGB+0x18>)
   d5c0e:	2300      	movs	r3, #0
   d5c10:	6083      	str	r3, [r0, #8]
   d5c12:	f000 bba3 	b.w	d635c <__aeabi_atexit>
   d5c16:	bf00      	nop
   d5c18:	2003e3f4 	.word	0x2003e3f4
   d5c1c:	2003e2a8 	.word	0x2003e2a8
   d5c20:	000d5bfb 	.word	0x000d5bfb

000d5c24 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5c24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c26:	4b0f      	ldr	r3, [pc, #60]	; (d5c64 <serialEventRun+0x40>)
   d5c28:	b133      	cbz	r3, d5c38 <serialEventRun+0x14>
   d5c2a:	f000 f92d 	bl	d5e88 <_Z16_fetch_usbserialv>
   d5c2e:	6803      	ldr	r3, [r0, #0]
   d5c30:	691b      	ldr	r3, [r3, #16]
   d5c32:	4798      	blx	r3
   d5c34:	2800      	cmp	r0, #0
   d5c36:	dc0d      	bgt.n	d5c54 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5c38:	4b0b      	ldr	r3, [pc, #44]	; (d5c68 <serialEventRun+0x44>)
   d5c3a:	b133      	cbz	r3, d5c4a <serialEventRun+0x26>
   d5c3c:	f000 f98e 	bl	d5f5c <_Z22__fetch_global_Serial1v>
   d5c40:	6803      	ldr	r3, [r0, #0]
   d5c42:	691b      	ldr	r3, [r3, #16]
   d5c44:	4798      	blx	r3
   d5c46:	2800      	cmp	r0, #0
   d5c48:	dc07      	bgt.n	d5c5a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d5c4a:	4b08      	ldr	r3, [pc, #32]	; (d5c6c <serialEventRun+0x48>)
   d5c4c:	b143      	cbz	r3, d5c60 <serialEventRun+0x3c>
   d5c4e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d5c52:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5c54:	f3af 8000 	nop.w
   d5c58:	e7ee      	b.n	d5c38 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5c5a:	f3af 8000 	nop.w
   d5c5e:	e7f4      	b.n	d5c4a <serialEventRun+0x26>
   d5c60:	bd08      	pop	{r3, pc}
   d5c62:	bf00      	nop
	...

000d5c70 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5c70:	b508      	push	{r3, lr}
	serialEventRun();
   d5c72:	f7ff ffd7 	bl	d5c24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c76:	f7ff faf1 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c7a:	4b01      	ldr	r3, [pc, #4]	; (d5c80 <_post_loop+0x10>)
   d5c7c:	6018      	str	r0, [r3, #0]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	2003e738 	.word	0x2003e738

000d5c84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5c84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5c86:	2300      	movs	r3, #0
   d5c88:	9300      	str	r3, [sp, #0]
   d5c8a:	461a      	mov	r2, r3
   d5c8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5c90:	f7ff fbf6 	bl	d5480 <system_ctrl_set_result>
}
   d5c94:	b003      	add	sp, #12
   d5c96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5c9c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5c9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5c9e:	8843      	ldrh	r3, [r0, #2]
   d5ca0:	2b0a      	cmp	r3, #10
   d5ca2:	d008      	beq.n	d5cb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ca4:	2b50      	cmp	r3, #80	; 0x50
   d5ca6:	d109      	bne.n	d5cbc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5ca8:	4b09      	ldr	r3, [pc, #36]	; (d5cd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5caa:	681b      	ldr	r3, [r3, #0]
   d5cac:	b13b      	cbz	r3, d5cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5cae:	b003      	add	sp, #12
   d5cb0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5cb4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5cb6:	f7ff ffe5 	bl	d5c84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5cba:	e006      	b.n	d5cca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cbc:	2300      	movs	r3, #0
   d5cbe:	9300      	str	r3, [sp, #0]
   d5cc0:	461a      	mov	r2, r3
   d5cc2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cc6:	f7ff fbdb 	bl	d5480 <system_ctrl_set_result>
        break;
    }
}
   d5cca:	b003      	add	sp, #12
   d5ccc:	f85d fb04 	ldr.w	pc, [sp], #4
   d5cd0:	2003e404 	.word	0x2003e404

000d5cd4 <module_user_init_hook>:

void module_user_init_hook()
{
   d5cd4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5cd6:	f7ff fab9 	bl	d524c <HAL_RNG_GetRandomNumber>
   d5cda:	4604      	mov	r4, r0
    srand(seed);
   d5cdc:	f001 f9b2 	bl	d7044 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ce0:	4b07      	ldr	r3, [pc, #28]	; (d5d00 <module_user_init_hook+0x2c>)
   d5ce2:	b113      	cbz	r3, d5cea <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5ce4:	4620      	mov	r0, r4
   d5ce6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5cea:	2100      	movs	r1, #0
   d5cec:	4804      	ldr	r0, [pc, #16]	; (d5d00 <module_user_init_hook+0x2c>)
   d5cee:	f7ff fc31 	bl	d5554 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5cf2:	2100      	movs	r1, #0
   d5cf4:	4803      	ldr	r0, [pc, #12]	; (d5d04 <module_user_init_hook+0x30>)
}
   d5cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5cfa:	f7ff bbb7 	b.w	d546c <system_ctrl_set_app_request_handler>
   d5cfe:	bf00      	nop
   d5d00:	00000000 	.word	0x00000000
   d5d04:	000d5c9d 	.word	0x000d5c9d

000d5d08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d08:	4770      	bx	lr

000d5d0a <_ZN9IPAddressD0Ev>:
   d5d0a:	b510      	push	{r4, lr}
   d5d0c:	4604      	mov	r4, r0
   d5d0e:	f7fe f9c2 	bl	d4096 <_ZdlPv>
   d5d12:	4620      	mov	r0, r4
   d5d14:	bd10      	pop	{r4, pc}

000d5d16 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d16:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5d18:	7d03      	ldrb	r3, [r0, #20]
   d5d1a:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d1c:	b08d      	sub	sp, #52	; 0x34
   d5d1e:	460e      	mov	r6, r1
   d5d20:	f100 0704 	add.w	r7, r0, #4
   d5d24:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5d28:	d002      	beq.n	d5d30 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5d2a:	f100 0508 	add.w	r5, r0, #8
   d5d2e:	e018      	b.n	d5d62 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5d30:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d32:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5d34:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d38:	232f      	movs	r3, #47	; 0x2f
   d5d3a:	462a      	mov	r2, r5
   d5d3c:	200a      	movs	r0, #10
   d5d3e:	f7ff fac5 	bl	d52cc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d42:	4628      	mov	r0, r5
   d5d44:	f001 f9b8 	bl	d70b8 <strlen>
   d5d48:	6833      	ldr	r3, [r6, #0]
   d5d4a:	4602      	mov	r2, r0
   d5d4c:	68db      	ldr	r3, [r3, #12]
   d5d4e:	4629      	mov	r1, r5
   d5d50:	4630      	mov	r0, r6
   d5d52:	4798      	blx	r3
   d5d54:	e00f      	b.n	d5d76 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5d56:	b124      	cbz	r4, d5d62 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5d58:	212e      	movs	r1, #46	; 0x2e
   d5d5a:	4630      	mov	r0, r6
   d5d5c:	f7ff fdce 	bl	d58fc <_ZN5Print5printEc>
   d5d60:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5d62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5d66:	220a      	movs	r2, #10
   d5d68:	4630      	mov	r0, r6
   d5d6a:	f7ff fe0d 	bl	d5988 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d6e:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d70:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d72:	d1f0      	bne.n	d5d56 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d74:	4620      	mov	r0, r4
    }
    return n;
}
   d5d76:	b00d      	add	sp, #52	; 0x34
   d5d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5d7c <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5d7c:	b510      	push	{r4, lr}
   d5d7e:	4b05      	ldr	r3, [pc, #20]	; (d5d94 <_ZN9IPAddressC1Ev+0x18>)
   d5d80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5d82:	2211      	movs	r2, #17
   d5d84:	f840 3b04 	str.w	r3, [r0], #4
   d5d88:	2100      	movs	r1, #0
   d5d8a:	f001 f952 	bl	d7032 <memset>
{
    clear();
}
   d5d8e:	4620      	mov	r0, r4
   d5d90:	bd10      	pop	{r4, pc}
   d5d92:	bf00      	nop
   d5d94:	000d8eac 	.word	0x000d8eac

000d5d98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5d98:	4603      	mov	r3, r0
   d5d9a:	4a07      	ldr	r2, [pc, #28]	; (d5db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5d9c:	b510      	push	{r4, lr}
   d5d9e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5da2:	f101 0210 	add.w	r2, r1, #16
   d5da6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5daa:	f843 4b04 	str.w	r4, [r3], #4
   d5dae:	4291      	cmp	r1, r2
   d5db0:	d1f9      	bne.n	d5da6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5db2:	780a      	ldrb	r2, [r1, #0]
   d5db4:	701a      	strb	r2, [r3, #0]
}
   d5db6:	bd10      	pop	{r4, pc}
   d5db8:	000d8eac 	.word	0x000d8eac

000d5dbc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5dbc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5dbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5dc2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5dc6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5dca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5dce:	2304      	movs	r3, #4
   d5dd0:	6041      	str	r1, [r0, #4]
   d5dd2:	7503      	strb	r3, [r0, #20]
   d5dd4:	bd10      	pop	{r4, pc}

000d5dd6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5dd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5dd8:	780d      	ldrb	r5, [r1, #0]
   d5dda:	788b      	ldrb	r3, [r1, #2]
   d5ddc:	784a      	ldrb	r2, [r1, #1]
   d5dde:	78c9      	ldrb	r1, [r1, #3]
   d5de0:	9100      	str	r1, [sp, #0]
   d5de2:	4629      	mov	r1, r5
   d5de4:	f7ff ffea 	bl	d5dbc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5de8:	b003      	add	sp, #12
   d5dea:	bd30      	pop	{r4, r5, pc}

000d5dec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dec:	7441      	strb	r1, [r0, #17]
   d5dee:	4770      	bx	lr

000d5df0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5df0:	4770      	bx	lr

000d5df2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5df2:	2100      	movs	r1, #0
   d5df4:	7c00      	ldrb	r0, [r0, #16]
   d5df6:	f7ff bb09 	b.w	d540c <HAL_USB_USART_Receive_Data>

000d5dfa <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5dfa:	2101      	movs	r1, #1
   d5dfc:	7c00      	ldrb	r0, [r0, #16]
   d5dfe:	f7ff bb05 	b.w	d540c <HAL_USB_USART_Receive_Data>

000d5e02 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5e02:	7c00      	ldrb	r0, [r0, #16]
   d5e04:	f7ff bafa 	b.w	d53fc <HAL_USB_USART_Available_Data_For_Write>

000d5e08 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5e08:	7c00      	ldrb	r0, [r0, #16]
   d5e0a:	f7ff baef 	b.w	d53ec <HAL_USB_USART_Available_Data>

000d5e0e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5e0e:	b538      	push	{r3, r4, r5, lr}
   d5e10:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e12:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5e14:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e16:	f7ff faf1 	bl	d53fc <HAL_USB_USART_Available_Data_For_Write>
   d5e1a:	2800      	cmp	r0, #0
   d5e1c:	dc01      	bgt.n	d5e22 <_ZN9USBSerial5writeEh+0x14>
   d5e1e:	7c60      	ldrb	r0, [r4, #17]
   d5e20:	b120      	cbz	r0, d5e2c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5e22:	4629      	mov	r1, r5
   d5e24:	7c20      	ldrb	r0, [r4, #16]
   d5e26:	f7ff faf9 	bl	d541c <HAL_USB_USART_Send_Data>
    return 1;
   d5e2a:	2001      	movs	r0, #1
  }
  return 0;
}
   d5e2c:	bd38      	pop	{r3, r4, r5, pc}

000d5e2e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5e2e:	7c00      	ldrb	r0, [r0, #16]
   d5e30:	f7ff bafc 	b.w	d542c <HAL_USB_USART_Flush_Data>

000d5e34 <_ZN9USBSerialD0Ev>:
   d5e34:	b510      	push	{r4, lr}
   d5e36:	4604      	mov	r4, r0
   d5e38:	f7fe f92d 	bl	d4096 <_ZdlPv>
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	bd10      	pop	{r4, pc}

000d5e40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e40:	b510      	push	{r4, lr}
   d5e42:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e44:	2300      	movs	r3, #0
   d5e46:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e4c:	60a3      	str	r3, [r4, #8]
   d5e4e:	4b05      	ldr	r3, [pc, #20]	; (d5e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e50:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5e52:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e54:	4608      	mov	r0, r1
{
  _serial = serial;
   d5e56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5e58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5e5a:	4611      	mov	r1, r2
   d5e5c:	f7ff fab6 	bl	d53cc <HAL_USB_USART_Init>
}
   d5e60:	4620      	mov	r0, r4
   d5e62:	bd10      	pop	{r4, pc}
   d5e64:	000d8ec0 	.word	0x000d8ec0

000d5e68 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5e68:	2200      	movs	r2, #0
   d5e6a:	7c00      	ldrb	r0, [r0, #16]
   d5e6c:	f7ff bab6 	b.w	d53dc <HAL_USB_USART_Begin>

000d5e70 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d5e70:	7c00      	ldrb	r0, [r0, #16]
   d5e72:	f7ff bae3 	b.w	d543c <HAL_USB_USART_Is_Connected>

000d5e76 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e76:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e78:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e7c:	2100      	movs	r1, #0
   d5e7e:	f001 f8d8 	bl	d7032 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e82:	4620      	mov	r0, r4
   d5e84:	bd10      	pop	{r4, pc}
	...

000d5e88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5e88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e8a:	4d0e      	ldr	r5, [pc, #56]	; (d5ec4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5e8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5e8e:	a801      	add	r0, sp, #4
   d5e90:	f7ff fff1 	bl	d5e76 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e94:	6829      	ldr	r1, [r5, #0]
   d5e96:	f011 0401 	ands.w	r4, r1, #1
   d5e9a:	d110      	bne.n	d5ebe <_Z16_fetch_usbserialv+0x36>
   d5e9c:	4628      	mov	r0, r5
   d5e9e:	f7fe f8fe 	bl	d409e <__cxa_guard_acquire>
   d5ea2:	b160      	cbz	r0, d5ebe <_Z16_fetch_usbserialv+0x36>
   d5ea4:	aa01      	add	r2, sp, #4
   d5ea6:	4621      	mov	r1, r4
   d5ea8:	4807      	ldr	r0, [pc, #28]	; (d5ec8 <_Z16_fetch_usbserialv+0x40>)
   d5eaa:	f7ff ffc9 	bl	d5e40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5eae:	4628      	mov	r0, r5
   d5eb0:	f7fe f8fa 	bl	d40a8 <__cxa_guard_release>
   d5eb4:	4a05      	ldr	r2, [pc, #20]	; (d5ecc <_Z16_fetch_usbserialv+0x44>)
   d5eb6:	4906      	ldr	r1, [pc, #24]	; (d5ed0 <_Z16_fetch_usbserialv+0x48>)
   d5eb8:	4803      	ldr	r0, [pc, #12]	; (d5ec8 <_Z16_fetch_usbserialv+0x40>)
   d5eba:	f000 fa4f 	bl	d635c <__aeabi_atexit>
	return _usbserial;
}
   d5ebe:	4802      	ldr	r0, [pc, #8]	; (d5ec8 <_Z16_fetch_usbserialv+0x40>)
   d5ec0:	b007      	add	sp, #28
   d5ec2:	bd30      	pop	{r4, r5, pc}
   d5ec4:	2003e408 	.word	0x2003e408
   d5ec8:	2003e40c 	.word	0x2003e40c
   d5ecc:	2003e2a8 	.word	0x2003e2a8
   d5ed0:	000d5df1 	.word	0x000d5df1

000d5ed4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5ed4:	4770      	bx	lr

000d5ed6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ed6:	7441      	strb	r1, [r0, #17]
   d5ed8:	4770      	bx	lr

000d5eda <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5eda:	7c00      	ldrb	r0, [r0, #16]
   d5edc:	f7ff ba36 	b.w	d534c <HAL_USART_Available_Data_For_Write>

000d5ee0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5ee0:	7c00      	ldrb	r0, [r0, #16]
   d5ee2:	f7ff ba0b 	b.w	d52fc <HAL_USART_Available_Data>

000d5ee6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5ee6:	7c00      	ldrb	r0, [r0, #16]
   d5ee8:	f7ff ba18 	b.w	d531c <HAL_USART_Peek_Data>

000d5eec <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5eec:	7c00      	ldrb	r0, [r0, #16]
   d5eee:	f7ff ba0d 	b.w	d530c <HAL_USART_Read_Data>

000d5ef2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ef2:	7c00      	ldrb	r0, [r0, #16]
   d5ef4:	f7ff ba1a 	b.w	d532c <HAL_USART_Flush_Data>

000d5ef8 <_ZN11USARTSerialD0Ev>:
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	4604      	mov	r4, r0
   d5efc:	f7fe f8cb 	bl	d4096 <_ZdlPv>
   d5f00:	4620      	mov	r0, r4
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5f04:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5f06:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5f08:	4604      	mov	r4, r0
   d5f0a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5f0c:	b925      	cbnz	r5, d5f18 <_ZN11USARTSerial5writeEh+0x14>
   d5f0e:	7c00      	ldrb	r0, [r0, #16]
   d5f10:	f7ff fa1c 	bl	d534c <HAL_USART_Available_Data_For_Write>
   d5f14:	2800      	cmp	r0, #0
   d5f16:	dd05      	ble.n	d5f24 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5f18:	4631      	mov	r1, r6
   d5f1a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5f20:	f7ff b9e4 	b.w	d52ec <HAL_USART_Write_Data>
  }
  return 0;
}
   d5f24:	4628      	mov	r0, r5
   d5f26:	bd70      	pop	{r4, r5, r6, pc}

000d5f28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5f28:	b510      	push	{r4, lr}
   d5f2a:	4604      	mov	r4, r0
   d5f2c:	4608      	mov	r0, r1
   d5f2e:	4611      	mov	r1, r2
   d5f30:	2200      	movs	r2, #0
   d5f32:	6062      	str	r2, [r4, #4]
   d5f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f38:	60a2      	str	r2, [r4, #8]
   d5f3a:	4a05      	ldr	r2, [pc, #20]	; (d5f50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5f3c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5f3e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5f40:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5f42:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5f44:	461a      	mov	r2, r3
   d5f46:	f7ff f9c9 	bl	d52dc <HAL_USART_Init>
}
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	bd10      	pop	{r4, pc}
   d5f4e:	bf00      	nop
   d5f50:	000d8ef0 	.word	0x000d8ef0

000d5f54 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5f54:	7c00      	ldrb	r0, [r0, #16]
   d5f56:	f7ff b9f1 	b.w	d533c <HAL_USART_Is_Enabled>
	...

000d5f5c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5f5c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5f5e:	4d0c      	ldr	r5, [pc, #48]	; (d5f90 <_Z22__fetch_global_Serial1v+0x34>)
   d5f60:	6829      	ldr	r1, [r5, #0]
   d5f62:	f011 0401 	ands.w	r4, r1, #1
   d5f66:	d111      	bne.n	d5f8c <_Z22__fetch_global_Serial1v+0x30>
   d5f68:	4628      	mov	r0, r5
   d5f6a:	f7fe f898 	bl	d409e <__cxa_guard_acquire>
   d5f6e:	b168      	cbz	r0, d5f8c <_Z22__fetch_global_Serial1v+0x30>
   d5f70:	4a08      	ldr	r2, [pc, #32]	; (d5f94 <_Z22__fetch_global_Serial1v+0x38>)
   d5f72:	4b09      	ldr	r3, [pc, #36]	; (d5f98 <_Z22__fetch_global_Serial1v+0x3c>)
   d5f74:	4809      	ldr	r0, [pc, #36]	; (d5f9c <_Z22__fetch_global_Serial1v+0x40>)
   d5f76:	4621      	mov	r1, r4
   d5f78:	f7ff ffd6 	bl	d5f28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5f7c:	4628      	mov	r0, r5
   d5f7e:	f7fe f893 	bl	d40a8 <__cxa_guard_release>
   d5f82:	4a07      	ldr	r2, [pc, #28]	; (d5fa0 <_Z22__fetch_global_Serial1v+0x44>)
   d5f84:	4907      	ldr	r1, [pc, #28]	; (d5fa4 <_Z22__fetch_global_Serial1v+0x48>)
   d5f86:	4805      	ldr	r0, [pc, #20]	; (d5f9c <_Z22__fetch_global_Serial1v+0x40>)
   d5f88:	f000 f9e8 	bl	d635c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5f8c:	4803      	ldr	r0, [pc, #12]	; (d5f9c <_Z22__fetch_global_Serial1v+0x40>)
   d5f8e:	bd38      	pop	{r3, r4, r5, pc}
   d5f90:	2003e4b8 	.word	0x2003e4b8
   d5f94:	2003e4bc 	.word	0x2003e4bc
   d5f98:	2003e434 	.word	0x2003e434
   d5f9c:	2003e420 	.word	0x2003e420
   d5fa0:	2003e2a8 	.word	0x2003e2a8
   d5fa4:	000d5ed5 	.word	0x000d5ed5

000d5fa8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5fa8:	4770      	bx	lr

000d5faa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fac:	4606      	mov	r6, r0
   d5fae:	4615      	mov	r5, r2
   d5fb0:	460c      	mov	r4, r1
   d5fb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5fb4:	42bc      	cmp	r4, r7
   d5fb6:	d006      	beq.n	d5fc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5fb8:	6833      	ldr	r3, [r6, #0]
   d5fba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5fbe:	689b      	ldr	r3, [r3, #8]
   d5fc0:	4630      	mov	r0, r6
   d5fc2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5fc4:	e7f6      	b.n	d5fb4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5fc6:	4628      	mov	r0, r5
   d5fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5fca:	2200      	movs	r2, #0
   d5fcc:	7c00      	ldrb	r0, [r0, #16]
   d5fce:	f7ff b9c5 	b.w	d535c <HAL_I2C_Write_Data>

000d5fd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5fd2:	2100      	movs	r1, #0
   d5fd4:	7c00      	ldrb	r0, [r0, #16]
   d5fd6:	f7ff b9c9 	b.w	d536c <HAL_I2C_Available_Data>

000d5fda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5fda:	2100      	movs	r1, #0
   d5fdc:	7c00      	ldrb	r0, [r0, #16]
   d5fde:	f7ff b9cd 	b.w	d537c <HAL_I2C_Read_Data>

000d5fe2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5fe2:	2100      	movs	r1, #0
   d5fe4:	7c00      	ldrb	r0, [r0, #16]
   d5fe6:	f7ff b9d1 	b.w	d538c <HAL_I2C_Peek_Data>

000d5fea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5fea:	2100      	movs	r1, #0
   d5fec:	7c00      	ldrb	r0, [r0, #16]
   d5fee:	f7ff b9d5 	b.w	d539c <HAL_I2C_Flush_Data>

000d5ff2 <_ZN7TwoWireD0Ev>:
   d5ff2:	b510      	push	{r4, lr}
   d5ff4:	4604      	mov	r4, r0
   d5ff6:	f7fe f84e 	bl	d4096 <_ZdlPv>
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	bd10      	pop	{r4, pc}
	...

000d6000 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6000:	b510      	push	{r4, lr}
   d6002:	4604      	mov	r4, r0
   d6004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6008:	4608      	mov	r0, r1
   d600a:	60a3      	str	r3, [r4, #8]
   d600c:	2100      	movs	r1, #0
   d600e:	4b04      	ldr	r3, [pc, #16]	; (d6020 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6010:	7420      	strb	r0, [r4, #16]
   d6012:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6014:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6016:	f7ff f9d1 	bl	d53bc <HAL_I2C_Init>

}
   d601a:	4620      	mov	r0, r4
   d601c:	bd10      	pop	{r4, pc}
   d601e:	bf00      	nop
   d6020:	000d8f20 	.word	0x000d8f20

000d6024 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6024:	2100      	movs	r1, #0
   d6026:	7c00      	ldrb	r0, [r0, #16]
   d6028:	f7ff b9c0 	b.w	d53ac <HAL_I2C_Is_Enabled>

000d602c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d602c:	2200      	movs	r2, #0
   d602e:	4611      	mov	r1, r2
   d6030:	6840      	ldr	r0, [r0, #4]
   d6032:	f7ff ba67 	b.w	d5504 <network_listening>

000d6036 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6036:	2200      	movs	r2, #0
   d6038:	4611      	mov	r1, r2
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7ff ba72 	b.w	d5524 <network_get_listen_timeout>

000d6040 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6040:	2200      	movs	r2, #0
   d6042:	6840      	ldr	r0, [r0, #4]
   d6044:	f7ff ba66 	b.w	d5514 <network_set_listen_timeout>

000d6048 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6048:	2200      	movs	r2, #0
   d604a:	f081 0101 	eor.w	r1, r1, #1
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff ba50 	b.w	d54f4 <network_listen>

000d6054 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6054:	2300      	movs	r3, #0
   d6056:	461a      	mov	r2, r3
   d6058:	4619      	mov	r1, r3
   d605a:	6840      	ldr	r0, [r0, #4]
   d605c:	f7ff ba42 	b.w	d54e4 <network_off>

000d6060 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6060:	2300      	movs	r3, #0
   d6062:	461a      	mov	r2, r3
   d6064:	4619      	mov	r1, r3
   d6066:	6840      	ldr	r0, [r0, #4]
   d6068:	f7ff ba34 	b.w	d54d4 <network_on>

000d606c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d606c:	2200      	movs	r2, #0
   d606e:	4611      	mov	r1, r2
   d6070:	6840      	ldr	r0, [r0, #4]
   d6072:	f7ff ba27 	b.w	d54c4 <network_ready>

000d6076 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6076:	2200      	movs	r2, #0
   d6078:	4611      	mov	r1, r2
   d607a:	6840      	ldr	r0, [r0, #4]
   d607c:	f7ff ba12 	b.w	d54a4 <network_connecting>

000d6080 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6080:	2200      	movs	r2, #0
   d6082:	2102      	movs	r1, #2
   d6084:	6840      	ldr	r0, [r0, #4]
   d6086:	f7ff ba15 	b.w	d54b4 <network_disconnect>

000d608a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d608a:	2300      	movs	r3, #0
   d608c:	461a      	mov	r2, r3
   d608e:	6840      	ldr	r0, [r0, #4]
   d6090:	f7ff ba00 	b.w	d5494 <network_connect>

000d6094 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6094:	b110      	cbz	r0, d609c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6096:	6803      	ldr	r3, [r0, #0]
   d6098:	685b      	ldr	r3, [r3, #4]
   d609a:	4718      	bx	r3
   d609c:	4770      	bx	lr

000d609e <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d609e:	b538      	push	{r3, r4, r5, lr}
   d60a0:	4604      	mov	r4, r0
   d60a2:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d60a4:	b1d0      	cbz	r0, d60dc <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d60a6:	f7ff f8e9 	bl	d527c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d60aa:	b9b8      	cbnz	r0, d60dc <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d60ac:	7c23      	ldrb	r3, [r4, #16]
   d60ae:	b91b      	cbnz	r3, d60b8 <_ZN6Thread7disposeEv+0x1a>
   d60b0:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d60b2:	b108      	cbz	r0, d60b8 <_ZN6Thread7disposeEv+0x1a>
   d60b4:	f7ff f8ea 	bl	d528c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d60b8:	6865      	ldr	r5, [r4, #4]
   d60ba:	b155      	cbz	r5, d60d2 <_ZN6Thread7disposeEv+0x34>

    ~_Function_base()
    {
      if (_M_manager)
   d60bc:	68ab      	ldr	r3, [r5, #8]
   d60be:	b11b      	cbz	r3, d60c8 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60c0:	2203      	movs	r2, #3
   d60c2:	4629      	mov	r1, r5
   d60c4:	4628      	mov	r0, r5
   d60c6:	4798      	blx	r3
            delete wrapper;
   d60c8:	4628      	mov	r0, r5
   d60ca:	f7fd ffe4 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d60ce:	2300      	movs	r3, #0
   d60d0:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d60d2:	6820      	ldr	r0, [r4, #0]
   d60d4:	f7ff f8e2 	bl	d529c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d60d8:	2300      	movs	r3, #0
   d60da:	6023      	str	r3, [r4, #0]
   d60dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d60e0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d60e0:	b538      	push	{r3, r4, r5, lr}
   d60e2:	4b0b      	ldr	r3, [pc, #44]	; (d6110 <_ZN5spark9MeshClassD1Ev+0x30>)
   d60e4:	6003      	str	r3, [r0, #0]
   d60e6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60e8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d60ec:	b108      	cbz	r0, d60f2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d60ee:	f7fd ffd4 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60f2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d60f6:	b12d      	cbz	r5, d6104 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d60f8:	4628      	mov	r0, r5
   d60fa:	f7ff ffd0 	bl	d609e <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60fe:	4628      	mov	r0, r5
   d6100:	f7fd ffc9 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6104:	68a0      	ldr	r0, [r4, #8]
   d6106:	b108      	cbz	r0, d610c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d6108:	f7ff ffc4 	bl	d6094 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d610c:	4620      	mov	r0, r4
   d610e:	bd38      	pop	{r3, r4, r5, pc}
   d6110:	000d8f48 	.word	0x000d8f48

000d6114 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6114:	b538      	push	{r3, r4, r5, lr}
   d6116:	4c0d      	ldr	r4, [pc, #52]	; (d614c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6118:	4b0d      	ldr	r3, [pc, #52]	; (d6150 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d611a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d611c:	2500      	movs	r5, #0
   d611e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6120:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6124:	6063      	str	r3, [r4, #4]
   d6126:	60a5      	str	r5, [r4, #8]
   d6128:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d612c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6130:	f7ff f8c4 	bl	d52bc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6134:	4b07      	ldr	r3, [pc, #28]	; (d6154 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6136:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d613a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d613c:	4620      	mov	r0, r4
   d613e:	4a06      	ldr	r2, [pc, #24]	; (d6158 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6140:	4906      	ldr	r1, [pc, #24]	; (d615c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6146:	f000 b909 	b.w	d635c <__aeabi_atexit>
   d614a:	bf00      	nop
   d614c:	2003e540 	.word	0x2003e540
   d6150:	000d8f7c 	.word	0x000d8f7c
   d6154:	000d8f48 	.word	0x000d8f48
   d6158:	2003e2a8 	.word	0x2003e2a8
   d615c:	000d60e1 	.word	0x000d60e1

000d6160 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6160:	2300      	movs	r3, #0
   d6162:	461a      	mov	r2, r3
   d6164:	6840      	ldr	r0, [r0, #4]
   d6166:	f7ff b995 	b.w	d5494 <network_connect>

000d616a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d616a:	2200      	movs	r2, #0
   d616c:	2102      	movs	r1, #2
   d616e:	6840      	ldr	r0, [r0, #4]
   d6170:	f7ff b9a0 	b.w	d54b4 <network_disconnect>

000d6174 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6174:	2200      	movs	r2, #0
   d6176:	4611      	mov	r1, r2
   d6178:	6840      	ldr	r0, [r0, #4]
   d617a:	f7ff b993 	b.w	d54a4 <network_connecting>

000d617e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d617e:	2200      	movs	r2, #0
   d6180:	4611      	mov	r1, r2
   d6182:	6840      	ldr	r0, [r0, #4]
   d6184:	f7ff b99e 	b.w	d54c4 <network_ready>

000d6188 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6188:	2300      	movs	r3, #0
   d618a:	461a      	mov	r2, r3
   d618c:	4619      	mov	r1, r3
   d618e:	6840      	ldr	r0, [r0, #4]
   d6190:	f7ff b9a0 	b.w	d54d4 <network_on>

000d6194 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6194:	2300      	movs	r3, #0
   d6196:	461a      	mov	r2, r3
   d6198:	4619      	mov	r1, r3
   d619a:	6840      	ldr	r0, [r0, #4]
   d619c:	f7ff b9a2 	b.w	d54e4 <network_off>

000d61a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d61a0:	2200      	movs	r2, #0
   d61a2:	f081 0101 	eor.w	r1, r1, #1
   d61a6:	6840      	ldr	r0, [r0, #4]
   d61a8:	f7ff b9a4 	b.w	d54f4 <network_listen>

000d61ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d61ac:	2200      	movs	r2, #0
   d61ae:	6840      	ldr	r0, [r0, #4]
   d61b0:	f7ff b9b0 	b.w	d5514 <network_set_listen_timeout>

000d61b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d61b4:	2200      	movs	r2, #0
   d61b6:	4611      	mov	r1, r2
   d61b8:	6840      	ldr	r0, [r0, #4]
   d61ba:	f7ff b9b3 	b.w	d5524 <network_get_listen_timeout>

000d61be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d61be:	2200      	movs	r2, #0
   d61c0:	4611      	mov	r1, r2
   d61c2:	6840      	ldr	r0, [r0, #4]
   d61c4:	f7ff b99e 	b.w	d5504 <network_listening>

000d61c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d61c8:	b570      	push	{r4, r5, r6, lr}
   d61ca:	b08c      	sub	sp, #48	; 0x30
   d61cc:	4614      	mov	r4, r2
   d61ce:	4606      	mov	r6, r0
    IPAddress addr;
   d61d0:	f7ff fdd4 	bl	d5d7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61d4:	ab0c      	add	r3, sp, #48	; 0x30
   d61d6:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d61d8:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61da:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d61de:	4620      	mov	r0, r4
   d61e0:	f7ff f804 	bl	d51ec <netdb_getaddrinfo>
    if (!r && ai) {
   d61e4:	4601      	mov	r1, r0
   d61e6:	bb58      	cbnz	r0, d6240 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d61e8:	9b00      	ldr	r3, [sp, #0]
   d61ea:	b34b      	cbz	r3, d6240 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d61ec:	685a      	ldr	r2, [r3, #4]
   d61ee:	2a02      	cmp	r2, #2
   d61f0:	d00e      	beq.n	d6210 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d61f2:	2a0a      	cmp	r2, #10
   d61f4:	d124      	bne.n	d6240 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d61f6:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d61f8:	2211      	movs	r2, #17
   d61fa:	a801      	add	r0, sp, #4
   d61fc:	f000 ff19 	bl	d7032 <memset>
                a.v = 6;
   d6200:	2306      	movs	r3, #6
   d6202:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6206:	ad01      	add	r5, sp, #4
   d6208:	f104 0308 	add.w	r3, r4, #8
   d620c:	3418      	adds	r4, #24
   d620e:	e005      	b.n	d621c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6210:	6959      	ldr	r1, [r3, #20]
   d6212:	4630      	mov	r0, r6
   d6214:	3104      	adds	r1, #4
   d6216:	f7ff fdde 	bl	d5dd6 <_ZN9IPAddressaSEPKh>
                break;
   d621a:	e011      	b.n	d6240 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d621c:	6818      	ldr	r0, [r3, #0]
   d621e:	6859      	ldr	r1, [r3, #4]
   d6220:	462a      	mov	r2, r5
   d6222:	c203      	stmia	r2!, {r0, r1}
   d6224:	3308      	adds	r3, #8
   d6226:	42a3      	cmp	r3, r4
   d6228:	4615      	mov	r5, r2
   d622a:	d1f7      	bne.n	d621c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d622c:	a901      	add	r1, sp, #4
   d622e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6230:	ad07      	add	r5, sp, #28
   d6232:	f7ff fdb1 	bl	d5d98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6238:	1d34      	adds	r4, r6, #4
   d623a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d623c:	682b      	ldr	r3, [r5, #0]
   d623e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d6240:	9800      	ldr	r0, [sp, #0]
   d6242:	f7fe ffcb 	bl	d51dc <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6246:	4630      	mov	r0, r6
   d6248:	b00c      	add	sp, #48	; 0x30
   d624a:	bd70      	pop	{r4, r5, r6, pc}

000d624c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d624c:	4b02      	ldr	r3, [pc, #8]	; (d6258 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d624e:	4a03      	ldr	r2, [pc, #12]	; (d625c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6250:	601a      	str	r2, [r3, #0]
   d6252:	2200      	movs	r2, #0
   d6254:	605a      	str	r2, [r3, #4]
   d6256:	4770      	bx	lr
   d6258:	2003e710 	.word	0x2003e710
   d625c:	000d8f7c 	.word	0x000d8f7c

000d6260 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6260:	b510      	push	{r4, lr}
   d6262:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6264:	480f      	ldr	r0, [pc, #60]	; (d62a4 <pinAvailable+0x44>)
   d6266:	f7ff fa07 	bl	d5678 <_ZN8SPIClass9isEnabledEv>
   d626a:	b128      	cbz	r0, d6278 <pinAvailable+0x18>
   d626c:	f1a4 030b 	sub.w	r3, r4, #11
   d6270:	2b02      	cmp	r3, #2
   d6272:	d801      	bhi.n	d6278 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6274:	2000      	movs	r0, #0
   d6276:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6278:	f000 f850 	bl	d631c <_Z19__fetch_global_Wirev>
   d627c:	f7ff fed2 	bl	d6024 <_ZN7TwoWire9isEnabledEv>
   d6280:	b108      	cbz	r0, d6286 <pinAvailable+0x26>
   d6282:	2c01      	cmp	r4, #1
   d6284:	d9f6      	bls.n	d6274 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6286:	f7ff fe69 	bl	d5f5c <_Z22__fetch_global_Serial1v>
   d628a:	f7ff fe63 	bl	d5f54 <_ZN11USARTSerial9isEnabledEv>
   d628e:	b118      	cbz	r0, d6298 <pinAvailable+0x38>
   d6290:	f1a4 0309 	sub.w	r3, r4, #9
   d6294:	2b01      	cmp	r3, #1
   d6296:	d9ed      	bls.n	d6274 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6298:	2c1e      	cmp	r4, #30
   d629a:	bf8c      	ite	hi
   d629c:	2000      	movhi	r0, #0
   d629e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d62a0:	bd10      	pop	{r4, pc}
   d62a2:	bf00      	nop
   d62a4:	2003e718 	.word	0x2003e718

000d62a8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d62a8:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d62aa:	b510      	push	{r4, lr}
   d62ac:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d62ae:	bf9c      	itt	ls
   d62b0:	340e      	addls	r4, #14
   d62b2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62b4:	4620      	mov	r0, r4
   d62b6:	f7ff ffd3 	bl	d6260 <pinAvailable>
   d62ba:	b150      	cbz	r0, d62d2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d62bc:	2103      	movs	r1, #3
   d62be:	4620      	mov	r0, r4
   d62c0:	f7fe ffa4 	bl	d520c <HAL_Validate_Pin_Function>
   d62c4:	2803      	cmp	r0, #3
   d62c6:	d104      	bne.n	d62d2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d62c8:	4620      	mov	r0, r4
}
   d62ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d62ce:	f7fe bfa5 	b.w	d521c <HAL_ADC_Read>
}
   d62d2:	2000      	movs	r0, #0
   d62d4:	bd10      	pop	{r4, pc}
	...

000d62d8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d62d8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d62da:	4c0c      	ldr	r4, [pc, #48]	; (d630c <_GLOBAL__sub_I_SPI+0x34>)
   d62dc:	4e0c      	ldr	r6, [pc, #48]	; (d6310 <_GLOBAL__sub_I_SPI+0x38>)
   d62de:	4d0d      	ldr	r5, [pc, #52]	; (d6314 <_GLOBAL__sub_I_SPI+0x3c>)
   d62e0:	2100      	movs	r1, #0
   d62e2:	4620      	mov	r0, r4
   d62e4:	f7ff f9b4 	bl	d5650 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d62e8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d62ea:	4c0b      	ldr	r4, [pc, #44]	; (d6318 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d62ec:	4632      	mov	r2, r6
   d62ee:	4629      	mov	r1, r5
   d62f0:	f000 f834 	bl	d635c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d62f4:	2101      	movs	r1, #1
   d62f6:	4620      	mov	r0, r4
   d62f8:	f7ff f9aa 	bl	d5650 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d62fc:	4632      	mov	r2, r6
   d62fe:	4629      	mov	r1, r5
   d6300:	4620      	mov	r0, r4
   d6302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6306:	f000 b829 	b.w	d635c <__aeabi_atexit>
   d630a:	bf00      	nop
   d630c:	2003e718 	.word	0x2003e718
   d6310:	2003e2a8 	.word	0x2003e2a8
   d6314:	000d5641 	.word	0x000d5641
   d6318:	2003e728 	.word	0x2003e728

000d631c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d631c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d631e:	4d0b      	ldr	r5, [pc, #44]	; (d634c <_Z19__fetch_global_Wirev+0x30>)
   d6320:	6829      	ldr	r1, [r5, #0]
   d6322:	f011 0401 	ands.w	r4, r1, #1
   d6326:	d10f      	bne.n	d6348 <_Z19__fetch_global_Wirev+0x2c>
   d6328:	4628      	mov	r0, r5
   d632a:	f7fd feb8 	bl	d409e <__cxa_guard_acquire>
   d632e:	b158      	cbz	r0, d6348 <_Z19__fetch_global_Wirev+0x2c>
   d6330:	4621      	mov	r1, r4
   d6332:	4807      	ldr	r0, [pc, #28]	; (d6350 <_Z19__fetch_global_Wirev+0x34>)
   d6334:	f7ff fe64 	bl	d6000 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6338:	4628      	mov	r0, r5
   d633a:	f7fd feb5 	bl	d40a8 <__cxa_guard_release>
   d633e:	4a05      	ldr	r2, [pc, #20]	; (d6354 <_Z19__fetch_global_Wirev+0x38>)
   d6340:	4905      	ldr	r1, [pc, #20]	; (d6358 <_Z19__fetch_global_Wirev+0x3c>)
   d6342:	4803      	ldr	r0, [pc, #12]	; (d6350 <_Z19__fetch_global_Wirev+0x34>)
   d6344:	f000 f80a 	bl	d635c <__aeabi_atexit>
	return wire;
}
   d6348:	4801      	ldr	r0, [pc, #4]	; (d6350 <_Z19__fetch_global_Wirev+0x34>)
   d634a:	bd38      	pop	{r3, r4, r5, pc}
   d634c:	2003e73c 	.word	0x2003e73c
   d6350:	2003e740 	.word	0x2003e740
   d6354:	2003e2a8 	.word	0x2003e2a8
   d6358:	000d5fa9 	.word	0x000d5fa9

000d635c <__aeabi_atexit>:
   d635c:	460b      	mov	r3, r1
   d635e:	4601      	mov	r1, r0
   d6360:	4618      	mov	r0, r3
   d6362:	f000 be49 	b.w	d6ff8 <__cxa_atexit>
	...

000d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6368:	4b18      	ldr	r3, [pc, #96]	; (d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d1      	lsls	r1, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4b16      	ldr	r3, [pc, #88]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d2      	lsls	r2, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b14      	ldr	r3, [pc, #80]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d0      	lsls	r0, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b12      	ldr	r3, [pc, #72]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d1      	lsls	r1, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4b10      	ldr	r3, [pc, #64]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d639a:	681a      	ldr	r2, [r3, #0]
   d639c:	07d2      	lsls	r2, r2, #31
   d639e:	bf5c      	itt	pl
   d63a0:	2201      	movpl	r2, #1
   d63a2:	601a      	strpl	r2, [r3, #0]
   d63a4:	4b0e      	ldr	r3, [pc, #56]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d0      	lsls	r0, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b0c      	ldr	r3, [pc, #48]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d1      	lsls	r1, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b0a      	ldr	r3, [pc, #40]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d2      	lsls	r2, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4770      	bx	lr
   d63ca:	bf00      	nop
   d63cc:	2003e770 	.word	0x2003e770
   d63d0:	2003e76c 	.word	0x2003e76c
   d63d4:	2003e768 	.word	0x2003e768
   d63d8:	2003e764 	.word	0x2003e764
   d63dc:	2003e760 	.word	0x2003e760
   d63e0:	2003e75c 	.word	0x2003e75c
   d63e4:	2003e758 	.word	0x2003e758
   d63e8:	2003e754 	.word	0x2003e754

000d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d63ec:	4b24      	ldr	r3, [pc, #144]	; (d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d0      	lsls	r0, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4b22      	ldr	r3, [pc, #136]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d1      	lsls	r1, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4b20      	ldr	r3, [pc, #128]	; (d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6406:	681a      	ldr	r2, [r3, #0]
   d6408:	07d2      	lsls	r2, r2, #31
   d640a:	bf5c      	itt	pl
   d640c:	2201      	movpl	r2, #1
   d640e:	601a      	strpl	r2, [r3, #0]
   d6410:	4b1e      	ldr	r3, [pc, #120]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6412:	681a      	ldr	r2, [r3, #0]
   d6414:	07d0      	lsls	r0, r2, #31
   d6416:	bf5c      	itt	pl
   d6418:	2201      	movpl	r2, #1
   d641a:	601a      	strpl	r2, [r3, #0]
   d641c:	4b1c      	ldr	r3, [pc, #112]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d1      	lsls	r1, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b1a      	ldr	r3, [pc, #104]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d2      	lsls	r2, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b18      	ldr	r3, [pc, #96]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d0      	lsls	r0, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b16      	ldr	r3, [pc, #88]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d1      	lsls	r1, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4b14      	ldr	r3, [pc, #80]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d644e:	681a      	ldr	r2, [r3, #0]
   d6450:	07d2      	lsls	r2, r2, #31
   d6452:	bf5c      	itt	pl
   d6454:	2201      	movpl	r2, #1
   d6456:	601a      	strpl	r2, [r3, #0]
   d6458:	4b12      	ldr	r3, [pc, #72]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d645a:	681a      	ldr	r2, [r3, #0]
   d645c:	07d0      	lsls	r0, r2, #31
   d645e:	bf5c      	itt	pl
   d6460:	2201      	movpl	r2, #1
   d6462:	601a      	strpl	r2, [r3, #0]
   d6464:	4b10      	ldr	r3, [pc, #64]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6466:	681a      	ldr	r2, [r3, #0]
   d6468:	07d1      	lsls	r1, r2, #31
   d646a:	bf5c      	itt	pl
   d646c:	2201      	movpl	r2, #1
   d646e:	601a      	strpl	r2, [r3, #0]
   d6470:	4b0e      	ldr	r3, [pc, #56]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d2      	lsls	r2, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4770      	bx	lr
   d647e:	bf00      	nop
   d6480:	2003e7a0 	.word	0x2003e7a0
   d6484:	2003e79c 	.word	0x2003e79c
   d6488:	2003e798 	.word	0x2003e798
   d648c:	2003e794 	.word	0x2003e794
   d6490:	2003e790 	.word	0x2003e790
   d6494:	2003e78c 	.word	0x2003e78c
   d6498:	2003e788 	.word	0x2003e788
   d649c:	2003e784 	.word	0x2003e784
   d64a0:	2003e780 	.word	0x2003e780
   d64a4:	2003e77c 	.word	0x2003e77c
   d64a8:	2003e778 	.word	0x2003e778
   d64ac:	2003e774 	.word	0x2003e774

000d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d64b0:	4b24      	ldr	r3, [pc, #144]	; (d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d64b2:	681a      	ldr	r2, [r3, #0]
   d64b4:	07d0      	lsls	r0, r2, #31
   d64b6:	bf5c      	itt	pl
   d64b8:	2201      	movpl	r2, #1
   d64ba:	601a      	strpl	r2, [r3, #0]
   d64bc:	4b22      	ldr	r3, [pc, #136]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d64be:	681a      	ldr	r2, [r3, #0]
   d64c0:	07d1      	lsls	r1, r2, #31
   d64c2:	bf5c      	itt	pl
   d64c4:	2201      	movpl	r2, #1
   d64c6:	601a      	strpl	r2, [r3, #0]
   d64c8:	4b20      	ldr	r3, [pc, #128]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d64ca:	681a      	ldr	r2, [r3, #0]
   d64cc:	07d2      	lsls	r2, r2, #31
   d64ce:	bf5c      	itt	pl
   d64d0:	2201      	movpl	r2, #1
   d64d2:	601a      	strpl	r2, [r3, #0]
   d64d4:	4b1e      	ldr	r3, [pc, #120]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d64d6:	681a      	ldr	r2, [r3, #0]
   d64d8:	07d0      	lsls	r0, r2, #31
   d64da:	bf5c      	itt	pl
   d64dc:	2201      	movpl	r2, #1
   d64de:	601a      	strpl	r2, [r3, #0]
   d64e0:	4b1c      	ldr	r3, [pc, #112]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d64e2:	681a      	ldr	r2, [r3, #0]
   d64e4:	07d1      	lsls	r1, r2, #31
   d64e6:	bf5c      	itt	pl
   d64e8:	2201      	movpl	r2, #1
   d64ea:	601a      	strpl	r2, [r3, #0]
   d64ec:	4b1a      	ldr	r3, [pc, #104]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d64ee:	681a      	ldr	r2, [r3, #0]
   d64f0:	07d2      	lsls	r2, r2, #31
   d64f2:	bf5c      	itt	pl
   d64f4:	2201      	movpl	r2, #1
   d64f6:	601a      	strpl	r2, [r3, #0]
   d64f8:	4b18      	ldr	r3, [pc, #96]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d64fa:	681a      	ldr	r2, [r3, #0]
   d64fc:	07d0      	lsls	r0, r2, #31
   d64fe:	bf5c      	itt	pl
   d6500:	2201      	movpl	r2, #1
   d6502:	601a      	strpl	r2, [r3, #0]
   d6504:	4b16      	ldr	r3, [pc, #88]	; (d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6506:	681a      	ldr	r2, [r3, #0]
   d6508:	07d1      	lsls	r1, r2, #31
   d650a:	bf5c      	itt	pl
   d650c:	2201      	movpl	r2, #1
   d650e:	601a      	strpl	r2, [r3, #0]
   d6510:	4b14      	ldr	r3, [pc, #80]	; (d6564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6512:	681a      	ldr	r2, [r3, #0]
   d6514:	07d2      	lsls	r2, r2, #31
   d6516:	bf5c      	itt	pl
   d6518:	2201      	movpl	r2, #1
   d651a:	601a      	strpl	r2, [r3, #0]
   d651c:	4b12      	ldr	r3, [pc, #72]	; (d6568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d651e:	681a      	ldr	r2, [r3, #0]
   d6520:	07d0      	lsls	r0, r2, #31
   d6522:	bf5c      	itt	pl
   d6524:	2201      	movpl	r2, #1
   d6526:	601a      	strpl	r2, [r3, #0]
   d6528:	4b10      	ldr	r3, [pc, #64]	; (d656c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d652a:	681a      	ldr	r2, [r3, #0]
   d652c:	07d1      	lsls	r1, r2, #31
   d652e:	bf5c      	itt	pl
   d6530:	2201      	movpl	r2, #1
   d6532:	601a      	strpl	r2, [r3, #0]
   d6534:	4b0e      	ldr	r3, [pc, #56]	; (d6570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6536:	681a      	ldr	r2, [r3, #0]
   d6538:	07d2      	lsls	r2, r2, #31
   d653a:	bf5c      	itt	pl
   d653c:	2201      	movpl	r2, #1
   d653e:	601a      	strpl	r2, [r3, #0]
   d6540:	4770      	bx	lr
   d6542:	bf00      	nop
   d6544:	2003e7d0 	.word	0x2003e7d0
   d6548:	2003e7cc 	.word	0x2003e7cc
   d654c:	2003e7c8 	.word	0x2003e7c8
   d6550:	2003e7c4 	.word	0x2003e7c4
   d6554:	2003e7c0 	.word	0x2003e7c0
   d6558:	2003e7bc 	.word	0x2003e7bc
   d655c:	2003e7b8 	.word	0x2003e7b8
   d6560:	2003e7b4 	.word	0x2003e7b4
   d6564:	2003e7b0 	.word	0x2003e7b0
   d6568:	2003e7ac 	.word	0x2003e7ac
   d656c:	2003e7a8 	.word	0x2003e7a8
   d6570:	2003e7a4 	.word	0x2003e7a4

000d6574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6574:	4b18      	ldr	r3, [pc, #96]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d1      	lsls	r1, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4b16      	ldr	r3, [pc, #88]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	07d2      	lsls	r2, r2, #31
   d6586:	bf5c      	itt	pl
   d6588:	2201      	movpl	r2, #1
   d658a:	601a      	strpl	r2, [r3, #0]
   d658c:	4b14      	ldr	r3, [pc, #80]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	07d0      	lsls	r0, r2, #31
   d6592:	bf5c      	itt	pl
   d6594:	2201      	movpl	r2, #1
   d6596:	601a      	strpl	r2, [r3, #0]
   d6598:	4b12      	ldr	r3, [pc, #72]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d659a:	681a      	ldr	r2, [r3, #0]
   d659c:	07d1      	lsls	r1, r2, #31
   d659e:	bf5c      	itt	pl
   d65a0:	2201      	movpl	r2, #1
   d65a2:	601a      	strpl	r2, [r3, #0]
   d65a4:	4b10      	ldr	r3, [pc, #64]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d65a6:	681a      	ldr	r2, [r3, #0]
   d65a8:	07d2      	lsls	r2, r2, #31
   d65aa:	bf5c      	itt	pl
   d65ac:	2201      	movpl	r2, #1
   d65ae:	601a      	strpl	r2, [r3, #0]
   d65b0:	4b0e      	ldr	r3, [pc, #56]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d65b2:	681a      	ldr	r2, [r3, #0]
   d65b4:	07d0      	lsls	r0, r2, #31
   d65b6:	bf5c      	itt	pl
   d65b8:	2201      	movpl	r2, #1
   d65ba:	601a      	strpl	r2, [r3, #0]
   d65bc:	4b0c      	ldr	r3, [pc, #48]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65be:	681a      	ldr	r2, [r3, #0]
   d65c0:	07d1      	lsls	r1, r2, #31
   d65c2:	bf5c      	itt	pl
   d65c4:	2201      	movpl	r2, #1
   d65c6:	601a      	strpl	r2, [r3, #0]
   d65c8:	4b0a      	ldr	r3, [pc, #40]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d65ca:	681a      	ldr	r2, [r3, #0]
   d65cc:	07d2      	lsls	r2, r2, #31
   d65ce:	bf5c      	itt	pl
   d65d0:	2201      	movpl	r2, #1
   d65d2:	601a      	strpl	r2, [r3, #0]
   d65d4:	4770      	bx	lr
   d65d6:	bf00      	nop
   d65d8:	2003e7f0 	.word	0x2003e7f0
   d65dc:	2003e7ec 	.word	0x2003e7ec
   d65e0:	2003e7e8 	.word	0x2003e7e8
   d65e4:	2003e7e4 	.word	0x2003e7e4
   d65e8:	2003e7e0 	.word	0x2003e7e0
   d65ec:	2003e7dc 	.word	0x2003e7dc
   d65f0:	2003e7d8 	.word	0x2003e7d8
   d65f4:	2003e7d4 	.word	0x2003e7d4

000d65f8 <__aeabi_drsub>:
   d65f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d65fc:	e002      	b.n	d6604 <__adddf3>
   d65fe:	bf00      	nop

000d6600 <__aeabi_dsub>:
   d6600:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6604 <__adddf3>:
   d6604:	b530      	push	{r4, r5, lr}
   d6606:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d660a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d660e:	ea94 0f05 	teq	r4, r5
   d6612:	bf08      	it	eq
   d6614:	ea90 0f02 	teqeq	r0, r2
   d6618:	bf1f      	itttt	ne
   d661a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d661e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6622:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6626:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d662a:	f000 80e2 	beq.w	d67f2 <__adddf3+0x1ee>
   d662e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6632:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6636:	bfb8      	it	lt
   d6638:	426d      	neglt	r5, r5
   d663a:	dd0c      	ble.n	d6656 <__adddf3+0x52>
   d663c:	442c      	add	r4, r5
   d663e:	ea80 0202 	eor.w	r2, r0, r2
   d6642:	ea81 0303 	eor.w	r3, r1, r3
   d6646:	ea82 0000 	eor.w	r0, r2, r0
   d664a:	ea83 0101 	eor.w	r1, r3, r1
   d664e:	ea80 0202 	eor.w	r2, r0, r2
   d6652:	ea81 0303 	eor.w	r3, r1, r3
   d6656:	2d36      	cmp	r5, #54	; 0x36
   d6658:	bf88      	it	hi
   d665a:	bd30      	pophi	{r4, r5, pc}
   d665c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6660:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6664:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6668:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d666c:	d002      	beq.n	d6674 <__adddf3+0x70>
   d666e:	4240      	negs	r0, r0
   d6670:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6674:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6678:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d667c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6680:	d002      	beq.n	d6688 <__adddf3+0x84>
   d6682:	4252      	negs	r2, r2
   d6684:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6688:	ea94 0f05 	teq	r4, r5
   d668c:	f000 80a7 	beq.w	d67de <__adddf3+0x1da>
   d6690:	f1a4 0401 	sub.w	r4, r4, #1
   d6694:	f1d5 0e20 	rsbs	lr, r5, #32
   d6698:	db0d      	blt.n	d66b6 <__adddf3+0xb2>
   d669a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d669e:	fa22 f205 	lsr.w	r2, r2, r5
   d66a2:	1880      	adds	r0, r0, r2
   d66a4:	f141 0100 	adc.w	r1, r1, #0
   d66a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d66ac:	1880      	adds	r0, r0, r2
   d66ae:	fa43 f305 	asr.w	r3, r3, r5
   d66b2:	4159      	adcs	r1, r3
   d66b4:	e00e      	b.n	d66d4 <__adddf3+0xd0>
   d66b6:	f1a5 0520 	sub.w	r5, r5, #32
   d66ba:	f10e 0e20 	add.w	lr, lr, #32
   d66be:	2a01      	cmp	r2, #1
   d66c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d66c4:	bf28      	it	cs
   d66c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d66ca:	fa43 f305 	asr.w	r3, r3, r5
   d66ce:	18c0      	adds	r0, r0, r3
   d66d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d66d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d66d8:	d507      	bpl.n	d66ea <__adddf3+0xe6>
   d66da:	f04f 0e00 	mov.w	lr, #0
   d66de:	f1dc 0c00 	rsbs	ip, ip, #0
   d66e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d66e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d66ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d66ee:	d31b      	bcc.n	d6728 <__adddf3+0x124>
   d66f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d66f4:	d30c      	bcc.n	d6710 <__adddf3+0x10c>
   d66f6:	0849      	lsrs	r1, r1, #1
   d66f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d66fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6700:	f104 0401 	add.w	r4, r4, #1
   d6704:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6708:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d670c:	f080 809a 	bcs.w	d6844 <__adddf3+0x240>
   d6710:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6714:	bf08      	it	eq
   d6716:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d671a:	f150 0000 	adcs.w	r0, r0, #0
   d671e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6722:	ea41 0105 	orr.w	r1, r1, r5
   d6726:	bd30      	pop	{r4, r5, pc}
   d6728:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d672c:	4140      	adcs	r0, r0
   d672e:	eb41 0101 	adc.w	r1, r1, r1
   d6732:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6736:	f1a4 0401 	sub.w	r4, r4, #1
   d673a:	d1e9      	bne.n	d6710 <__adddf3+0x10c>
   d673c:	f091 0f00 	teq	r1, #0
   d6740:	bf04      	itt	eq
   d6742:	4601      	moveq	r1, r0
   d6744:	2000      	moveq	r0, #0
   d6746:	fab1 f381 	clz	r3, r1
   d674a:	bf08      	it	eq
   d674c:	3320      	addeq	r3, #32
   d674e:	f1a3 030b 	sub.w	r3, r3, #11
   d6752:	f1b3 0220 	subs.w	r2, r3, #32
   d6756:	da0c      	bge.n	d6772 <__adddf3+0x16e>
   d6758:	320c      	adds	r2, #12
   d675a:	dd08      	ble.n	d676e <__adddf3+0x16a>
   d675c:	f102 0c14 	add.w	ip, r2, #20
   d6760:	f1c2 020c 	rsb	r2, r2, #12
   d6764:	fa01 f00c 	lsl.w	r0, r1, ip
   d6768:	fa21 f102 	lsr.w	r1, r1, r2
   d676c:	e00c      	b.n	d6788 <__adddf3+0x184>
   d676e:	f102 0214 	add.w	r2, r2, #20
   d6772:	bfd8      	it	le
   d6774:	f1c2 0c20 	rsble	ip, r2, #32
   d6778:	fa01 f102 	lsl.w	r1, r1, r2
   d677c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6780:	bfdc      	itt	le
   d6782:	ea41 010c 	orrle.w	r1, r1, ip
   d6786:	4090      	lslle	r0, r2
   d6788:	1ae4      	subs	r4, r4, r3
   d678a:	bfa2      	ittt	ge
   d678c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6790:	4329      	orrge	r1, r5
   d6792:	bd30      	popge	{r4, r5, pc}
   d6794:	ea6f 0404 	mvn.w	r4, r4
   d6798:	3c1f      	subs	r4, #31
   d679a:	da1c      	bge.n	d67d6 <__adddf3+0x1d2>
   d679c:	340c      	adds	r4, #12
   d679e:	dc0e      	bgt.n	d67be <__adddf3+0x1ba>
   d67a0:	f104 0414 	add.w	r4, r4, #20
   d67a4:	f1c4 0220 	rsb	r2, r4, #32
   d67a8:	fa20 f004 	lsr.w	r0, r0, r4
   d67ac:	fa01 f302 	lsl.w	r3, r1, r2
   d67b0:	ea40 0003 	orr.w	r0, r0, r3
   d67b4:	fa21 f304 	lsr.w	r3, r1, r4
   d67b8:	ea45 0103 	orr.w	r1, r5, r3
   d67bc:	bd30      	pop	{r4, r5, pc}
   d67be:	f1c4 040c 	rsb	r4, r4, #12
   d67c2:	f1c4 0220 	rsb	r2, r4, #32
   d67c6:	fa20 f002 	lsr.w	r0, r0, r2
   d67ca:	fa01 f304 	lsl.w	r3, r1, r4
   d67ce:	ea40 0003 	orr.w	r0, r0, r3
   d67d2:	4629      	mov	r1, r5
   d67d4:	bd30      	pop	{r4, r5, pc}
   d67d6:	fa21 f004 	lsr.w	r0, r1, r4
   d67da:	4629      	mov	r1, r5
   d67dc:	bd30      	pop	{r4, r5, pc}
   d67de:	f094 0f00 	teq	r4, #0
   d67e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d67e6:	bf06      	itte	eq
   d67e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d67ec:	3401      	addeq	r4, #1
   d67ee:	3d01      	subne	r5, #1
   d67f0:	e74e      	b.n	d6690 <__adddf3+0x8c>
   d67f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67f6:	bf18      	it	ne
   d67f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d67fc:	d029      	beq.n	d6852 <__adddf3+0x24e>
   d67fe:	ea94 0f05 	teq	r4, r5
   d6802:	bf08      	it	eq
   d6804:	ea90 0f02 	teqeq	r0, r2
   d6808:	d005      	beq.n	d6816 <__adddf3+0x212>
   d680a:	ea54 0c00 	orrs.w	ip, r4, r0
   d680e:	bf04      	itt	eq
   d6810:	4619      	moveq	r1, r3
   d6812:	4610      	moveq	r0, r2
   d6814:	bd30      	pop	{r4, r5, pc}
   d6816:	ea91 0f03 	teq	r1, r3
   d681a:	bf1e      	ittt	ne
   d681c:	2100      	movne	r1, #0
   d681e:	2000      	movne	r0, #0
   d6820:	bd30      	popne	{r4, r5, pc}
   d6822:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6826:	d105      	bne.n	d6834 <__adddf3+0x230>
   d6828:	0040      	lsls	r0, r0, #1
   d682a:	4149      	adcs	r1, r1
   d682c:	bf28      	it	cs
   d682e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6832:	bd30      	pop	{r4, r5, pc}
   d6834:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6838:	bf3c      	itt	cc
   d683a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d683e:	bd30      	popcc	{r4, r5, pc}
   d6840:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6844:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d684c:	f04f 0000 	mov.w	r0, #0
   d6850:	bd30      	pop	{r4, r5, pc}
   d6852:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6856:	bf1a      	itte	ne
   d6858:	4619      	movne	r1, r3
   d685a:	4610      	movne	r0, r2
   d685c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6860:	bf1c      	itt	ne
   d6862:	460b      	movne	r3, r1
   d6864:	4602      	movne	r2, r0
   d6866:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d686a:	bf06      	itte	eq
   d686c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6870:	ea91 0f03 	teqeq	r1, r3
   d6874:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6878:	bd30      	pop	{r4, r5, pc}
   d687a:	bf00      	nop

000d687c <__aeabi_ui2d>:
   d687c:	f090 0f00 	teq	r0, #0
   d6880:	bf04      	itt	eq
   d6882:	2100      	moveq	r1, #0
   d6884:	4770      	bxeq	lr
   d6886:	b530      	push	{r4, r5, lr}
   d6888:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d688c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6890:	f04f 0500 	mov.w	r5, #0
   d6894:	f04f 0100 	mov.w	r1, #0
   d6898:	e750      	b.n	d673c <__adddf3+0x138>
   d689a:	bf00      	nop

000d689c <__aeabi_i2d>:
   d689c:	f090 0f00 	teq	r0, #0
   d68a0:	bf04      	itt	eq
   d68a2:	2100      	moveq	r1, #0
   d68a4:	4770      	bxeq	lr
   d68a6:	b530      	push	{r4, r5, lr}
   d68a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d68b4:	bf48      	it	mi
   d68b6:	4240      	negmi	r0, r0
   d68b8:	f04f 0100 	mov.w	r1, #0
   d68bc:	e73e      	b.n	d673c <__adddf3+0x138>
   d68be:	bf00      	nop

000d68c0 <__aeabi_f2d>:
   d68c0:	0042      	lsls	r2, r0, #1
   d68c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d68c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d68ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d68ce:	bf1f      	itttt	ne
   d68d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d68d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d68d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d68dc:	4770      	bxne	lr
   d68de:	f092 0f00 	teq	r2, #0
   d68e2:	bf14      	ite	ne
   d68e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d68e8:	4770      	bxeq	lr
   d68ea:	b530      	push	{r4, r5, lr}
   d68ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   d68f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d68f8:	e720      	b.n	d673c <__adddf3+0x138>
   d68fa:	bf00      	nop

000d68fc <__aeabi_ul2d>:
   d68fc:	ea50 0201 	orrs.w	r2, r0, r1
   d6900:	bf08      	it	eq
   d6902:	4770      	bxeq	lr
   d6904:	b530      	push	{r4, r5, lr}
   d6906:	f04f 0500 	mov.w	r5, #0
   d690a:	e00a      	b.n	d6922 <__aeabi_l2d+0x16>

000d690c <__aeabi_l2d>:
   d690c:	ea50 0201 	orrs.w	r2, r0, r1
   d6910:	bf08      	it	eq
   d6912:	4770      	bxeq	lr
   d6914:	b530      	push	{r4, r5, lr}
   d6916:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d691a:	d502      	bpl.n	d6922 <__aeabi_l2d+0x16>
   d691c:	4240      	negs	r0, r0
   d691e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6922:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6926:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d692a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d692e:	f43f aedc 	beq.w	d66ea <__adddf3+0xe6>
   d6932:	f04f 0203 	mov.w	r2, #3
   d6936:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d693a:	bf18      	it	ne
   d693c:	3203      	addne	r2, #3
   d693e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6942:	bf18      	it	ne
   d6944:	3203      	addne	r2, #3
   d6946:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d694a:	f1c2 0320 	rsb	r3, r2, #32
   d694e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6952:	fa20 f002 	lsr.w	r0, r0, r2
   d6956:	fa01 fe03 	lsl.w	lr, r1, r3
   d695a:	ea40 000e 	orr.w	r0, r0, lr
   d695e:	fa21 f102 	lsr.w	r1, r1, r2
   d6962:	4414      	add	r4, r2
   d6964:	e6c1      	b.n	d66ea <__adddf3+0xe6>
   d6966:	bf00      	nop

000d6968 <__aeabi_dmul>:
   d6968:	b570      	push	{r4, r5, r6, lr}
   d696a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d696e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6972:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6976:	bf1d      	ittte	ne
   d6978:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d697c:	ea94 0f0c 	teqne	r4, ip
   d6980:	ea95 0f0c 	teqne	r5, ip
   d6984:	f000 f8de 	bleq	d6b44 <__aeabi_dmul+0x1dc>
   d6988:	442c      	add	r4, r5
   d698a:	ea81 0603 	eor.w	r6, r1, r3
   d698e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6992:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6996:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d699a:	bf18      	it	ne
   d699c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d69a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d69a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d69a8:	d038      	beq.n	d6a1c <__aeabi_dmul+0xb4>
   d69aa:	fba0 ce02 	umull	ip, lr, r0, r2
   d69ae:	f04f 0500 	mov.w	r5, #0
   d69b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d69b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d69ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   d69be:	f04f 0600 	mov.w	r6, #0
   d69c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d69c6:	f09c 0f00 	teq	ip, #0
   d69ca:	bf18      	it	ne
   d69cc:	f04e 0e01 	orrne.w	lr, lr, #1
   d69d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d69d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d69d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d69dc:	d204      	bcs.n	d69e8 <__aeabi_dmul+0x80>
   d69de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d69e2:	416d      	adcs	r5, r5
   d69e4:	eb46 0606 	adc.w	r6, r6, r6
   d69e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d69ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d69f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d69f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d69f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d69fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a00:	bf88      	it	hi
   d6a02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a06:	d81e      	bhi.n	d6a46 <__aeabi_dmul+0xde>
   d6a08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6a0c:	bf08      	it	eq
   d6a0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6a12:	f150 0000 	adcs.w	r0, r0, #0
   d6a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a1a:	bd70      	pop	{r4, r5, r6, pc}
   d6a1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6a20:	ea46 0101 	orr.w	r1, r6, r1
   d6a24:	ea40 0002 	orr.w	r0, r0, r2
   d6a28:	ea81 0103 	eor.w	r1, r1, r3
   d6a2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6a30:	bfc2      	ittt	gt
   d6a32:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a3a:	bd70      	popgt	{r4, r5, r6, pc}
   d6a3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a40:	f04f 0e00 	mov.w	lr, #0
   d6a44:	3c01      	subs	r4, #1
   d6a46:	f300 80ab 	bgt.w	d6ba0 <__aeabi_dmul+0x238>
   d6a4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6a4e:	bfde      	ittt	le
   d6a50:	2000      	movle	r0, #0
   d6a52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6a56:	bd70      	pople	{r4, r5, r6, pc}
   d6a58:	f1c4 0400 	rsb	r4, r4, #0
   d6a5c:	3c20      	subs	r4, #32
   d6a5e:	da35      	bge.n	d6acc <__aeabi_dmul+0x164>
   d6a60:	340c      	adds	r4, #12
   d6a62:	dc1b      	bgt.n	d6a9c <__aeabi_dmul+0x134>
   d6a64:	f104 0414 	add.w	r4, r4, #20
   d6a68:	f1c4 0520 	rsb	r5, r4, #32
   d6a6c:	fa00 f305 	lsl.w	r3, r0, r5
   d6a70:	fa20 f004 	lsr.w	r0, r0, r4
   d6a74:	fa01 f205 	lsl.w	r2, r1, r5
   d6a78:	ea40 0002 	orr.w	r0, r0, r2
   d6a7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6a80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a88:	fa21 f604 	lsr.w	r6, r1, r4
   d6a8c:	eb42 0106 	adc.w	r1, r2, r6
   d6a90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a94:	bf08      	it	eq
   d6a96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a9a:	bd70      	pop	{r4, r5, r6, pc}
   d6a9c:	f1c4 040c 	rsb	r4, r4, #12
   d6aa0:	f1c4 0520 	rsb	r5, r4, #32
   d6aa4:	fa00 f304 	lsl.w	r3, r0, r4
   d6aa8:	fa20 f005 	lsr.w	r0, r0, r5
   d6aac:	fa01 f204 	lsl.w	r2, r1, r4
   d6ab0:	ea40 0002 	orr.w	r0, r0, r2
   d6ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ab8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6abc:	f141 0100 	adc.w	r1, r1, #0
   d6ac0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6ac4:	bf08      	it	eq
   d6ac6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6aca:	bd70      	pop	{r4, r5, r6, pc}
   d6acc:	f1c4 0520 	rsb	r5, r4, #32
   d6ad0:	fa00 f205 	lsl.w	r2, r0, r5
   d6ad4:	ea4e 0e02 	orr.w	lr, lr, r2
   d6ad8:	fa20 f304 	lsr.w	r3, r0, r4
   d6adc:	fa01 f205 	lsl.w	r2, r1, r5
   d6ae0:	ea43 0302 	orr.w	r3, r3, r2
   d6ae4:	fa21 f004 	lsr.w	r0, r1, r4
   d6ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6aec:	fa21 f204 	lsr.w	r2, r1, r4
   d6af0:	ea20 0002 	bic.w	r0, r0, r2
   d6af4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6af8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6afc:	bf08      	it	eq
   d6afe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b02:	bd70      	pop	{r4, r5, r6, pc}
   d6b04:	f094 0f00 	teq	r4, #0
   d6b08:	d10f      	bne.n	d6b2a <__aeabi_dmul+0x1c2>
   d6b0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6b0e:	0040      	lsls	r0, r0, #1
   d6b10:	eb41 0101 	adc.w	r1, r1, r1
   d6b14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b18:	bf08      	it	eq
   d6b1a:	3c01      	subeq	r4, #1
   d6b1c:	d0f7      	beq.n	d6b0e <__aeabi_dmul+0x1a6>
   d6b1e:	ea41 0106 	orr.w	r1, r1, r6
   d6b22:	f095 0f00 	teq	r5, #0
   d6b26:	bf18      	it	ne
   d6b28:	4770      	bxne	lr
   d6b2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6b2e:	0052      	lsls	r2, r2, #1
   d6b30:	eb43 0303 	adc.w	r3, r3, r3
   d6b34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6b38:	bf08      	it	eq
   d6b3a:	3d01      	subeq	r5, #1
   d6b3c:	d0f7      	beq.n	d6b2e <__aeabi_dmul+0x1c6>
   d6b3e:	ea43 0306 	orr.w	r3, r3, r6
   d6b42:	4770      	bx	lr
   d6b44:	ea94 0f0c 	teq	r4, ip
   d6b48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6b4c:	bf18      	it	ne
   d6b4e:	ea95 0f0c 	teqne	r5, ip
   d6b52:	d00c      	beq.n	d6b6e <__aeabi_dmul+0x206>
   d6b54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b58:	bf18      	it	ne
   d6b5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b5e:	d1d1      	bne.n	d6b04 <__aeabi_dmul+0x19c>
   d6b60:	ea81 0103 	eor.w	r1, r1, r3
   d6b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b68:	f04f 0000 	mov.w	r0, #0
   d6b6c:	bd70      	pop	{r4, r5, r6, pc}
   d6b6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b72:	bf06      	itte	eq
   d6b74:	4610      	moveq	r0, r2
   d6b76:	4619      	moveq	r1, r3
   d6b78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b7c:	d019      	beq.n	d6bb2 <__aeabi_dmul+0x24a>
   d6b7e:	ea94 0f0c 	teq	r4, ip
   d6b82:	d102      	bne.n	d6b8a <__aeabi_dmul+0x222>
   d6b84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6b88:	d113      	bne.n	d6bb2 <__aeabi_dmul+0x24a>
   d6b8a:	ea95 0f0c 	teq	r5, ip
   d6b8e:	d105      	bne.n	d6b9c <__aeabi_dmul+0x234>
   d6b90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6b94:	bf1c      	itt	ne
   d6b96:	4610      	movne	r0, r2
   d6b98:	4619      	movne	r1, r3
   d6b9a:	d10a      	bne.n	d6bb2 <__aeabi_dmul+0x24a>
   d6b9c:	ea81 0103 	eor.w	r1, r1, r3
   d6ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ba4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ba8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6bac:	f04f 0000 	mov.w	r0, #0
   d6bb0:	bd70      	pop	{r4, r5, r6, pc}
   d6bb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6bb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6bba:	bd70      	pop	{r4, r5, r6, pc}

000d6bbc <__aeabi_ddiv>:
   d6bbc:	b570      	push	{r4, r5, r6, lr}
   d6bbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6bc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6bc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6bca:	bf1d      	ittte	ne
   d6bcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6bd0:	ea94 0f0c 	teqne	r4, ip
   d6bd4:	ea95 0f0c 	teqne	r5, ip
   d6bd8:	f000 f8a7 	bleq	d6d2a <__aeabi_ddiv+0x16e>
   d6bdc:	eba4 0405 	sub.w	r4, r4, r5
   d6be0:	ea81 0e03 	eor.w	lr, r1, r3
   d6be4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6be8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6bec:	f000 8088 	beq.w	d6d00 <__aeabi_ddiv+0x144>
   d6bf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bf4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6bf8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6bfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6c00:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6c04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6c08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6c0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6c10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6c14:	429d      	cmp	r5, r3
   d6c16:	bf08      	it	eq
   d6c18:	4296      	cmpeq	r6, r2
   d6c1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6c1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6c22:	d202      	bcs.n	d6c2a <__aeabi_ddiv+0x6e>
   d6c24:	085b      	lsrs	r3, r3, #1
   d6c26:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c2a:	1ab6      	subs	r6, r6, r2
   d6c2c:	eb65 0503 	sbc.w	r5, r5, r3
   d6c30:	085b      	lsrs	r3, r3, #1
   d6c32:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6c3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c46:	bf22      	ittt	cs
   d6c48:	1ab6      	subcs	r6, r6, r2
   d6c4a:	4675      	movcs	r5, lr
   d6c4c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6c50:	085b      	lsrs	r3, r3, #1
   d6c52:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c56:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c5e:	bf22      	ittt	cs
   d6c60:	1ab6      	subcs	r6, r6, r2
   d6c62:	4675      	movcs	r5, lr
   d6c64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6c68:	085b      	lsrs	r3, r3, #1
   d6c6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c76:	bf22      	ittt	cs
   d6c78:	1ab6      	subcs	r6, r6, r2
   d6c7a:	4675      	movcs	r5, lr
   d6c7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6c80:	085b      	lsrs	r3, r3, #1
   d6c82:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c86:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c8e:	bf22      	ittt	cs
   d6c90:	1ab6      	subcs	r6, r6, r2
   d6c92:	4675      	movcs	r5, lr
   d6c94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6c98:	ea55 0e06 	orrs.w	lr, r5, r6
   d6c9c:	d018      	beq.n	d6cd0 <__aeabi_ddiv+0x114>
   d6c9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6ca2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6ca6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6caa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6cae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6cb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6cb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6cba:	d1c0      	bne.n	d6c3e <__aeabi_ddiv+0x82>
   d6cbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cc0:	d10b      	bne.n	d6cda <__aeabi_ddiv+0x11e>
   d6cc2:	ea41 0100 	orr.w	r1, r1, r0
   d6cc6:	f04f 0000 	mov.w	r0, #0
   d6cca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6cce:	e7b6      	b.n	d6c3e <__aeabi_ddiv+0x82>
   d6cd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cd4:	bf04      	itt	eq
   d6cd6:	4301      	orreq	r1, r0
   d6cd8:	2000      	moveq	r0, #0
   d6cda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6cde:	bf88      	it	hi
   d6ce0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ce4:	f63f aeaf 	bhi.w	d6a46 <__aeabi_dmul+0xde>
   d6ce8:	ebb5 0c03 	subs.w	ip, r5, r3
   d6cec:	bf04      	itt	eq
   d6cee:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6cf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6cf6:	f150 0000 	adcs.w	r0, r0, #0
   d6cfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cfe:	bd70      	pop	{r4, r5, r6, pc}
   d6d00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6d04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6d08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6d0c:	bfc2      	ittt	gt
   d6d0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6d12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d16:	bd70      	popgt	{r4, r5, r6, pc}
   d6d18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d1c:	f04f 0e00 	mov.w	lr, #0
   d6d20:	3c01      	subs	r4, #1
   d6d22:	e690      	b.n	d6a46 <__aeabi_dmul+0xde>
   d6d24:	ea45 0e06 	orr.w	lr, r5, r6
   d6d28:	e68d      	b.n	d6a46 <__aeabi_dmul+0xde>
   d6d2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6d2e:	ea94 0f0c 	teq	r4, ip
   d6d32:	bf08      	it	eq
   d6d34:	ea95 0f0c 	teqeq	r5, ip
   d6d38:	f43f af3b 	beq.w	d6bb2 <__aeabi_dmul+0x24a>
   d6d3c:	ea94 0f0c 	teq	r4, ip
   d6d40:	d10a      	bne.n	d6d58 <__aeabi_ddiv+0x19c>
   d6d42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6d46:	f47f af34 	bne.w	d6bb2 <__aeabi_dmul+0x24a>
   d6d4a:	ea95 0f0c 	teq	r5, ip
   d6d4e:	f47f af25 	bne.w	d6b9c <__aeabi_dmul+0x234>
   d6d52:	4610      	mov	r0, r2
   d6d54:	4619      	mov	r1, r3
   d6d56:	e72c      	b.n	d6bb2 <__aeabi_dmul+0x24a>
   d6d58:	ea95 0f0c 	teq	r5, ip
   d6d5c:	d106      	bne.n	d6d6c <__aeabi_ddiv+0x1b0>
   d6d5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d62:	f43f aefd 	beq.w	d6b60 <__aeabi_dmul+0x1f8>
   d6d66:	4610      	mov	r0, r2
   d6d68:	4619      	mov	r1, r3
   d6d6a:	e722      	b.n	d6bb2 <__aeabi_dmul+0x24a>
   d6d6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d70:	bf18      	it	ne
   d6d72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d76:	f47f aec5 	bne.w	d6b04 <__aeabi_dmul+0x19c>
   d6d7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6d7e:	f47f af0d 	bne.w	d6b9c <__aeabi_dmul+0x234>
   d6d82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6d86:	f47f aeeb 	bne.w	d6b60 <__aeabi_dmul+0x1f8>
   d6d8a:	e712      	b.n	d6bb2 <__aeabi_dmul+0x24a>

000d6d8c <__gedf2>:
   d6d8c:	f04f 3cff 	mov.w	ip, #4294967295
   d6d90:	e006      	b.n	d6da0 <__cmpdf2+0x4>
   d6d92:	bf00      	nop

000d6d94 <__ledf2>:
   d6d94:	f04f 0c01 	mov.w	ip, #1
   d6d98:	e002      	b.n	d6da0 <__cmpdf2+0x4>
   d6d9a:	bf00      	nop

000d6d9c <__cmpdf2>:
   d6d9c:	f04f 0c01 	mov.w	ip, #1
   d6da0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6da4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6da8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6dac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6db0:	bf18      	it	ne
   d6db2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6db6:	d01b      	beq.n	d6df0 <__cmpdf2+0x54>
   d6db8:	b001      	add	sp, #4
   d6dba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6dbe:	bf0c      	ite	eq
   d6dc0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6dc4:	ea91 0f03 	teqne	r1, r3
   d6dc8:	bf02      	ittt	eq
   d6dca:	ea90 0f02 	teqeq	r0, r2
   d6dce:	2000      	moveq	r0, #0
   d6dd0:	4770      	bxeq	lr
   d6dd2:	f110 0f00 	cmn.w	r0, #0
   d6dd6:	ea91 0f03 	teq	r1, r3
   d6dda:	bf58      	it	pl
   d6ddc:	4299      	cmppl	r1, r3
   d6dde:	bf08      	it	eq
   d6de0:	4290      	cmpeq	r0, r2
   d6de2:	bf2c      	ite	cs
   d6de4:	17d8      	asrcs	r0, r3, #31
   d6de6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6dea:	f040 0001 	orr.w	r0, r0, #1
   d6dee:	4770      	bx	lr
   d6df0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6df4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6df8:	d102      	bne.n	d6e00 <__cmpdf2+0x64>
   d6dfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6dfe:	d107      	bne.n	d6e10 <__cmpdf2+0x74>
   d6e00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e08:	d1d6      	bne.n	d6db8 <__cmpdf2+0x1c>
   d6e0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6e0e:	d0d3      	beq.n	d6db8 <__cmpdf2+0x1c>
   d6e10:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6e14:	4770      	bx	lr
   d6e16:	bf00      	nop

000d6e18 <__aeabi_cdrcmple>:
   d6e18:	4684      	mov	ip, r0
   d6e1a:	4610      	mov	r0, r2
   d6e1c:	4662      	mov	r2, ip
   d6e1e:	468c      	mov	ip, r1
   d6e20:	4619      	mov	r1, r3
   d6e22:	4663      	mov	r3, ip
   d6e24:	e000      	b.n	d6e28 <__aeabi_cdcmpeq>
   d6e26:	bf00      	nop

000d6e28 <__aeabi_cdcmpeq>:
   d6e28:	b501      	push	{r0, lr}
   d6e2a:	f7ff ffb7 	bl	d6d9c <__cmpdf2>
   d6e2e:	2800      	cmp	r0, #0
   d6e30:	bf48      	it	mi
   d6e32:	f110 0f00 	cmnmi.w	r0, #0
   d6e36:	bd01      	pop	{r0, pc}

000d6e38 <__aeabi_dcmpeq>:
   d6e38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e3c:	f7ff fff4 	bl	d6e28 <__aeabi_cdcmpeq>
   d6e40:	bf0c      	ite	eq
   d6e42:	2001      	moveq	r0, #1
   d6e44:	2000      	movne	r0, #0
   d6e46:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e4a:	bf00      	nop

000d6e4c <__aeabi_dcmplt>:
   d6e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e50:	f7ff ffea 	bl	d6e28 <__aeabi_cdcmpeq>
   d6e54:	bf34      	ite	cc
   d6e56:	2001      	movcc	r0, #1
   d6e58:	2000      	movcs	r0, #0
   d6e5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e5e:	bf00      	nop

000d6e60 <__aeabi_dcmple>:
   d6e60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e64:	f7ff ffe0 	bl	d6e28 <__aeabi_cdcmpeq>
   d6e68:	bf94      	ite	ls
   d6e6a:	2001      	movls	r0, #1
   d6e6c:	2000      	movhi	r0, #0
   d6e6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e72:	bf00      	nop

000d6e74 <__aeabi_dcmpge>:
   d6e74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e78:	f7ff ffce 	bl	d6e18 <__aeabi_cdrcmple>
   d6e7c:	bf94      	ite	ls
   d6e7e:	2001      	movls	r0, #1
   d6e80:	2000      	movhi	r0, #0
   d6e82:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e86:	bf00      	nop

000d6e88 <__aeabi_dcmpgt>:
   d6e88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e8c:	f7ff ffc4 	bl	d6e18 <__aeabi_cdrcmple>
   d6e90:	bf34      	ite	cc
   d6e92:	2001      	movcc	r0, #1
   d6e94:	2000      	movcs	r0, #0
   d6e96:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e9a:	bf00      	nop

000d6e9c <__aeabi_dcmpun>:
   d6e9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ea4:	d102      	bne.n	d6eac <__aeabi_dcmpun+0x10>
   d6ea6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6eaa:	d10a      	bne.n	d6ec2 <__aeabi_dcmpun+0x26>
   d6eac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6eb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6eb4:	d102      	bne.n	d6ebc <__aeabi_dcmpun+0x20>
   d6eb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6eba:	d102      	bne.n	d6ec2 <__aeabi_dcmpun+0x26>
   d6ebc:	f04f 0000 	mov.w	r0, #0
   d6ec0:	4770      	bx	lr
   d6ec2:	f04f 0001 	mov.w	r0, #1
   d6ec6:	4770      	bx	lr

000d6ec8 <__aeabi_d2iz>:
   d6ec8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6ecc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6ed0:	d215      	bcs.n	d6efe <__aeabi_d2iz+0x36>
   d6ed2:	d511      	bpl.n	d6ef8 <__aeabi_d2iz+0x30>
   d6ed4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6ed8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6edc:	d912      	bls.n	d6f04 <__aeabi_d2iz+0x3c>
   d6ede:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ee6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6eea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6eee:	fa23 f002 	lsr.w	r0, r3, r2
   d6ef2:	bf18      	it	ne
   d6ef4:	4240      	negne	r0, r0
   d6ef6:	4770      	bx	lr
   d6ef8:	f04f 0000 	mov.w	r0, #0
   d6efc:	4770      	bx	lr
   d6efe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6f02:	d105      	bne.n	d6f10 <__aeabi_d2iz+0x48>
   d6f04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6f08:	bf08      	it	eq
   d6f0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6f0e:	4770      	bx	lr
   d6f10:	f04f 0000 	mov.w	r0, #0
   d6f14:	4770      	bx	lr
   d6f16:	bf00      	nop

000d6f18 <__aeabi_d2uiz>:
   d6f18:	004a      	lsls	r2, r1, #1
   d6f1a:	d211      	bcs.n	d6f40 <__aeabi_d2uiz+0x28>
   d6f1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6f20:	d211      	bcs.n	d6f46 <__aeabi_d2uiz+0x2e>
   d6f22:	d50d      	bpl.n	d6f40 <__aeabi_d2uiz+0x28>
   d6f24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6f28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6f2c:	d40e      	bmi.n	d6f4c <__aeabi_d2uiz+0x34>
   d6f2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6f36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6f3a:	fa23 f002 	lsr.w	r0, r3, r2
   d6f3e:	4770      	bx	lr
   d6f40:	f04f 0000 	mov.w	r0, #0
   d6f44:	4770      	bx	lr
   d6f46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6f4a:	d102      	bne.n	d6f52 <__aeabi_d2uiz+0x3a>
   d6f4c:	f04f 30ff 	mov.w	r0, #4294967295
   d6f50:	4770      	bx	lr
   d6f52:	f04f 0000 	mov.w	r0, #0
   d6f56:	4770      	bx	lr

000d6f58 <__aeabi_d2f>:
   d6f58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6f5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6f60:	bf24      	itt	cs
   d6f62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6f66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6f6a:	d90d      	bls.n	d6f88 <__aeabi_d2f+0x30>
   d6f6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6f70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6f74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6f78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6f7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6f80:	bf08      	it	eq
   d6f82:	f020 0001 	biceq.w	r0, r0, #1
   d6f86:	4770      	bx	lr
   d6f88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6f8c:	d121      	bne.n	d6fd2 <__aeabi_d2f+0x7a>
   d6f8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6f92:	bfbc      	itt	lt
   d6f94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6f98:	4770      	bxlt	lr
   d6f9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6fa2:	f1c2 0218 	rsb	r2, r2, #24
   d6fa6:	f1c2 0c20 	rsb	ip, r2, #32
   d6faa:	fa10 f30c 	lsls.w	r3, r0, ip
   d6fae:	fa20 f002 	lsr.w	r0, r0, r2
   d6fb2:	bf18      	it	ne
   d6fb4:	f040 0001 	orrne.w	r0, r0, #1
   d6fb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6fbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6fc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6fc4:	ea40 000c 	orr.w	r0, r0, ip
   d6fc8:	fa23 f302 	lsr.w	r3, r3, r2
   d6fcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6fd0:	e7cc      	b.n	d6f6c <__aeabi_d2f+0x14>
   d6fd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6fd6:	d107      	bne.n	d6fe8 <__aeabi_d2f+0x90>
   d6fd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6fdc:	bf1e      	ittt	ne
   d6fde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6fe2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6fe6:	4770      	bxne	lr
   d6fe8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6fec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ff0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6ff4:	4770      	bx	lr
   d6ff6:	bf00      	nop

000d6ff8 <__cxa_atexit>:
   d6ff8:	b510      	push	{r4, lr}
   d6ffa:	4c05      	ldr	r4, [pc, #20]	; (d7010 <__cxa_atexit+0x18>)
   d6ffc:	4613      	mov	r3, r2
   d6ffe:	b12c      	cbz	r4, d700c <__cxa_atexit+0x14>
   d7000:	460a      	mov	r2, r1
   d7002:	4601      	mov	r1, r0
   d7004:	2002      	movs	r0, #2
   d7006:	f3af 8000 	nop.w
   d700a:	bd10      	pop	{r4, pc}
   d700c:	4620      	mov	r0, r4
   d700e:	bd10      	pop	{r4, pc}
   d7010:	00000000 	.word	0x00000000

000d7014 <_localeconv_r>:
   d7014:	4800      	ldr	r0, [pc, #0]	; (d7018 <_localeconv_r+0x4>)
   d7016:	4770      	bx	lr
   d7018:	2003e26c 	.word	0x2003e26c

000d701c <memcpy>:
   d701c:	b510      	push	{r4, lr}
   d701e:	1e43      	subs	r3, r0, #1
   d7020:	440a      	add	r2, r1
   d7022:	4291      	cmp	r1, r2
   d7024:	d004      	beq.n	d7030 <memcpy+0x14>
   d7026:	f811 4b01 	ldrb.w	r4, [r1], #1
   d702a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d702e:	e7f8      	b.n	d7022 <memcpy+0x6>
   d7030:	bd10      	pop	{r4, pc}

000d7032 <memset>:
   d7032:	4402      	add	r2, r0
   d7034:	4603      	mov	r3, r0
   d7036:	4293      	cmp	r3, r2
   d7038:	d002      	beq.n	d7040 <memset+0xe>
   d703a:	f803 1b01 	strb.w	r1, [r3], #1
   d703e:	e7fa      	b.n	d7036 <memset+0x4>
   d7040:	4770      	bx	lr
	...

000d7044 <srand>:
   d7044:	b538      	push	{r3, r4, r5, lr}
   d7046:	4b12      	ldr	r3, [pc, #72]	; (d7090 <srand+0x4c>)
   d7048:	681c      	ldr	r4, [r3, #0]
   d704a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d704c:	4605      	mov	r5, r0
   d704e:	b9d3      	cbnz	r3, d7086 <srand+0x42>
   d7050:	2018      	movs	r0, #24
   d7052:	f7fe fa87 	bl	d5564 <malloc>
   d7056:	f243 330e 	movw	r3, #13070	; 0x330e
   d705a:	63a0      	str	r0, [r4, #56]	; 0x38
   d705c:	8003      	strh	r3, [r0, #0]
   d705e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7062:	8043      	strh	r3, [r0, #2]
   d7064:	f241 2334 	movw	r3, #4660	; 0x1234
   d7068:	8083      	strh	r3, [r0, #4]
   d706a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d706e:	80c3      	strh	r3, [r0, #6]
   d7070:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7074:	8103      	strh	r3, [r0, #8]
   d7076:	2305      	movs	r3, #5
   d7078:	8143      	strh	r3, [r0, #10]
   d707a:	230b      	movs	r3, #11
   d707c:	8183      	strh	r3, [r0, #12]
   d707e:	2201      	movs	r2, #1
   d7080:	2300      	movs	r3, #0
   d7082:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7088:	2200      	movs	r2, #0
   d708a:	611d      	str	r5, [r3, #16]
   d708c:	615a      	str	r2, [r3, #20]
   d708e:	bd38      	pop	{r3, r4, r5, pc}
   d7090:	2003e268 	.word	0x2003e268

000d7094 <strcmp>:
   d7094:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7098:	f811 3b01 	ldrb.w	r3, [r1], #1
   d709c:	2a01      	cmp	r2, #1
   d709e:	bf28      	it	cs
   d70a0:	429a      	cmpcs	r2, r3
   d70a2:	d0f7      	beq.n	d7094 <strcmp>
   d70a4:	1ad0      	subs	r0, r2, r3
   d70a6:	4770      	bx	lr

000d70a8 <strcpy>:
   d70a8:	4603      	mov	r3, r0
   d70aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d70ae:	f803 2b01 	strb.w	r2, [r3], #1
   d70b2:	2a00      	cmp	r2, #0
   d70b4:	d1f9      	bne.n	d70aa <strcpy+0x2>
   d70b6:	4770      	bx	lr

000d70b8 <strlen>:
   d70b8:	4603      	mov	r3, r0
   d70ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70be:	2a00      	cmp	r2, #0
   d70c0:	d1fb      	bne.n	d70ba <strlen+0x2>
   d70c2:	1a18      	subs	r0, r3, r0
   d70c4:	3801      	subs	r0, #1
   d70c6:	4770      	bx	lr

000d70c8 <strncmp>:
   d70c8:	b530      	push	{r4, r5, lr}
   d70ca:	b182      	cbz	r2, d70ee <strncmp+0x26>
   d70cc:	1e45      	subs	r5, r0, #1
   d70ce:	3901      	subs	r1, #1
   d70d0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d70d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d70d8:	42a3      	cmp	r3, r4
   d70da:	d106      	bne.n	d70ea <strncmp+0x22>
   d70dc:	43ec      	mvns	r4, r5
   d70de:	4414      	add	r4, r2
   d70e0:	42e0      	cmn	r0, r4
   d70e2:	d001      	beq.n	d70e8 <strncmp+0x20>
   d70e4:	2b00      	cmp	r3, #0
   d70e6:	d1f3      	bne.n	d70d0 <strncmp+0x8>
   d70e8:	461c      	mov	r4, r3
   d70ea:	1b18      	subs	r0, r3, r4
   d70ec:	bd30      	pop	{r4, r5, pc}
   d70ee:	4610      	mov	r0, r2
   d70f0:	bd30      	pop	{r4, r5, pc}

000d70f2 <sulp>:
   d70f2:	b570      	push	{r4, r5, r6, lr}
   d70f4:	4604      	mov	r4, r0
   d70f6:	460d      	mov	r5, r1
   d70f8:	ec45 4b10 	vmov	d0, r4, r5
   d70fc:	4616      	mov	r6, r2
   d70fe:	f001 fc1b 	bl	d8938 <__ulp>
   d7102:	ec51 0b10 	vmov	r0, r1, d0
   d7106:	b17e      	cbz	r6, d7128 <sulp+0x36>
   d7108:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d710c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7110:	2b00      	cmp	r3, #0
   d7112:	dd09      	ble.n	d7128 <sulp+0x36>
   d7114:	051b      	lsls	r3, r3, #20
   d7116:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d711a:	2400      	movs	r4, #0
   d711c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7120:	4622      	mov	r2, r4
   d7122:	462b      	mov	r3, r5
   d7124:	f7ff fc20 	bl	d6968 <__aeabi_dmul>
   d7128:	bd70      	pop	{r4, r5, r6, pc}
   d712a:	0000      	movs	r0, r0
   d712c:	0000      	movs	r0, r0
	...

000d7130 <_strtod_r>:
   d7130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7134:	b09d      	sub	sp, #116	; 0x74
   d7136:	2300      	movs	r3, #0
   d7138:	9002      	str	r0, [sp, #8]
   d713a:	460c      	mov	r4, r1
   d713c:	9213      	str	r2, [sp, #76]	; 0x4c
   d713e:	9318      	str	r3, [sp, #96]	; 0x60
   d7140:	f04f 0a00 	mov.w	sl, #0
   d7144:	f04f 0b00 	mov.w	fp, #0
   d7148:	9117      	str	r1, [sp, #92]	; 0x5c
   d714a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d714c:	781a      	ldrb	r2, [r3, #0]
   d714e:	2a0d      	cmp	r2, #13
   d7150:	d805      	bhi.n	d715e <_strtod_r+0x2e>
   d7152:	2a09      	cmp	r2, #9
   d7154:	d213      	bcs.n	d717e <_strtod_r+0x4e>
   d7156:	2a00      	cmp	r2, #0
   d7158:	f000 81ac 	beq.w	d74b4 <_strtod_r+0x384>
   d715c:	e012      	b.n	d7184 <_strtod_r+0x54>
   d715e:	2a2b      	cmp	r2, #43	; 0x2b
   d7160:	d004      	beq.n	d716c <_strtod_r+0x3c>
   d7162:	2a2d      	cmp	r2, #45	; 0x2d
   d7164:	d004      	beq.n	d7170 <_strtod_r+0x40>
   d7166:	2a20      	cmp	r2, #32
   d7168:	d10c      	bne.n	d7184 <_strtod_r+0x54>
   d716a:	e008      	b.n	d717e <_strtod_r+0x4e>
   d716c:	2200      	movs	r2, #0
   d716e:	e000      	b.n	d7172 <_strtod_r+0x42>
   d7170:	2201      	movs	r2, #1
   d7172:	920c      	str	r2, [sp, #48]	; 0x30
   d7174:	1c5a      	adds	r2, r3, #1
   d7176:	9217      	str	r2, [sp, #92]	; 0x5c
   d7178:	785b      	ldrb	r3, [r3, #1]
   d717a:	b92b      	cbnz	r3, d7188 <_strtod_r+0x58>
   d717c:	e19a      	b.n	d74b4 <_strtod_r+0x384>
   d717e:	3301      	adds	r3, #1
   d7180:	9317      	str	r3, [sp, #92]	; 0x5c
   d7182:	e7e2      	b.n	d714a <_strtod_r+0x1a>
   d7184:	2300      	movs	r3, #0
   d7186:	930c      	str	r3, [sp, #48]	; 0x30
   d7188:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d718a:	782b      	ldrb	r3, [r5, #0]
   d718c:	2b30      	cmp	r3, #48	; 0x30
   d718e:	d15c      	bne.n	d724a <_strtod_r+0x11a>
   d7190:	786b      	ldrb	r3, [r5, #1]
   d7192:	2b58      	cmp	r3, #88	; 0x58
   d7194:	d001      	beq.n	d719a <_strtod_r+0x6a>
   d7196:	2b78      	cmp	r3, #120	; 0x78
   d7198:	d14c      	bne.n	d7234 <_strtod_r+0x104>
   d719a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	ab18      	add	r3, sp, #96	; 0x60
   d71a0:	9300      	str	r3, [sp, #0]
   d71a2:	4aa9      	ldr	r2, [pc, #676]	; (d7448 <_strtod_r+0x318>)
   d71a4:	9802      	ldr	r0, [sp, #8]
   d71a6:	ab19      	add	r3, sp, #100	; 0x64
   d71a8:	a917      	add	r1, sp, #92	; 0x5c
   d71aa:	f000 fe2c 	bl	d7e06 <__gethex>
   d71ae:	f010 0607 	ands.w	r6, r0, #7
   d71b2:	4604      	mov	r4, r0
   d71b4:	f000 8587 	beq.w	d7cc6 <_strtod_r+0xb96>
   d71b8:	2e06      	cmp	r6, #6
   d71ba:	d105      	bne.n	d71c8 <_strtod_r+0x98>
   d71bc:	3501      	adds	r5, #1
   d71be:	2300      	movs	r3, #0
   d71c0:	9517      	str	r5, [sp, #92]	; 0x5c
   d71c2:	930c      	str	r3, [sp, #48]	; 0x30
   d71c4:	f000 bd7f 	b.w	d7cc6 <_strtod_r+0xb96>
   d71c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d71ca:	b13a      	cbz	r2, d71dc <_strtod_r+0xac>
   d71cc:	2135      	movs	r1, #53	; 0x35
   d71ce:	a81a      	add	r0, sp, #104	; 0x68
   d71d0:	f001 fc9f 	bl	d8b12 <__copybits>
   d71d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d71d6:	9802      	ldr	r0, [sp, #8]
   d71d8:	f001 f91c 	bl	d8414 <_Bfree>
   d71dc:	2e06      	cmp	r6, #6
   d71de:	d822      	bhi.n	d7226 <_strtod_r+0xf6>
   d71e0:	e8df f006 	tbb	[pc, r6]
   d71e4:	18080d04 	.word	0x18080d04
   d71e8:	0d1d      	.short	0x0d1d
   d71ea:	04          	.byte	0x04
   d71eb:	00          	.byte	0x00
   d71ec:	f04f 0b00 	mov.w	fp, #0
   d71f0:	46da      	mov	sl, fp
   d71f2:	e018      	b.n	d7226 <_strtod_r+0xf6>
   d71f4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d71f8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d71fc:	e013      	b.n	d7226 <_strtod_r+0xf6>
   d71fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7200:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7202:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7206:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d720a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d720e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7212:	e008      	b.n	d7226 <_strtod_r+0xf6>
   d7214:	f8df b234 	ldr.w	fp, [pc, #564]	; d744c <_strtod_r+0x31c>
   d7218:	f04f 0a00 	mov.w	sl, #0
   d721c:	e003      	b.n	d7226 <_strtod_r+0xf6>
   d721e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7222:	f04f 3aff 	mov.w	sl, #4294967295
   d7226:	0721      	lsls	r1, r4, #28
   d7228:	f140 854d 	bpl.w	d7cc6 <_strtod_r+0xb96>
   d722c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7230:	f000 bd49 	b.w	d7cc6 <_strtod_r+0xb96>
   d7234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7236:	1c5a      	adds	r2, r3, #1
   d7238:	9217      	str	r2, [sp, #92]	; 0x5c
   d723a:	785b      	ldrb	r3, [r3, #1]
   d723c:	2b30      	cmp	r3, #48	; 0x30
   d723e:	d0f9      	beq.n	d7234 <_strtod_r+0x104>
   d7240:	2b00      	cmp	r3, #0
   d7242:	f000 8540 	beq.w	d7cc6 <_strtod_r+0xb96>
   d7246:	2301      	movs	r3, #1
   d7248:	e000      	b.n	d724c <_strtod_r+0x11c>
   d724a:	2300      	movs	r3, #0
   d724c:	f04f 0800 	mov.w	r8, #0
   d7250:	9306      	str	r3, [sp, #24]
   d7252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7254:	9307      	str	r3, [sp, #28]
   d7256:	f8cd 8014 	str.w	r8, [sp, #20]
   d725a:	f8cd 8010 	str.w	r8, [sp, #16]
   d725e:	220a      	movs	r2, #10
   d7260:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7262:	782e      	ldrb	r6, [r5, #0]
   d7264:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7268:	b2d9      	uxtb	r1, r3
   d726a:	2909      	cmp	r1, #9
   d726c:	d80e      	bhi.n	d728c <_strtod_r+0x15c>
   d726e:	9904      	ldr	r1, [sp, #16]
   d7270:	2908      	cmp	r1, #8
   d7272:	bfdd      	ittte	le
   d7274:	9905      	ldrle	r1, [sp, #20]
   d7276:	fb02 3301 	mlale	r3, r2, r1, r3
   d727a:	9305      	strle	r3, [sp, #20]
   d727c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7280:	9b04      	ldr	r3, [sp, #16]
   d7282:	3501      	adds	r5, #1
   d7284:	3301      	adds	r3, #1
   d7286:	9304      	str	r3, [sp, #16]
   d7288:	9517      	str	r5, [sp, #92]	; 0x5c
   d728a:	e7e9      	b.n	d7260 <_strtod_r+0x130>
   d728c:	9802      	ldr	r0, [sp, #8]
   d728e:	f7ff fec1 	bl	d7014 <_localeconv_r>
   d7292:	6807      	ldr	r7, [r0, #0]
   d7294:	9802      	ldr	r0, [sp, #8]
   d7296:	f7ff febd 	bl	d7014 <_localeconv_r>
   d729a:	6800      	ldr	r0, [r0, #0]
   d729c:	f7ff ff0c 	bl	d70b8 <strlen>
   d72a0:	4639      	mov	r1, r7
   d72a2:	4602      	mov	r2, r0
   d72a4:	4628      	mov	r0, r5
   d72a6:	f7ff ff0f 	bl	d70c8 <strncmp>
   d72aa:	4607      	mov	r7, r0
   d72ac:	b128      	cbz	r0, d72ba <_strtod_r+0x18a>
   d72ae:	2000      	movs	r0, #0
   d72b0:	4633      	mov	r3, r6
   d72b2:	9d04      	ldr	r5, [sp, #16]
   d72b4:	4602      	mov	r2, r0
   d72b6:	4601      	mov	r1, r0
   d72b8:	e057      	b.n	d736a <_strtod_r+0x23a>
   d72ba:	9802      	ldr	r0, [sp, #8]
   d72bc:	f7ff feaa 	bl	d7014 <_localeconv_r>
   d72c0:	6800      	ldr	r0, [r0, #0]
   d72c2:	f7ff fef9 	bl	d70b8 <strlen>
   d72c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72c8:	181a      	adds	r2, r3, r0
   d72ca:	9217      	str	r2, [sp, #92]	; 0x5c
   d72cc:	9a04      	ldr	r2, [sp, #16]
   d72ce:	5c1b      	ldrb	r3, [r3, r0]
   d72d0:	2a00      	cmp	r2, #0
   d72d2:	d142      	bne.n	d735a <_strtod_r+0x22a>
   d72d4:	4610      	mov	r0, r2
   d72d6:	2b30      	cmp	r3, #48	; 0x30
   d72d8:	d105      	bne.n	d72e6 <_strtod_r+0x1b6>
   d72da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72dc:	1c5a      	adds	r2, r3, #1
   d72de:	9217      	str	r2, [sp, #92]	; 0x5c
   d72e0:	3001      	adds	r0, #1
   d72e2:	785b      	ldrb	r3, [r3, #1]
   d72e4:	e7f7      	b.n	d72d6 <_strtod_r+0x1a6>
   d72e6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d72ea:	2a08      	cmp	r2, #8
   d72ec:	d843      	bhi.n	d7376 <_strtod_r+0x246>
   d72ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d72f0:	9207      	str	r2, [sp, #28]
   d72f2:	4602      	mov	r2, r0
   d72f4:	2000      	movs	r0, #0
   d72f6:	4605      	mov	r5, r0
   d72f8:	3b30      	subs	r3, #48	; 0x30
   d72fa:	f100 0101 	add.w	r1, r0, #1
   d72fe:	d026      	beq.n	d734e <_strtod_r+0x21e>
   d7300:	440a      	add	r2, r1
   d7302:	eb05 0c00 	add.w	ip, r5, r0
   d7306:	4629      	mov	r1, r5
   d7308:	260a      	movs	r6, #10
   d730a:	4561      	cmp	r1, ip
   d730c:	d00e      	beq.n	d732c <_strtod_r+0x1fc>
   d730e:	3101      	adds	r1, #1
   d7310:	f101 3eff 	add.w	lr, r1, #4294967295
   d7314:	f1be 0f08 	cmp.w	lr, #8
   d7318:	dc03      	bgt.n	d7322 <_strtod_r+0x1f2>
   d731a:	9f05      	ldr	r7, [sp, #20]
   d731c:	4377      	muls	r7, r6
   d731e:	9705      	str	r7, [sp, #20]
   d7320:	e7f3      	b.n	d730a <_strtod_r+0x1da>
   d7322:	2910      	cmp	r1, #16
   d7324:	bfd8      	it	le
   d7326:	fb06 f808 	mulle.w	r8, r6, r8
   d732a:	e7ee      	b.n	d730a <_strtod_r+0x1da>
   d732c:	4428      	add	r0, r5
   d732e:	2808      	cmp	r0, #8
   d7330:	f100 0501 	add.w	r5, r0, #1
   d7334:	dc05      	bgt.n	d7342 <_strtod_r+0x212>
   d7336:	9805      	ldr	r0, [sp, #20]
   d7338:	210a      	movs	r1, #10
   d733a:	fb01 3300 	mla	r3, r1, r0, r3
   d733e:	9305      	str	r3, [sp, #20]
   d7340:	e004      	b.n	d734c <_strtod_r+0x21c>
   d7342:	2d10      	cmp	r5, #16
   d7344:	bfdc      	itt	le
   d7346:	210a      	movle	r1, #10
   d7348:	fb01 3808 	mlale	r8, r1, r8, r3
   d734c:	2100      	movs	r1, #0
   d734e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7350:	1c58      	adds	r0, r3, #1
   d7352:	9017      	str	r0, [sp, #92]	; 0x5c
   d7354:	785b      	ldrb	r3, [r3, #1]
   d7356:	4608      	mov	r0, r1
   d7358:	e002      	b.n	d7360 <_strtod_r+0x230>
   d735a:	9d04      	ldr	r5, [sp, #16]
   d735c:	4638      	mov	r0, r7
   d735e:	463a      	mov	r2, r7
   d7360:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7364:	2909      	cmp	r1, #9
   d7366:	d9c7      	bls.n	d72f8 <_strtod_r+0x1c8>
   d7368:	2101      	movs	r1, #1
   d736a:	2b65      	cmp	r3, #101	; 0x65
   d736c:	d001      	beq.n	d7372 <_strtod_r+0x242>
   d736e:	2b45      	cmp	r3, #69	; 0x45
   d7370:	d151      	bne.n	d7416 <_strtod_r+0x2e6>
   d7372:	b96d      	cbnz	r5, d7390 <_strtod_r+0x260>
   d7374:	e004      	b.n	d7380 <_strtod_r+0x250>
   d7376:	2b65      	cmp	r3, #101	; 0x65
   d7378:	f040 84b3 	bne.w	d7ce2 <_strtod_r+0xbb2>
   d737c:	2200      	movs	r2, #0
   d737e:	2101      	movs	r1, #1
   d7380:	b928      	cbnz	r0, d738e <_strtod_r+0x25e>
   d7382:	9b06      	ldr	r3, [sp, #24]
   d7384:	2b00      	cmp	r3, #0
   d7386:	f000 8095 	beq.w	d74b4 <_strtod_r+0x384>
   d738a:	4605      	mov	r5, r0
   d738c:	e000      	b.n	d7390 <_strtod_r+0x260>
   d738e:	2500      	movs	r5, #0
   d7390:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d7392:	1c63      	adds	r3, r4, #1
   d7394:	9317      	str	r3, [sp, #92]	; 0x5c
   d7396:	7863      	ldrb	r3, [r4, #1]
   d7398:	2b2b      	cmp	r3, #43	; 0x2b
   d739a:	d006      	beq.n	d73aa <_strtod_r+0x27a>
   d739c:	2b2d      	cmp	r3, #45	; 0x2d
   d739e:	d002      	beq.n	d73a6 <_strtod_r+0x276>
   d73a0:	2600      	movs	r6, #0
   d73a2:	9603      	str	r6, [sp, #12]
   d73a4:	e006      	b.n	d73b4 <_strtod_r+0x284>
   d73a6:	2301      	movs	r3, #1
   d73a8:	e000      	b.n	d73ac <_strtod_r+0x27c>
   d73aa:	2300      	movs	r3, #0
   d73ac:	9303      	str	r3, [sp, #12]
   d73ae:	1ca3      	adds	r3, r4, #2
   d73b0:	9317      	str	r3, [sp, #92]	; 0x5c
   d73b2:	78a3      	ldrb	r3, [r4, #2]
   d73b4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d73b8:	2e09      	cmp	r6, #9
   d73ba:	d82b      	bhi.n	d7414 <_strtod_r+0x2e4>
   d73bc:	2b30      	cmp	r3, #48	; 0x30
   d73be:	d104      	bne.n	d73ca <_strtod_r+0x29a>
   d73c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d73c2:	1c5e      	adds	r6, r3, #1
   d73c4:	9617      	str	r6, [sp, #92]	; 0x5c
   d73c6:	785b      	ldrb	r3, [r3, #1]
   d73c8:	e7f8      	b.n	d73bc <_strtod_r+0x28c>
   d73ca:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d73ce:	2e08      	cmp	r6, #8
   d73d0:	d821      	bhi.n	d7416 <_strtod_r+0x2e6>
   d73d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d73d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d73d8:	f04f 0c0a 	mov.w	ip, #10
   d73dc:	461f      	mov	r7, r3
   d73de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d73e0:	1c5e      	adds	r6, r3, #1
   d73e2:	9617      	str	r6, [sp, #92]	; 0x5c
   d73e4:	785b      	ldrb	r3, [r3, #1]
   d73e6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d73ea:	f1b9 0f09 	cmp.w	r9, #9
   d73ee:	d804      	bhi.n	d73fa <_strtod_r+0x2ca>
   d73f0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d73f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d73f8:	e7f1      	b.n	d73de <_strtod_r+0x2ae>
   d73fa:	1bf6      	subs	r6, r6, r7
   d73fc:	2e08      	cmp	r6, #8
   d73fe:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d7402:	dc02      	bgt.n	d740a <_strtod_r+0x2da>
   d7404:	45f1      	cmp	r9, lr
   d7406:	bfa8      	it	ge
   d7408:	46f1      	movge	r9, lr
   d740a:	9e03      	ldr	r6, [sp, #12]
   d740c:	b12e      	cbz	r6, d741a <_strtod_r+0x2ea>
   d740e:	f1c9 0900 	rsb	r9, r9, #0
   d7412:	e002      	b.n	d741a <_strtod_r+0x2ea>
   d7414:	9417      	str	r4, [sp, #92]	; 0x5c
   d7416:	f04f 0900 	mov.w	r9, #0
   d741a:	2d00      	cmp	r5, #0
   d741c:	d153      	bne.n	d74c6 <_strtod_r+0x396>
   d741e:	2800      	cmp	r0, #0
   d7420:	f040 8451 	bne.w	d7cc6 <_strtod_r+0xb96>
   d7424:	9a06      	ldr	r2, [sp, #24]
   d7426:	2a00      	cmp	r2, #0
   d7428:	f040 844d 	bne.w	d7cc6 <_strtod_r+0xb96>
   d742c:	2900      	cmp	r1, #0
   d742e:	d141      	bne.n	d74b4 <_strtod_r+0x384>
   d7430:	2b4e      	cmp	r3, #78	; 0x4e
   d7432:	d020      	beq.n	d7476 <_strtod_r+0x346>
   d7434:	dc02      	bgt.n	d743c <_strtod_r+0x30c>
   d7436:	2b49      	cmp	r3, #73	; 0x49
   d7438:	d00a      	beq.n	d7450 <_strtod_r+0x320>
   d743a:	e03b      	b.n	d74b4 <_strtod_r+0x384>
   d743c:	2b69      	cmp	r3, #105	; 0x69
   d743e:	d007      	beq.n	d7450 <_strtod_r+0x320>
   d7440:	2b6e      	cmp	r3, #110	; 0x6e
   d7442:	d018      	beq.n	d7476 <_strtod_r+0x346>
   d7444:	e036      	b.n	d74b4 <_strtod_r+0x384>
   d7446:	bf00      	nop
   d7448:	000d9010 	.word	0x000d9010
   d744c:	7ff00000 	.word	0x7ff00000
   d7450:	49a8      	ldr	r1, [pc, #672]	; (d76f4 <_strtod_r+0x5c4>)
   d7452:	a817      	add	r0, sp, #92	; 0x5c
   d7454:	f000 ff08 	bl	d8268 <__match>
   d7458:	b360      	cbz	r0, d74b4 <_strtod_r+0x384>
   d745a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d745c:	49a6      	ldr	r1, [pc, #664]	; (d76f8 <_strtod_r+0x5c8>)
   d745e:	3b01      	subs	r3, #1
   d7460:	a817      	add	r0, sp, #92	; 0x5c
   d7462:	9317      	str	r3, [sp, #92]	; 0x5c
   d7464:	f000 ff00 	bl	d8268 <__match>
   d7468:	b910      	cbnz	r0, d7470 <_strtod_r+0x340>
   d746a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d746c:	3301      	adds	r3, #1
   d746e:	9317      	str	r3, [sp, #92]	; 0x5c
   d7470:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d7714 <_strtod_r+0x5e4>
   d7474:	e01a      	b.n	d74ac <_strtod_r+0x37c>
   d7476:	49a1      	ldr	r1, [pc, #644]	; (d76fc <_strtod_r+0x5cc>)
   d7478:	a817      	add	r0, sp, #92	; 0x5c
   d747a:	f000 fef5 	bl	d8268 <__match>
   d747e:	b1c8      	cbz	r0, d74b4 <_strtod_r+0x384>
   d7480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7482:	781b      	ldrb	r3, [r3, #0]
   d7484:	2b28      	cmp	r3, #40	; 0x28
   d7486:	d10f      	bne.n	d74a8 <_strtod_r+0x378>
   d7488:	aa1a      	add	r2, sp, #104	; 0x68
   d748a:	499d      	ldr	r1, [pc, #628]	; (d7700 <_strtod_r+0x5d0>)
   d748c:	a817      	add	r0, sp, #92	; 0x5c
   d748e:	f000 fefe 	bl	d828e <__hexnan>
   d7492:	2805      	cmp	r0, #5
   d7494:	d108      	bne.n	d74a8 <_strtod_r+0x378>
   d7496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7498:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d749c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d74a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d74a4:	f000 bc0f 	b.w	d7cc6 <_strtod_r+0xb96>
   d74a8:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7718 <_strtod_r+0x5e8>
   d74ac:	f04f 0a00 	mov.w	sl, #0
   d74b0:	f000 bc09 	b.w	d7cc6 <_strtod_r+0xb96>
   d74b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d74b6:	9417      	str	r4, [sp, #92]	; 0x5c
   d74b8:	2b00      	cmp	r3, #0
   d74ba:	f000 840f 	beq.w	d7cdc <_strtod_r+0xbac>
   d74be:	2300      	movs	r3, #0
   d74c0:	930c      	str	r3, [sp, #48]	; 0x30
   d74c2:	f000 bc02 	b.w	d7cca <_strtod_r+0xb9a>
   d74c6:	9b04      	ldr	r3, [sp, #16]
   d74c8:	9805      	ldr	r0, [sp, #20]
   d74ca:	2b00      	cmp	r3, #0
   d74cc:	bf08      	it	eq
   d74ce:	462b      	moveq	r3, r5
   d74d0:	2d10      	cmp	r5, #16
   d74d2:	462c      	mov	r4, r5
   d74d4:	ebc2 0909 	rsb	r9, r2, r9
   d74d8:	bfa8      	it	ge
   d74da:	2410      	movge	r4, #16
   d74dc:	9304      	str	r3, [sp, #16]
   d74de:	f7ff f9cd 	bl	d687c <__aeabi_ui2d>
   d74e2:	2c09      	cmp	r4, #9
   d74e4:	4682      	mov	sl, r0
   d74e6:	468b      	mov	fp, r1
   d74e8:	dd13      	ble.n	d7512 <_strtod_r+0x3e2>
   d74ea:	4b86      	ldr	r3, [pc, #536]	; (d7704 <_strtod_r+0x5d4>)
   d74ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d74f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d74f4:	f7ff fa38 	bl	d6968 <__aeabi_dmul>
   d74f8:	4606      	mov	r6, r0
   d74fa:	4640      	mov	r0, r8
   d74fc:	460f      	mov	r7, r1
   d74fe:	f7ff f9bd 	bl	d687c <__aeabi_ui2d>
   d7502:	4602      	mov	r2, r0
   d7504:	460b      	mov	r3, r1
   d7506:	4630      	mov	r0, r6
   d7508:	4639      	mov	r1, r7
   d750a:	f7ff f87b 	bl	d6604 <__adddf3>
   d750e:	4682      	mov	sl, r0
   d7510:	468b      	mov	fp, r1
   d7512:	2d0f      	cmp	r5, #15
   d7514:	dc36      	bgt.n	d7584 <_strtod_r+0x454>
   d7516:	f1b9 0f00 	cmp.w	r9, #0
   d751a:	f000 83d4 	beq.w	d7cc6 <_strtod_r+0xb96>
   d751e:	dd24      	ble.n	d756a <_strtod_r+0x43a>
   d7520:	f1b9 0f16 	cmp.w	r9, #22
   d7524:	dc07      	bgt.n	d7536 <_strtod_r+0x406>
   d7526:	4d77      	ldr	r5, [pc, #476]	; (d7704 <_strtod_r+0x5d4>)
   d7528:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d752c:	4652      	mov	r2, sl
   d752e:	465b      	mov	r3, fp
   d7530:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7534:	e014      	b.n	d7560 <_strtod_r+0x430>
   d7536:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d753a:	4599      	cmp	r9, r3
   d753c:	dc22      	bgt.n	d7584 <_strtod_r+0x454>
   d753e:	4c71      	ldr	r4, [pc, #452]	; (d7704 <_strtod_r+0x5d4>)
   d7540:	f1c5 050f 	rsb	r5, r5, #15
   d7544:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7548:	ebc5 0509 	rsb	r5, r5, r9
   d754c:	4652      	mov	r2, sl
   d754e:	465b      	mov	r3, fp
   d7550:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7554:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7558:	f7ff fa06 	bl	d6968 <__aeabi_dmul>
   d755c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7560:	f7ff fa02 	bl	d6968 <__aeabi_dmul>
   d7564:	4682      	mov	sl, r0
   d7566:	468b      	mov	fp, r1
   d7568:	e3ad      	b.n	d7cc6 <_strtod_r+0xb96>
   d756a:	f119 0f16 	cmn.w	r9, #22
   d756e:	db09      	blt.n	d7584 <_strtod_r+0x454>
   d7570:	4d64      	ldr	r5, [pc, #400]	; (d7704 <_strtod_r+0x5d4>)
   d7572:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d7576:	e9d9 2300 	ldrd	r2, r3, [r9]
   d757a:	4650      	mov	r0, sl
   d757c:	4659      	mov	r1, fp
   d757e:	f7ff fb1d 	bl	d6bbc <__aeabi_ddiv>
   d7582:	e7ef      	b.n	d7564 <_strtod_r+0x434>
   d7584:	1b2c      	subs	r4, r5, r4
   d7586:	444c      	add	r4, r9
   d7588:	2c00      	cmp	r4, #0
   d758a:	dd57      	ble.n	d763c <_strtod_r+0x50c>
   d758c:	f014 010f 	ands.w	r1, r4, #15
   d7590:	d00a      	beq.n	d75a8 <_strtod_r+0x478>
   d7592:	4b5c      	ldr	r3, [pc, #368]	; (d7704 <_strtod_r+0x5d4>)
   d7594:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d7598:	4652      	mov	r2, sl
   d759a:	465b      	mov	r3, fp
   d759c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d75a0:	f7ff f9e2 	bl	d6968 <__aeabi_dmul>
   d75a4:	4682      	mov	sl, r0
   d75a6:	468b      	mov	fp, r1
   d75a8:	f034 040f 	bics.w	r4, r4, #15
   d75ac:	f000 80b8 	beq.w	d7720 <_strtod_r+0x5f0>
   d75b0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d75b4:	dd0b      	ble.n	d75ce <_strtod_r+0x49e>
   d75b6:	2400      	movs	r4, #0
   d75b8:	4625      	mov	r5, r4
   d75ba:	9405      	str	r4, [sp, #20]
   d75bc:	9404      	str	r4, [sp, #16]
   d75be:	9a02      	ldr	r2, [sp, #8]
   d75c0:	f8df b150 	ldr.w	fp, [pc, #336]	; d7714 <_strtod_r+0x5e4>
   d75c4:	2322      	movs	r3, #34	; 0x22
   d75c6:	6013      	str	r3, [r2, #0]
   d75c8:	f04f 0a00 	mov.w	sl, #0
   d75cc:	e187      	b.n	d78de <_strtod_r+0x7ae>
   d75ce:	4e4e      	ldr	r6, [pc, #312]	; (d7708 <_strtod_r+0x5d8>)
   d75d0:	2300      	movs	r3, #0
   d75d2:	1124      	asrs	r4, r4, #4
   d75d4:	4650      	mov	r0, sl
   d75d6:	4659      	mov	r1, fp
   d75d8:	4698      	mov	r8, r3
   d75da:	4637      	mov	r7, r6
   d75dc:	2c01      	cmp	r4, #1
   d75de:	dd0b      	ble.n	d75f8 <_strtod_r+0x4c8>
   d75e0:	07e2      	lsls	r2, r4, #31
   d75e2:	d504      	bpl.n	d75ee <_strtod_r+0x4be>
   d75e4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d75e8:	f7ff f9be 	bl	d6968 <__aeabi_dmul>
   d75ec:	2301      	movs	r3, #1
   d75ee:	f108 0801 	add.w	r8, r8, #1
   d75f2:	1064      	asrs	r4, r4, #1
   d75f4:	3608      	adds	r6, #8
   d75f6:	e7f1      	b.n	d75dc <_strtod_r+0x4ac>
   d75f8:	b10b      	cbz	r3, d75fe <_strtod_r+0x4ce>
   d75fa:	4682      	mov	sl, r0
   d75fc:	468b      	mov	fp, r1
   d75fe:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7602:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d7606:	4652      	mov	r2, sl
   d7608:	465b      	mov	r3, fp
   d760a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d760e:	f7ff f9ab 	bl	d6968 <__aeabi_dmul>
   d7612:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7616:	468b      	mov	fp, r1
   d7618:	460a      	mov	r2, r1
   d761a:	0d1b      	lsrs	r3, r3, #20
   d761c:	493b      	ldr	r1, [pc, #236]	; (d770c <_strtod_r+0x5dc>)
   d761e:	051b      	lsls	r3, r3, #20
   d7620:	428b      	cmp	r3, r1
   d7622:	4682      	mov	sl, r0
   d7624:	d8c7      	bhi.n	d75b6 <_strtod_r+0x486>
   d7626:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d762a:	428b      	cmp	r3, r1
   d762c:	bf86      	itte	hi
   d762e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d771c <_strtod_r+0x5ec>
   d7632:	f04f 3aff 	movhi.w	sl, #4294967295
   d7636:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d763a:	e071      	b.n	d7720 <_strtod_r+0x5f0>
   d763c:	d070      	beq.n	d7720 <_strtod_r+0x5f0>
   d763e:	4264      	negs	r4, r4
   d7640:	f014 020f 	ands.w	r2, r4, #15
   d7644:	d00a      	beq.n	d765c <_strtod_r+0x52c>
   d7646:	4b2f      	ldr	r3, [pc, #188]	; (d7704 <_strtod_r+0x5d4>)
   d7648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d764c:	4650      	mov	r0, sl
   d764e:	4659      	mov	r1, fp
   d7650:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7654:	f7ff fab2 	bl	d6bbc <__aeabi_ddiv>
   d7658:	4682      	mov	sl, r0
   d765a:	468b      	mov	fp, r1
   d765c:	1124      	asrs	r4, r4, #4
   d765e:	d05f      	beq.n	d7720 <_strtod_r+0x5f0>
   d7660:	2c1f      	cmp	r4, #31
   d7662:	dd04      	ble.n	d766e <_strtod_r+0x53e>
   d7664:	2400      	movs	r4, #0
   d7666:	4625      	mov	r5, r4
   d7668:	9405      	str	r4, [sp, #20]
   d766a:	9404      	str	r4, [sp, #16]
   d766c:	e130      	b.n	d78d0 <_strtod_r+0x7a0>
   d766e:	f014 0f10 	tst.w	r4, #16
   d7672:	bf0c      	ite	eq
   d7674:	2300      	moveq	r3, #0
   d7676:	236a      	movne	r3, #106	; 0x6a
   d7678:	4e25      	ldr	r6, [pc, #148]	; (d7710 <_strtod_r+0x5e0>)
   d767a:	9303      	str	r3, [sp, #12]
   d767c:	4650      	mov	r0, sl
   d767e:	4659      	mov	r1, fp
   d7680:	2300      	movs	r3, #0
   d7682:	2c00      	cmp	r4, #0
   d7684:	dd09      	ble.n	d769a <_strtod_r+0x56a>
   d7686:	07e2      	lsls	r2, r4, #31
   d7688:	d504      	bpl.n	d7694 <_strtod_r+0x564>
   d768a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d768e:	f7ff f96b 	bl	d6968 <__aeabi_dmul>
   d7692:	2301      	movs	r3, #1
   d7694:	1064      	asrs	r4, r4, #1
   d7696:	3608      	adds	r6, #8
   d7698:	e7f3      	b.n	d7682 <_strtod_r+0x552>
   d769a:	b10b      	cbz	r3, d76a0 <_strtod_r+0x570>
   d769c:	4682      	mov	sl, r0
   d769e:	468b      	mov	fp, r1
   d76a0:	9b03      	ldr	r3, [sp, #12]
   d76a2:	b1eb      	cbz	r3, d76e0 <_strtod_r+0x5b0>
   d76a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d76a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d76ac:	2b00      	cmp	r3, #0
   d76ae:	4659      	mov	r1, fp
   d76b0:	dd16      	ble.n	d76e0 <_strtod_r+0x5b0>
   d76b2:	2b1f      	cmp	r3, #31
   d76b4:	dd0e      	ble.n	d76d4 <_strtod_r+0x5a4>
   d76b6:	2b34      	cmp	r3, #52	; 0x34
   d76b8:	bfde      	ittt	le
   d76ba:	3b20      	suble	r3, #32
   d76bc:	f04f 32ff 	movle.w	r2, #4294967295
   d76c0:	fa02 f303 	lslle.w	r3, r2, r3
   d76c4:	f04f 0a00 	mov.w	sl, #0
   d76c8:	bfcc      	ite	gt
   d76ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d76ce:	ea03 0b01 	andle.w	fp, r3, r1
   d76d2:	e005      	b.n	d76e0 <_strtod_r+0x5b0>
   d76d4:	f04f 32ff 	mov.w	r2, #4294967295
   d76d8:	fa02 f303 	lsl.w	r3, r2, r3
   d76dc:	ea03 0a0a 	and.w	sl, r3, sl
   d76e0:	2200      	movs	r2, #0
   d76e2:	2300      	movs	r3, #0
   d76e4:	4650      	mov	r0, sl
   d76e6:	4659      	mov	r1, fp
   d76e8:	f7ff fba6 	bl	d6e38 <__aeabi_dcmpeq>
   d76ec:	2800      	cmp	r0, #0
   d76ee:	d1b9      	bne.n	d7664 <_strtod_r+0x534>
   d76f0:	e018      	b.n	d7724 <_strtod_r+0x5f4>
   d76f2:	bf00      	nop
   d76f4:	000d8d9b 	.word	0x000d8d9b
   d76f8:	000d9038 	.word	0x000d9038
   d76fc:	000d8d91 	.word	0x000d8d91
   d7700:	000d9024 	.word	0x000d9024
   d7704:	000d9068 	.word	0x000d9068
   d7708:	000d9130 	.word	0x000d9130
   d770c:	7ca00000 	.word	0x7ca00000
   d7710:	000d9040 	.word	0x000d9040
   d7714:	7ff00000 	.word	0x7ff00000
   d7718:	fff80000 	.word	0xfff80000
   d771c:	7fefffff 	.word	0x7fefffff
   d7720:	2300      	movs	r3, #0
   d7722:	9303      	str	r3, [sp, #12]
   d7724:	9b05      	ldr	r3, [sp, #20]
   d7726:	9300      	str	r3, [sp, #0]
   d7728:	9a04      	ldr	r2, [sp, #16]
   d772a:	9907      	ldr	r1, [sp, #28]
   d772c:	9802      	ldr	r0, [sp, #8]
   d772e:	462b      	mov	r3, r5
   d7730:	f000 fec2 	bl	d84b8 <__s2b>
   d7734:	9005      	str	r0, [sp, #20]
   d7736:	2800      	cmp	r0, #0
   d7738:	f43f af3d 	beq.w	d75b6 <_strtod_r+0x486>
   d773c:	f1b9 0f00 	cmp.w	r9, #0
   d7740:	f1c9 0300 	rsb	r3, r9, #0
   d7744:	bfa8      	it	ge
   d7746:	2300      	movge	r3, #0
   d7748:	930d      	str	r3, [sp, #52]	; 0x34
   d774a:	2400      	movs	r4, #0
   d774c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7750:	9312      	str	r3, [sp, #72]	; 0x48
   d7752:	4625      	mov	r5, r4
   d7754:	9b05      	ldr	r3, [sp, #20]
   d7756:	9802      	ldr	r0, [sp, #8]
   d7758:	6859      	ldr	r1, [r3, #4]
   d775a:	f000 fe26 	bl	d83aa <_Balloc>
   d775e:	9004      	str	r0, [sp, #16]
   d7760:	2800      	cmp	r0, #0
   d7762:	f43f af2c 	beq.w	d75be <_strtod_r+0x48e>
   d7766:	9b05      	ldr	r3, [sp, #20]
   d7768:	691a      	ldr	r2, [r3, #16]
   d776a:	3202      	adds	r2, #2
   d776c:	f103 010c 	add.w	r1, r3, #12
   d7770:	0092      	lsls	r2, r2, #2
   d7772:	300c      	adds	r0, #12
   d7774:	f7ff fc52 	bl	d701c <memcpy>
   d7778:	aa1a      	add	r2, sp, #104	; 0x68
   d777a:	a919      	add	r1, sp, #100	; 0x64
   d777c:	ec4b ab10 	vmov	d0, sl, fp
   d7780:	9802      	ldr	r0, [sp, #8]
   d7782:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7786:	f001 f94c 	bl	d8a22 <__d2b>
   d778a:	9018      	str	r0, [sp, #96]	; 0x60
   d778c:	2800      	cmp	r0, #0
   d778e:	f43f af16 	beq.w	d75be <_strtod_r+0x48e>
   d7792:	2101      	movs	r1, #1
   d7794:	9802      	ldr	r0, [sp, #8]
   d7796:	f000 ff1a 	bl	d85ce <__i2b>
   d779a:	4605      	mov	r5, r0
   d779c:	2800      	cmp	r0, #0
   d779e:	f43f af0e 	beq.w	d75be <_strtod_r+0x48e>
   d77a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d77a4:	9903      	ldr	r1, [sp, #12]
   d77a6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d77a8:	2b00      	cmp	r3, #0
   d77aa:	bfad      	iteet	ge
   d77ac:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d77ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d77b0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d77b4:	eb02 0803 	addge.w	r8, r2, r3
   d77b8:	bfb8      	it	lt
   d77ba:	1ad2      	sublt	r2, r2, r3
   d77bc:	eba3 0301 	sub.w	r3, r3, r1
   d77c0:	4433      	add	r3, r6
   d77c2:	49b5      	ldr	r1, [pc, #724]	; (d7a98 <_strtod_r+0x968>)
   d77c4:	bfa8      	it	ge
   d77c6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d77c8:	3b01      	subs	r3, #1
   d77ca:	428b      	cmp	r3, r1
   d77cc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d77d0:	f280 808a 	bge.w	d78e8 <_strtod_r+0x7b8>
   d77d4:	1ac9      	subs	r1, r1, r3
   d77d6:	291f      	cmp	r1, #31
   d77d8:	bfc8      	it	gt
   d77da:	4fb0      	ldrgt	r7, [pc, #704]	; (d7a9c <_strtod_r+0x96c>)
   d77dc:	f04f 0901 	mov.w	r9, #1
   d77e0:	bfd4      	ite	le
   d77e2:	fa09 f301 	lslle.w	r3, r9, r1
   d77e6:	1aff      	subgt	r7, r7, r3
   d77e8:	eba6 0601 	sub.w	r6, r6, r1
   d77ec:	bfd9      	ittee	le
   d77ee:	9306      	strle	r3, [sp, #24]
   d77f0:	2700      	movle	r7, #0
   d77f2:	fa09 f707 	lslgt.w	r7, r9, r7
   d77f6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d77fa:	eb08 0906 	add.w	r9, r8, r6
   d77fe:	9b03      	ldr	r3, [sp, #12]
   d7800:	45c8      	cmp	r8, r9
   d7802:	4416      	add	r6, r2
   d7804:	441e      	add	r6, r3
   d7806:	4643      	mov	r3, r8
   d7808:	bfa8      	it	ge
   d780a:	464b      	movge	r3, r9
   d780c:	42b3      	cmp	r3, r6
   d780e:	bfa8      	it	ge
   d7810:	4633      	movge	r3, r6
   d7812:	2b00      	cmp	r3, #0
   d7814:	bfc2      	ittt	gt
   d7816:	ebc3 0909 	rsbgt	r9, r3, r9
   d781a:	1af6      	subgt	r6, r6, r3
   d781c:	ebc3 0808 	rsbgt	r8, r3, r8
   d7820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7822:	2b00      	cmp	r3, #0
   d7824:	d164      	bne.n	d78f0 <_strtod_r+0x7c0>
   d7826:	f1b9 0f00 	cmp.w	r9, #0
   d782a:	dc7a      	bgt.n	d7922 <_strtod_r+0x7f2>
   d782c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d782e:	2b00      	cmp	r3, #0
   d7830:	f040 8081 	bne.w	d7936 <_strtod_r+0x806>
   d7834:	2e00      	cmp	r6, #0
   d7836:	f300 8088 	bgt.w	d794a <_strtod_r+0x81a>
   d783a:	f1b8 0f00 	cmp.w	r8, #0
   d783e:	f300 808e 	bgt.w	d795e <_strtod_r+0x82e>
   d7842:	9a04      	ldr	r2, [sp, #16]
   d7844:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7846:	9802      	ldr	r0, [sp, #8]
   d7848:	f001 f817 	bl	d887a <__mdiff>
   d784c:	4604      	mov	r4, r0
   d784e:	2800      	cmp	r0, #0
   d7850:	f43f aeb5 	beq.w	d75be <_strtod_r+0x48e>
   d7854:	68c3      	ldr	r3, [r0, #12]
   d7856:	9307      	str	r3, [sp, #28]
   d7858:	2300      	movs	r3, #0
   d785a:	60c3      	str	r3, [r0, #12]
   d785c:	4629      	mov	r1, r5
   d785e:	f000 fff0 	bl	d8842 <__mcmp>
   d7862:	2800      	cmp	r0, #0
   d7864:	f280 8089 	bge.w	d797a <_strtod_r+0x84a>
   d7868:	9b07      	ldr	r3, [sp, #28]
   d786a:	2b00      	cmp	r3, #0
   d786c:	f040 8204 	bne.w	d7c78 <_strtod_r+0xb48>
   d7870:	f1ba 0f00 	cmp.w	sl, #0
   d7874:	f040 8200 	bne.w	d7c78 <_strtod_r+0xb48>
   d7878:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d787c:	2b00      	cmp	r3, #0
   d787e:	f040 81fb 	bne.w	d7c78 <_strtod_r+0xb48>
   d7882:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7886:	0d1b      	lsrs	r3, r3, #20
   d7888:	051b      	lsls	r3, r3, #20
   d788a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d788e:	f240 81f3 	bls.w	d7c78 <_strtod_r+0xb48>
   d7892:	6963      	ldr	r3, [r4, #20]
   d7894:	2b00      	cmp	r3, #0
   d7896:	d06c      	beq.n	d7972 <_strtod_r+0x842>
   d7898:	4621      	mov	r1, r4
   d789a:	2201      	movs	r2, #1
   d789c:	9802      	ldr	r0, [sp, #8]
   d789e:	f000 ff7f 	bl	d87a0 <__lshift>
   d78a2:	4629      	mov	r1, r5
   d78a4:	4604      	mov	r4, r0
   d78a6:	f000 ffcc 	bl	d8842 <__mcmp>
   d78aa:	2800      	cmp	r0, #0
   d78ac:	f340 81e4 	ble.w	d7c78 <_strtod_r+0xb48>
   d78b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d78b4:	9a03      	ldr	r2, [sp, #12]
   d78b6:	0d1b      	lsrs	r3, r3, #20
   d78b8:	051b      	lsls	r3, r3, #20
   d78ba:	2a00      	cmp	r2, #0
   d78bc:	f000 808c 	beq.w	d79d8 <_strtod_r+0x8a8>
   d78c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d78c4:	f300 8088 	bgt.w	d79d8 <_strtod_r+0x8a8>
   d78c8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d78cc:	f300 81d6 	bgt.w	d7c7c <_strtod_r+0xb4c>
   d78d0:	9a02      	ldr	r2, [sp, #8]
   d78d2:	2322      	movs	r3, #34	; 0x22
   d78d4:	f04f 0a00 	mov.w	sl, #0
   d78d8:	f04f 0b00 	mov.w	fp, #0
   d78dc:	6013      	str	r3, [r2, #0]
   d78de:	9b05      	ldr	r3, [sp, #20]
   d78e0:	2b00      	cmp	r3, #0
   d78e2:	f040 81dc 	bne.w	d7c9e <_strtod_r+0xb6e>
   d78e6:	e1ee      	b.n	d7cc6 <_strtod_r+0xb96>
   d78e8:	2301      	movs	r3, #1
   d78ea:	2700      	movs	r7, #0
   d78ec:	9306      	str	r3, [sp, #24]
   d78ee:	e784      	b.n	d77fa <_strtod_r+0x6ca>
   d78f0:	4629      	mov	r1, r5
   d78f2:	461a      	mov	r2, r3
   d78f4:	9802      	ldr	r0, [sp, #8]
   d78f6:	f000 ff05 	bl	d8704 <__pow5mult>
   d78fa:	4605      	mov	r5, r0
   d78fc:	2800      	cmp	r0, #0
   d78fe:	f43f ae5e 	beq.w	d75be <_strtod_r+0x48e>
   d7902:	4601      	mov	r1, r0
   d7904:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7906:	9802      	ldr	r0, [sp, #8]
   d7908:	f000 fe6a 	bl	d85e0 <__multiply>
   d790c:	9007      	str	r0, [sp, #28]
   d790e:	2800      	cmp	r0, #0
   d7910:	f43f ae55 	beq.w	d75be <_strtod_r+0x48e>
   d7914:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7916:	9802      	ldr	r0, [sp, #8]
   d7918:	f000 fd7c 	bl	d8414 <_Bfree>
   d791c:	9b07      	ldr	r3, [sp, #28]
   d791e:	9318      	str	r3, [sp, #96]	; 0x60
   d7920:	e781      	b.n	d7826 <_strtod_r+0x6f6>
   d7922:	464a      	mov	r2, r9
   d7924:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7926:	9802      	ldr	r0, [sp, #8]
   d7928:	f000 ff3a 	bl	d87a0 <__lshift>
   d792c:	9018      	str	r0, [sp, #96]	; 0x60
   d792e:	2800      	cmp	r0, #0
   d7930:	f47f af7c 	bne.w	d782c <_strtod_r+0x6fc>
   d7934:	e643      	b.n	d75be <_strtod_r+0x48e>
   d7936:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7938:	9904      	ldr	r1, [sp, #16]
   d793a:	9802      	ldr	r0, [sp, #8]
   d793c:	f000 fee2 	bl	d8704 <__pow5mult>
   d7940:	9004      	str	r0, [sp, #16]
   d7942:	2800      	cmp	r0, #0
   d7944:	f47f af76 	bne.w	d7834 <_strtod_r+0x704>
   d7948:	e639      	b.n	d75be <_strtod_r+0x48e>
   d794a:	4632      	mov	r2, r6
   d794c:	9904      	ldr	r1, [sp, #16]
   d794e:	9802      	ldr	r0, [sp, #8]
   d7950:	f000 ff26 	bl	d87a0 <__lshift>
   d7954:	9004      	str	r0, [sp, #16]
   d7956:	2800      	cmp	r0, #0
   d7958:	f47f af6f 	bne.w	d783a <_strtod_r+0x70a>
   d795c:	e62f      	b.n	d75be <_strtod_r+0x48e>
   d795e:	4629      	mov	r1, r5
   d7960:	4642      	mov	r2, r8
   d7962:	9802      	ldr	r0, [sp, #8]
   d7964:	f000 ff1c 	bl	d87a0 <__lshift>
   d7968:	4605      	mov	r5, r0
   d796a:	2800      	cmp	r0, #0
   d796c:	f47f af69 	bne.w	d7842 <_strtod_r+0x712>
   d7970:	e625      	b.n	d75be <_strtod_r+0x48e>
   d7972:	6923      	ldr	r3, [r4, #16]
   d7974:	2b01      	cmp	r3, #1
   d7976:	dc8f      	bgt.n	d7898 <_strtod_r+0x768>
   d7978:	e17e      	b.n	d7c78 <_strtod_r+0xb48>
   d797a:	d161      	bne.n	d7a40 <_strtod_r+0x910>
   d797c:	9a07      	ldr	r2, [sp, #28]
   d797e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7982:	b322      	cbz	r2, d79ce <_strtod_r+0x89e>
   d7984:	4946      	ldr	r1, [pc, #280]	; (d7aa0 <_strtod_r+0x970>)
   d7986:	428b      	cmp	r3, r1
   d7988:	465a      	mov	r2, fp
   d798a:	d12e      	bne.n	d79ea <_strtod_r+0x8ba>
   d798c:	9b03      	ldr	r3, [sp, #12]
   d798e:	4651      	mov	r1, sl
   d7990:	b163      	cbz	r3, d79ac <_strtod_r+0x87c>
   d7992:	4b44      	ldr	r3, [pc, #272]	; (d7aa4 <_strtod_r+0x974>)
   d7994:	4013      	ands	r3, r2
   d7996:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d799a:	d807      	bhi.n	d79ac <_strtod_r+0x87c>
   d799c:	0d1b      	lsrs	r3, r3, #20
   d799e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d79a2:	f04f 30ff 	mov.w	r0, #4294967295
   d79a6:	fa00 f303 	lsl.w	r3, r0, r3
   d79aa:	e001      	b.n	d79b0 <_strtod_r+0x880>
   d79ac:	f04f 33ff 	mov.w	r3, #4294967295
   d79b0:	428b      	cmp	r3, r1
   d79b2:	d11a      	bne.n	d79ea <_strtod_r+0x8ba>
   d79b4:	493c      	ldr	r1, [pc, #240]	; (d7aa8 <_strtod_r+0x978>)
   d79b6:	428a      	cmp	r2, r1
   d79b8:	d102      	bne.n	d79c0 <_strtod_r+0x890>
   d79ba:	3301      	adds	r3, #1
   d79bc:	f43f adff 	beq.w	d75be <_strtod_r+0x48e>
   d79c0:	4b38      	ldr	r3, [pc, #224]	; (d7aa4 <_strtod_r+0x974>)
   d79c2:	4013      	ands	r3, r2
   d79c4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d79c8:	f04f 0a00 	mov.w	sl, #0
   d79cc:	e154      	b.n	d7c78 <_strtod_r+0xb48>
   d79ce:	b963      	cbnz	r3, d79ea <_strtod_r+0x8ba>
   d79d0:	f1ba 0f00 	cmp.w	sl, #0
   d79d4:	d109      	bne.n	d79ea <_strtod_r+0x8ba>
   d79d6:	e76b      	b.n	d78b0 <_strtod_r+0x780>
   d79d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d79dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d79e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d79e4:	f04f 3aff 	mov.w	sl, #4294967295
   d79e8:	e146      	b.n	d7c78 <_strtod_r+0xb48>
   d79ea:	b117      	cbz	r7, d79f2 <_strtod_r+0x8c2>
   d79ec:	ea17 0f0b 	tst.w	r7, fp
   d79f0:	e002      	b.n	d79f8 <_strtod_r+0x8c8>
   d79f2:	9b06      	ldr	r3, [sp, #24]
   d79f4:	ea13 0f0a 	tst.w	r3, sl
   d79f8:	f000 813e 	beq.w	d7c78 <_strtod_r+0xb48>
   d79fc:	9b07      	ldr	r3, [sp, #28]
   d79fe:	9a03      	ldr	r2, [sp, #12]
   d7a00:	4650      	mov	r0, sl
   d7a02:	4659      	mov	r1, fp
   d7a04:	b153      	cbz	r3, d7a1c <_strtod_r+0x8ec>
   d7a06:	f7ff fb74 	bl	d70f2 <sulp>
   d7a0a:	4602      	mov	r2, r0
   d7a0c:	460b      	mov	r3, r1
   d7a0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7a12:	f7fe fdf7 	bl	d6604 <__adddf3>
   d7a16:	4682      	mov	sl, r0
   d7a18:	468b      	mov	fp, r1
   d7a1a:	e12d      	b.n	d7c78 <_strtod_r+0xb48>
   d7a1c:	f7ff fb69 	bl	d70f2 <sulp>
   d7a20:	4602      	mov	r2, r0
   d7a22:	460b      	mov	r3, r1
   d7a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7a28:	f7fe fdea 	bl	d6600 <__aeabi_dsub>
   d7a2c:	2200      	movs	r2, #0
   d7a2e:	2300      	movs	r3, #0
   d7a30:	4682      	mov	sl, r0
   d7a32:	468b      	mov	fp, r1
   d7a34:	f7ff fa00 	bl	d6e38 <__aeabi_dcmpeq>
   d7a38:	2800      	cmp	r0, #0
   d7a3a:	f47f af49 	bne.w	d78d0 <_strtod_r+0x7a0>
   d7a3e:	e11b      	b.n	d7c78 <_strtod_r+0xb48>
   d7a40:	4629      	mov	r1, r5
   d7a42:	4620      	mov	r0, r4
   d7a44:	f001 f83b 	bl	d8abe <__ratio>
   d7a48:	ec57 6b10 	vmov	r6, r7, d0
   d7a4c:	2200      	movs	r2, #0
   d7a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7a52:	ee10 0a10 	vmov	r0, s0
   d7a56:	4639      	mov	r1, r7
   d7a58:	f7ff fa02 	bl	d6e60 <__aeabi_dcmple>
   d7a5c:	2800      	cmp	r0, #0
   d7a5e:	d042      	beq.n	d7ae6 <_strtod_r+0x9b6>
   d7a60:	9b07      	ldr	r3, [sp, #28]
   d7a62:	b123      	cbz	r3, d7a6e <_strtod_r+0x93e>
   d7a64:	f04f 0800 	mov.w	r8, #0
   d7a68:	f8df 9040 	ldr.w	r9, [pc, #64]	; d7aac <_strtod_r+0x97c>
   d7a6c:	e011      	b.n	d7a92 <_strtod_r+0x962>
   d7a6e:	f1ba 0f00 	cmp.w	sl, #0
   d7a72:	d103      	bne.n	d7a7c <_strtod_r+0x94c>
   d7a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7a78:	b93b      	cbnz	r3, d7a8a <_strtod_r+0x95a>
   d7a7a:	e01b      	b.n	d7ab4 <_strtod_r+0x984>
   d7a7c:	f1ba 0f01 	cmp.w	sl, #1
   d7a80:	d103      	bne.n	d7a8a <_strtod_r+0x95a>
   d7a82:	f1bb 0f00 	cmp.w	fp, #0
   d7a86:	f43f af23 	beq.w	d78d0 <_strtod_r+0x7a0>
   d7a8a:	f8df 9024 	ldr.w	r9, [pc, #36]	; d7ab0 <_strtod_r+0x980>
   d7a8e:	f04f 0800 	mov.w	r8, #0
   d7a92:	2600      	movs	r6, #0
   d7a94:	4f05      	ldr	r7, [pc, #20]	; (d7aac <_strtod_r+0x97c>)
   d7a96:	e039      	b.n	d7b0c <_strtod_r+0x9dc>
   d7a98:	fffffc02 	.word	0xfffffc02
   d7a9c:	fffffbe2 	.word	0xfffffbe2
   d7aa0:	000fffff 	.word	0x000fffff
   d7aa4:	7ff00000 	.word	0x7ff00000
   d7aa8:	7fefffff 	.word	0x7fefffff
   d7aac:	3ff00000 	.word	0x3ff00000
   d7ab0:	bff00000 	.word	0xbff00000
   d7ab4:	2200      	movs	r2, #0
   d7ab6:	4b98      	ldr	r3, [pc, #608]	; (d7d18 <_strtod_r+0xbe8>)
   d7ab8:	4630      	mov	r0, r6
   d7aba:	4639      	mov	r1, r7
   d7abc:	f7ff f9c6 	bl	d6e4c <__aeabi_dcmplt>
   d7ac0:	b940      	cbnz	r0, d7ad4 <_strtod_r+0x9a4>
   d7ac2:	4630      	mov	r0, r6
   d7ac4:	4639      	mov	r1, r7
   d7ac6:	2200      	movs	r2, #0
   d7ac8:	4b94      	ldr	r3, [pc, #592]	; (d7d1c <_strtod_r+0xbec>)
   d7aca:	f7fe ff4d 	bl	d6968 <__aeabi_dmul>
   d7ace:	4606      	mov	r6, r0
   d7ad0:	460f      	mov	r7, r1
   d7ad2:	e001      	b.n	d7ad8 <_strtod_r+0x9a8>
   d7ad4:	4f91      	ldr	r7, [pc, #580]	; (d7d1c <_strtod_r+0xbec>)
   d7ad6:	2600      	movs	r6, #0
   d7ad8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7adc:	9614      	str	r6, [sp, #80]	; 0x50
   d7ade:	9315      	str	r3, [sp, #84]	; 0x54
   d7ae0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d7ae4:	e012      	b.n	d7b0c <_strtod_r+0x9dc>
   d7ae6:	4b8d      	ldr	r3, [pc, #564]	; (d7d1c <_strtod_r+0xbec>)
   d7ae8:	4630      	mov	r0, r6
   d7aea:	4639      	mov	r1, r7
   d7aec:	2200      	movs	r2, #0
   d7aee:	f7fe ff3b 	bl	d6968 <__aeabi_dmul>
   d7af2:	9b07      	ldr	r3, [sp, #28]
   d7af4:	4606      	mov	r6, r0
   d7af6:	460f      	mov	r7, r1
   d7af8:	b923      	cbnz	r3, d7b04 <_strtod_r+0x9d4>
   d7afa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7afe:	900e      	str	r0, [sp, #56]	; 0x38
   d7b00:	930f      	str	r3, [sp, #60]	; 0x3c
   d7b02:	e001      	b.n	d7b08 <_strtod_r+0x9d8>
   d7b04:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d7b08:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d7b0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7b10:	0d1b      	lsrs	r3, r3, #20
   d7b12:	051b      	lsls	r3, r3, #20
   d7b14:	9306      	str	r3, [sp, #24]
   d7b16:	9a06      	ldr	r2, [sp, #24]
   d7b18:	4b81      	ldr	r3, [pc, #516]	; (d7d20 <_strtod_r+0xbf0>)
   d7b1a:	429a      	cmp	r2, r3
   d7b1c:	d12b      	bne.n	d7b76 <_strtod_r+0xa46>
   d7b1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7b22:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7b26:	ec4b ab10 	vmov	d0, sl, fp
   d7b2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d7b2e:	f000 ff03 	bl	d8938 <__ulp>
   d7b32:	4640      	mov	r0, r8
   d7b34:	ec53 2b10 	vmov	r2, r3, d0
   d7b38:	4649      	mov	r1, r9
   d7b3a:	f7fe ff15 	bl	d6968 <__aeabi_dmul>
   d7b3e:	4652      	mov	r2, sl
   d7b40:	465b      	mov	r3, fp
   d7b42:	f7fe fd5f 	bl	d6604 <__adddf3>
   d7b46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7b4a:	0d1b      	lsrs	r3, r3, #20
   d7b4c:	4a75      	ldr	r2, [pc, #468]	; (d7d24 <_strtod_r+0xbf4>)
   d7b4e:	051b      	lsls	r3, r3, #20
   d7b50:	4293      	cmp	r3, r2
   d7b52:	4682      	mov	sl, r0
   d7b54:	d90c      	bls.n	d7b70 <_strtod_r+0xa40>
   d7b56:	4b74      	ldr	r3, [pc, #464]	; (d7d28 <_strtod_r+0xbf8>)
   d7b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7b5a:	429a      	cmp	r2, r3
   d7b5c:	d103      	bne.n	d7b66 <_strtod_r+0xa36>
   d7b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b60:	3301      	adds	r3, #1
   d7b62:	f43f ad2c 	beq.w	d75be <_strtod_r+0x48e>
   d7b66:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7d28 <_strtod_r+0xbf8>
   d7b6a:	f04f 3aff 	mov.w	sl, #4294967295
   d7b6e:	e072      	b.n	d7c56 <_strtod_r+0xb26>
   d7b70:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d7b74:	e038      	b.n	d7be8 <_strtod_r+0xab8>
   d7b76:	9b03      	ldr	r3, [sp, #12]
   d7b78:	b333      	cbz	r3, d7bc8 <_strtod_r+0xa98>
   d7b7a:	9b06      	ldr	r3, [sp, #24]
   d7b7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7b80:	d822      	bhi.n	d7bc8 <_strtod_r+0xa98>
   d7b82:	a35d      	add	r3, pc, #372	; (adr r3, d7cf8 <_strtod_r+0xbc8>)
   d7b84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b88:	4630      	mov	r0, r6
   d7b8a:	4639      	mov	r1, r7
   d7b8c:	f7ff f968 	bl	d6e60 <__aeabi_dcmple>
   d7b90:	b1a8      	cbz	r0, d7bbe <_strtod_r+0xa8e>
   d7b92:	4639      	mov	r1, r7
   d7b94:	4630      	mov	r0, r6
   d7b96:	f7ff f9bf 	bl	d6f18 <__aeabi_d2uiz>
   d7b9a:	2800      	cmp	r0, #0
   d7b9c:	bf08      	it	eq
   d7b9e:	2001      	moveq	r0, #1
   d7ba0:	f7fe fe6c 	bl	d687c <__aeabi_ui2d>
   d7ba4:	9b07      	ldr	r3, [sp, #28]
   d7ba6:	4606      	mov	r6, r0
   d7ba8:	460f      	mov	r7, r1
   d7baa:	b923      	cbnz	r3, d7bb6 <_strtod_r+0xa86>
   d7bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7bb0:	9010      	str	r0, [sp, #64]	; 0x40
   d7bb2:	9311      	str	r3, [sp, #68]	; 0x44
   d7bb4:	e001      	b.n	d7bba <_strtod_r+0xa8a>
   d7bb6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d7bba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d7bbe:	9a06      	ldr	r2, [sp, #24]
   d7bc0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d7bc4:	ebc2 0903 	rsb	r9, r2, r3
   d7bc8:	ed9d 0b08 	vldr	d0, [sp, #32]
   d7bcc:	f000 feb4 	bl	d8938 <__ulp>
   d7bd0:	4640      	mov	r0, r8
   d7bd2:	ec53 2b10 	vmov	r2, r3, d0
   d7bd6:	4649      	mov	r1, r9
   d7bd8:	f7fe fec6 	bl	d6968 <__aeabi_dmul>
   d7bdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7be0:	f7fe fd10 	bl	d6604 <__adddf3>
   d7be4:	4682      	mov	sl, r0
   d7be6:	468b      	mov	fp, r1
   d7be8:	9b03      	ldr	r3, [sp, #12]
   d7bea:	bba3      	cbnz	r3, d7c56 <_strtod_r+0xb26>
   d7bec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7bf0:	0d1b      	lsrs	r3, r3, #20
   d7bf2:	9a06      	ldr	r2, [sp, #24]
   d7bf4:	051b      	lsls	r3, r3, #20
   d7bf6:	429a      	cmp	r2, r3
   d7bf8:	46d8      	mov	r8, fp
   d7bfa:	d12c      	bne.n	d7c56 <_strtod_r+0xb26>
   d7bfc:	4639      	mov	r1, r7
   d7bfe:	4630      	mov	r0, r6
   d7c00:	f7ff f962 	bl	d6ec8 <__aeabi_d2iz>
   d7c04:	f7fe fe4a 	bl	d689c <__aeabi_i2d>
   d7c08:	460b      	mov	r3, r1
   d7c0a:	4602      	mov	r2, r0
   d7c0c:	4639      	mov	r1, r7
   d7c0e:	4630      	mov	r0, r6
   d7c10:	f7fe fcf6 	bl	d6600 <__aeabi_dsub>
   d7c14:	9b07      	ldr	r3, [sp, #28]
   d7c16:	4606      	mov	r6, r0
   d7c18:	460f      	mov	r7, r1
   d7c1a:	b92b      	cbnz	r3, d7c28 <_strtod_r+0xaf8>
   d7c1c:	f1ba 0f00 	cmp.w	sl, #0
   d7c20:	d102      	bne.n	d7c28 <_strtod_r+0xaf8>
   d7c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7c26:	b183      	cbz	r3, d7c4a <_strtod_r+0xb1a>
   d7c28:	a335      	add	r3, pc, #212	; (adr r3, d7d00 <_strtod_r+0xbd0>)
   d7c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c2e:	4630      	mov	r0, r6
   d7c30:	4639      	mov	r1, r7
   d7c32:	f7ff f90b 	bl	d6e4c <__aeabi_dcmplt>
   d7c36:	2800      	cmp	r0, #0
   d7c38:	d131      	bne.n	d7c9e <_strtod_r+0xb6e>
   d7c3a:	a333      	add	r3, pc, #204	; (adr r3, d7d08 <_strtod_r+0xbd8>)
   d7c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c40:	4630      	mov	r0, r6
   d7c42:	4639      	mov	r1, r7
   d7c44:	f7ff f920 	bl	d6e88 <__aeabi_dcmpgt>
   d7c48:	e004      	b.n	d7c54 <_strtod_r+0xb24>
   d7c4a:	a331      	add	r3, pc, #196	; (adr r3, d7d10 <_strtod_r+0xbe0>)
   d7c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c50:	f7ff f8fc 	bl	d6e4c <__aeabi_dcmplt>
   d7c54:	bb18      	cbnz	r0, d7c9e <_strtod_r+0xb6e>
   d7c56:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7c58:	9802      	ldr	r0, [sp, #8]
   d7c5a:	f000 fbdb 	bl	d8414 <_Bfree>
   d7c5e:	9904      	ldr	r1, [sp, #16]
   d7c60:	9802      	ldr	r0, [sp, #8]
   d7c62:	f000 fbd7 	bl	d8414 <_Bfree>
   d7c66:	4629      	mov	r1, r5
   d7c68:	9802      	ldr	r0, [sp, #8]
   d7c6a:	f000 fbd3 	bl	d8414 <_Bfree>
   d7c6e:	4621      	mov	r1, r4
   d7c70:	9802      	ldr	r0, [sp, #8]
   d7c72:	f000 fbcf 	bl	d8414 <_Bfree>
   d7c76:	e56d      	b.n	d7754 <_strtod_r+0x624>
   d7c78:	9b03      	ldr	r3, [sp, #12]
   d7c7a:	b183      	cbz	r3, d7c9e <_strtod_r+0xb6e>
   d7c7c:	4b2b      	ldr	r3, [pc, #172]	; (d7d2c <_strtod_r+0xbfc>)
   d7c7e:	930b      	str	r3, [sp, #44]	; 0x2c
   d7c80:	2300      	movs	r3, #0
   d7c82:	930a      	str	r3, [sp, #40]	; 0x28
   d7c84:	4650      	mov	r0, sl
   d7c86:	4659      	mov	r1, fp
   d7c88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7c8c:	f7fe fe6c 	bl	d6968 <__aeabi_dmul>
   d7c90:	4682      	mov	sl, r0
   d7c92:	468b      	mov	fp, r1
   d7c94:	b919      	cbnz	r1, d7c9e <_strtod_r+0xb6e>
   d7c96:	b910      	cbnz	r0, d7c9e <_strtod_r+0xb6e>
   d7c98:	9a02      	ldr	r2, [sp, #8]
   d7c9a:	2322      	movs	r3, #34	; 0x22
   d7c9c:	6013      	str	r3, [r2, #0]
   d7c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7ca0:	9802      	ldr	r0, [sp, #8]
   d7ca2:	f000 fbb7 	bl	d8414 <_Bfree>
   d7ca6:	9904      	ldr	r1, [sp, #16]
   d7ca8:	9802      	ldr	r0, [sp, #8]
   d7caa:	f000 fbb3 	bl	d8414 <_Bfree>
   d7cae:	4629      	mov	r1, r5
   d7cb0:	9802      	ldr	r0, [sp, #8]
   d7cb2:	f000 fbaf 	bl	d8414 <_Bfree>
   d7cb6:	9905      	ldr	r1, [sp, #20]
   d7cb8:	9802      	ldr	r0, [sp, #8]
   d7cba:	f000 fbab 	bl	d8414 <_Bfree>
   d7cbe:	4621      	mov	r1, r4
   d7cc0:	9802      	ldr	r0, [sp, #8]
   d7cc2:	f000 fba7 	bl	d8414 <_Bfree>
   d7cc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7cc8:	b113      	cbz	r3, d7cd0 <_strtod_r+0xba0>
   d7cca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7cce:	6013      	str	r3, [r2, #0]
   d7cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7cd2:	b11b      	cbz	r3, d7cdc <_strtod_r+0xbac>
   d7cd4:	4652      	mov	r2, sl
   d7cd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7cda:	e007      	b.n	d7cec <_strtod_r+0xbbc>
   d7cdc:	4652      	mov	r2, sl
   d7cde:	465b      	mov	r3, fp
   d7ce0:	e004      	b.n	d7cec <_strtod_r+0xbbc>
   d7ce2:	2500      	movs	r5, #0
   d7ce4:	462a      	mov	r2, r5
   d7ce6:	2101      	movs	r1, #1
   d7ce8:	f7ff bb41 	b.w	d736e <_strtod_r+0x23e>
   d7cec:	ec43 2b10 	vmov	d0, r2, r3
   d7cf0:	b01d      	add	sp, #116	; 0x74
   d7cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7cf6:	bf00      	nop
   d7cf8:	ffc00000 	.word	0xffc00000
   d7cfc:	41dfffff 	.word	0x41dfffff
   d7d00:	94a03595 	.word	0x94a03595
   d7d04:	3fdfffff 	.word	0x3fdfffff
   d7d08:	35afe535 	.word	0x35afe535
   d7d0c:	3fe00000 	.word	0x3fe00000
   d7d10:	94a03595 	.word	0x94a03595
   d7d14:	3fcfffff 	.word	0x3fcfffff
   d7d18:	3ff00000 	.word	0x3ff00000
   d7d1c:	3fe00000 	.word	0x3fe00000
   d7d20:	7fe00000 	.word	0x7fe00000
   d7d24:	7c9fffff 	.word	0x7c9fffff
   d7d28:	7fefffff 	.word	0x7fefffff
   d7d2c:	39500000 	.word	0x39500000

000d7d30 <strtof>:
   d7d30:	b538      	push	{r3, r4, r5, lr}
   d7d32:	4b0e      	ldr	r3, [pc, #56]	; (d7d6c <strtof+0x3c>)
   d7d34:	460a      	mov	r2, r1
   d7d36:	4601      	mov	r1, r0
   d7d38:	6818      	ldr	r0, [r3, #0]
   d7d3a:	f7ff f9f9 	bl	d7130 <_strtod_r>
   d7d3e:	ec55 4b10 	vmov	r4, r5, d0
   d7d42:	ee10 2a10 	vmov	r2, s0
   d7d46:	462b      	mov	r3, r5
   d7d48:	ee10 0a10 	vmov	r0, s0
   d7d4c:	4629      	mov	r1, r5
   d7d4e:	f7ff f8a5 	bl	d6e9c <__aeabi_dcmpun>
   d7d52:	b120      	cbz	r0, d7d5e <strtof+0x2e>
   d7d54:	2000      	movs	r0, #0
   d7d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7d5a:	f000 bf25 	b.w	d8ba8 <nanf>
   d7d5e:	4620      	mov	r0, r4
   d7d60:	4629      	mov	r1, r5
   d7d62:	f7ff f8f9 	bl	d6f58 <__aeabi_d2f>
   d7d66:	ee00 0a10 	vmov	s0, r0
   d7d6a:	bd38      	pop	{r3, r4, r5, pc}
   d7d6c:	2003e268 	.word	0x2003e268

000d7d70 <rshift>:
   d7d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d72:	6906      	ldr	r6, [r0, #16]
   d7d74:	114b      	asrs	r3, r1, #5
   d7d76:	42b3      	cmp	r3, r6
   d7d78:	f100 0514 	add.w	r5, r0, #20
   d7d7c:	da27      	bge.n	d7dce <rshift+0x5e>
   d7d7e:	f011 011f 	ands.w	r1, r1, #31
   d7d82:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d7d86:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d7d8a:	d101      	bne.n	d7d90 <rshift+0x20>
   d7d8c:	4629      	mov	r1, r5
   d7d8e:	e016      	b.n	d7dbe <rshift+0x4e>
   d7d90:	1d14      	adds	r4, r2, #4
   d7d92:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d7d96:	f1c1 0e20 	rsb	lr, r1, #32
   d7d9a:	40ca      	lsrs	r2, r1
   d7d9c:	462b      	mov	r3, r5
   d7d9e:	42b4      	cmp	r4, r6
   d7da0:	d209      	bcs.n	d7db6 <rshift+0x46>
   d7da2:	6827      	ldr	r7, [r4, #0]
   d7da4:	fa07 f70e 	lsl.w	r7, r7, lr
   d7da8:	433a      	orrs	r2, r7
   d7daa:	f843 2b04 	str.w	r2, [r3], #4
   d7dae:	f854 2b04 	ldr.w	r2, [r4], #4
   d7db2:	40ca      	lsrs	r2, r1
   d7db4:	e7f3      	b.n	d7d9e <rshift+0x2e>
   d7db6:	601a      	str	r2, [r3, #0]
   d7db8:	b152      	cbz	r2, d7dd0 <rshift+0x60>
   d7dba:	3304      	adds	r3, #4
   d7dbc:	e008      	b.n	d7dd0 <rshift+0x60>
   d7dbe:	42b2      	cmp	r2, r6
   d7dc0:	460b      	mov	r3, r1
   d7dc2:	d205      	bcs.n	d7dd0 <rshift+0x60>
   d7dc4:	f852 3b04 	ldr.w	r3, [r2], #4
   d7dc8:	f841 3b04 	str.w	r3, [r1], #4
   d7dcc:	e7f7      	b.n	d7dbe <rshift+0x4e>
   d7dce:	462b      	mov	r3, r5
   d7dd0:	1b5b      	subs	r3, r3, r5
   d7dd2:	109b      	asrs	r3, r3, #2
   d7dd4:	6103      	str	r3, [r0, #16]
   d7dd6:	b903      	cbnz	r3, d7dda <rshift+0x6a>
   d7dd8:	6143      	str	r3, [r0, #20]
   d7dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ddc <__hexdig_fun>:
   d7ddc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7de0:	2b09      	cmp	r3, #9
   d7de2:	d801      	bhi.n	d7de8 <__hexdig_fun+0xc>
   d7de4:	3820      	subs	r0, #32
   d7de6:	e00a      	b.n	d7dfe <__hexdig_fun+0x22>
   d7de8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d7dec:	2b05      	cmp	r3, #5
   d7dee:	d801      	bhi.n	d7df4 <__hexdig_fun+0x18>
   d7df0:	3847      	subs	r0, #71	; 0x47
   d7df2:	e004      	b.n	d7dfe <__hexdig_fun+0x22>
   d7df4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d7df8:	2b05      	cmp	r3, #5
   d7dfa:	d802      	bhi.n	d7e02 <__hexdig_fun+0x26>
   d7dfc:	3827      	subs	r0, #39	; 0x27
   d7dfe:	b2c0      	uxtb	r0, r0
   d7e00:	4770      	bx	lr
   d7e02:	2000      	movs	r0, #0
   d7e04:	4770      	bx	lr

000d7e06 <__gethex>:
   d7e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e0a:	b08b      	sub	sp, #44	; 0x2c
   d7e0c:	468a      	mov	sl, r1
   d7e0e:	4690      	mov	r8, r2
   d7e10:	9306      	str	r3, [sp, #24]
   d7e12:	9002      	str	r0, [sp, #8]
   d7e14:	f7ff f8fe 	bl	d7014 <_localeconv_r>
   d7e18:	6803      	ldr	r3, [r0, #0]
   d7e1a:	9303      	str	r3, [sp, #12]
   d7e1c:	4618      	mov	r0, r3
   d7e1e:	f7ff f94b 	bl	d70b8 <strlen>
   d7e22:	9b03      	ldr	r3, [sp, #12]
   d7e24:	9001      	str	r0, [sp, #4]
   d7e26:	4403      	add	r3, r0
   d7e28:	f04f 0b00 	mov.w	fp, #0
   d7e2c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d7e30:	9307      	str	r3, [sp, #28]
   d7e32:	f8da 3000 	ldr.w	r3, [sl]
   d7e36:	3302      	adds	r3, #2
   d7e38:	461f      	mov	r7, r3
   d7e3a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7e3e:	2830      	cmp	r0, #48	; 0x30
   d7e40:	d102      	bne.n	d7e48 <__gethex+0x42>
   d7e42:	f10b 0b01 	add.w	fp, fp, #1
   d7e46:	e7f7      	b.n	d7e38 <__gethex+0x32>
   d7e48:	f7ff ffc8 	bl	d7ddc <__hexdig_fun>
   d7e4c:	4604      	mov	r4, r0
   d7e4e:	b9e0      	cbnz	r0, d7e8a <__gethex+0x84>
   d7e50:	9a01      	ldr	r2, [sp, #4]
   d7e52:	9903      	ldr	r1, [sp, #12]
   d7e54:	4638      	mov	r0, r7
   d7e56:	f7ff f937 	bl	d70c8 <strncmp>
   d7e5a:	2800      	cmp	r0, #0
   d7e5c:	d134      	bne.n	d7ec8 <__gethex+0xc2>
   d7e5e:	9b01      	ldr	r3, [sp, #4]
   d7e60:	5cf8      	ldrb	r0, [r7, r3]
   d7e62:	18fe      	adds	r6, r7, r3
   d7e64:	f7ff ffba 	bl	d7ddc <__hexdig_fun>
   d7e68:	b380      	cbz	r0, d7ecc <__gethex+0xc6>
   d7e6a:	4633      	mov	r3, r6
   d7e6c:	7818      	ldrb	r0, [r3, #0]
   d7e6e:	2830      	cmp	r0, #48	; 0x30
   d7e70:	461f      	mov	r7, r3
   d7e72:	f103 0301 	add.w	r3, r3, #1
   d7e76:	d0f9      	beq.n	d7e6c <__gethex+0x66>
   d7e78:	f7ff ffb0 	bl	d7ddc <__hexdig_fun>
   d7e7c:	fab0 f580 	clz	r5, r0
   d7e80:	096d      	lsrs	r5, r5, #5
   d7e82:	4634      	mov	r4, r6
   d7e84:	f04f 0b01 	mov.w	fp, #1
   d7e88:	e001      	b.n	d7e8e <__gethex+0x88>
   d7e8a:	2500      	movs	r5, #0
   d7e8c:	462c      	mov	r4, r5
   d7e8e:	463a      	mov	r2, r7
   d7e90:	4616      	mov	r6, r2
   d7e92:	3201      	adds	r2, #1
   d7e94:	7830      	ldrb	r0, [r6, #0]
   d7e96:	f7ff ffa1 	bl	d7ddc <__hexdig_fun>
   d7e9a:	2800      	cmp	r0, #0
   d7e9c:	d1f8      	bne.n	d7e90 <__gethex+0x8a>
   d7e9e:	9a01      	ldr	r2, [sp, #4]
   d7ea0:	9903      	ldr	r1, [sp, #12]
   d7ea2:	4630      	mov	r0, r6
   d7ea4:	f7ff f910 	bl	d70c8 <strncmp>
   d7ea8:	b950      	cbnz	r0, d7ec0 <__gethex+0xba>
   d7eaa:	b954      	cbnz	r4, d7ec2 <__gethex+0xbc>
   d7eac:	9b01      	ldr	r3, [sp, #4]
   d7eae:	18f4      	adds	r4, r6, r3
   d7eb0:	4622      	mov	r2, r4
   d7eb2:	4616      	mov	r6, r2
   d7eb4:	3201      	adds	r2, #1
   d7eb6:	7830      	ldrb	r0, [r6, #0]
   d7eb8:	f7ff ff90 	bl	d7ddc <__hexdig_fun>
   d7ebc:	2800      	cmp	r0, #0
   d7ebe:	d1f8      	bne.n	d7eb2 <__gethex+0xac>
   d7ec0:	b134      	cbz	r4, d7ed0 <__gethex+0xca>
   d7ec2:	1ba4      	subs	r4, r4, r6
   d7ec4:	00a4      	lsls	r4, r4, #2
   d7ec6:	e003      	b.n	d7ed0 <__gethex+0xca>
   d7ec8:	463e      	mov	r6, r7
   d7eca:	e000      	b.n	d7ece <__gethex+0xc8>
   d7ecc:	4604      	mov	r4, r0
   d7ece:	2501      	movs	r5, #1
   d7ed0:	7833      	ldrb	r3, [r6, #0]
   d7ed2:	2b50      	cmp	r3, #80	; 0x50
   d7ed4:	d001      	beq.n	d7eda <__gethex+0xd4>
   d7ed6:	2b70      	cmp	r3, #112	; 0x70
   d7ed8:	d12a      	bne.n	d7f30 <__gethex+0x12a>
   d7eda:	7873      	ldrb	r3, [r6, #1]
   d7edc:	2b2b      	cmp	r3, #43	; 0x2b
   d7ede:	d008      	beq.n	d7ef2 <__gethex+0xec>
   d7ee0:	2b2d      	cmp	r3, #45	; 0x2d
   d7ee2:	d003      	beq.n	d7eec <__gethex+0xe6>
   d7ee4:	1c71      	adds	r1, r6, #1
   d7ee6:	f04f 0900 	mov.w	r9, #0
   d7eea:	e005      	b.n	d7ef8 <__gethex+0xf2>
   d7eec:	f04f 0901 	mov.w	r9, #1
   d7ef0:	e001      	b.n	d7ef6 <__gethex+0xf0>
   d7ef2:	f04f 0900 	mov.w	r9, #0
   d7ef6:	1cb1      	adds	r1, r6, #2
   d7ef8:	7808      	ldrb	r0, [r1, #0]
   d7efa:	f7ff ff6f 	bl	d7ddc <__hexdig_fun>
   d7efe:	1e43      	subs	r3, r0, #1
   d7f00:	b2db      	uxtb	r3, r3
   d7f02:	2b18      	cmp	r3, #24
   d7f04:	d814      	bhi.n	d7f30 <__gethex+0x12a>
   d7f06:	f1a0 0210 	sub.w	r2, r0, #16
   d7f0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d7f0e:	f7ff ff65 	bl	d7ddc <__hexdig_fun>
   d7f12:	1e43      	subs	r3, r0, #1
   d7f14:	b2db      	uxtb	r3, r3
   d7f16:	2b18      	cmp	r3, #24
   d7f18:	d804      	bhi.n	d7f24 <__gethex+0x11e>
   d7f1a:	230a      	movs	r3, #10
   d7f1c:	fb03 0202 	mla	r2, r3, r2, r0
   d7f20:	3a10      	subs	r2, #16
   d7f22:	e7f2      	b.n	d7f0a <__gethex+0x104>
   d7f24:	f1b9 0f00 	cmp.w	r9, #0
   d7f28:	d000      	beq.n	d7f2c <__gethex+0x126>
   d7f2a:	4252      	negs	r2, r2
   d7f2c:	4414      	add	r4, r2
   d7f2e:	e000      	b.n	d7f32 <__gethex+0x12c>
   d7f30:	4631      	mov	r1, r6
   d7f32:	f8ca 1000 	str.w	r1, [sl]
   d7f36:	b12d      	cbz	r5, d7f44 <__gethex+0x13e>
   d7f38:	f1bb 0f00 	cmp.w	fp, #0
   d7f3c:	bf14      	ite	ne
   d7f3e:	2000      	movne	r0, #0
   d7f40:	2006      	moveq	r0, #6
   d7f42:	e17c      	b.n	d823e <__gethex+0x438>
   d7f44:	1bf3      	subs	r3, r6, r7
   d7f46:	3b01      	subs	r3, #1
   d7f48:	4629      	mov	r1, r5
   d7f4a:	2b07      	cmp	r3, #7
   d7f4c:	dd02      	ble.n	d7f54 <__gethex+0x14e>
   d7f4e:	3101      	adds	r1, #1
   d7f50:	105b      	asrs	r3, r3, #1
   d7f52:	e7fa      	b.n	d7f4a <__gethex+0x144>
   d7f54:	9802      	ldr	r0, [sp, #8]
   d7f56:	f000 fa28 	bl	d83aa <_Balloc>
   d7f5a:	9b01      	ldr	r3, [sp, #4]
   d7f5c:	f100 0a14 	add.w	sl, r0, #20
   d7f60:	f04f 0900 	mov.w	r9, #0
   d7f64:	f1c3 0301 	rsb	r3, r3, #1
   d7f68:	4605      	mov	r5, r0
   d7f6a:	f8cd a010 	str.w	sl, [sp, #16]
   d7f6e:	46cb      	mov	fp, r9
   d7f70:	9308      	str	r3, [sp, #32]
   d7f72:	42b7      	cmp	r7, r6
   d7f74:	d22f      	bcs.n	d7fd6 <__gethex+0x1d0>
   d7f76:	1e73      	subs	r3, r6, #1
   d7f78:	9305      	str	r3, [sp, #20]
   d7f7a:	9a07      	ldr	r2, [sp, #28]
   d7f7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d7f80:	4293      	cmp	r3, r2
   d7f82:	d00b      	beq.n	d7f9c <__gethex+0x196>
   d7f84:	f1bb 0f20 	cmp.w	fp, #32
   d7f88:	d116      	bne.n	d7fb8 <__gethex+0x1b2>
   d7f8a:	9b04      	ldr	r3, [sp, #16]
   d7f8c:	f8c3 9000 	str.w	r9, [r3]
   d7f90:	3304      	adds	r3, #4
   d7f92:	f04f 0900 	mov.w	r9, #0
   d7f96:	9304      	str	r3, [sp, #16]
   d7f98:	46cb      	mov	fp, r9
   d7f9a:	e00d      	b.n	d7fb8 <__gethex+0x1b2>
   d7f9c:	9b05      	ldr	r3, [sp, #20]
   d7f9e:	9a08      	ldr	r2, [sp, #32]
   d7fa0:	4413      	add	r3, r2
   d7fa2:	429f      	cmp	r7, r3
   d7fa4:	d8ee      	bhi.n	d7f84 <__gethex+0x17e>
   d7fa6:	4618      	mov	r0, r3
   d7fa8:	9a01      	ldr	r2, [sp, #4]
   d7faa:	9903      	ldr	r1, [sp, #12]
   d7fac:	9309      	str	r3, [sp, #36]	; 0x24
   d7fae:	f7ff f88b 	bl	d70c8 <strncmp>
   d7fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7fb4:	b168      	cbz	r0, d7fd2 <__gethex+0x1cc>
   d7fb6:	e7e5      	b.n	d7f84 <__gethex+0x17e>
   d7fb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d7fbc:	f7ff ff0e 	bl	d7ddc <__hexdig_fun>
   d7fc0:	f000 000f 	and.w	r0, r0, #15
   d7fc4:	fa00 f00b 	lsl.w	r0, r0, fp
   d7fc8:	9b05      	ldr	r3, [sp, #20]
   d7fca:	ea49 0900 	orr.w	r9, r9, r0
   d7fce:	f10b 0b04 	add.w	fp, fp, #4
   d7fd2:	461e      	mov	r6, r3
   d7fd4:	e7cd      	b.n	d7f72 <__gethex+0x16c>
   d7fd6:	9804      	ldr	r0, [sp, #16]
   d7fd8:	f840 9b04 	str.w	r9, [r0], #4
   d7fdc:	ebca 0000 	rsb	r0, sl, r0
   d7fe0:	1080      	asrs	r0, r0, #2
   d7fe2:	6128      	str	r0, [r5, #16]
   d7fe4:	0147      	lsls	r7, r0, #5
   d7fe6:	4648      	mov	r0, r9
   d7fe8:	f000 faa4 	bl	d8534 <__hi0bits>
   d7fec:	f8d8 6000 	ldr.w	r6, [r8]
   d7ff0:	1a38      	subs	r0, r7, r0
   d7ff2:	42b0      	cmp	r0, r6
   d7ff4:	dd26      	ble.n	d8044 <__gethex+0x23e>
   d7ff6:	1b87      	subs	r7, r0, r6
   d7ff8:	4639      	mov	r1, r7
   d7ffa:	4628      	mov	r0, r5
   d7ffc:	f000 fda3 	bl	d8b46 <__any_on>
   d8000:	b1c8      	cbz	r0, d8036 <__gethex+0x230>
   d8002:	1e7b      	subs	r3, r7, #1
   d8004:	1159      	asrs	r1, r3, #5
   d8006:	f003 021f 	and.w	r2, r3, #31
   d800a:	f04f 0901 	mov.w	r9, #1
   d800e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d8012:	fa09 f202 	lsl.w	r2, r9, r2
   d8016:	420a      	tst	r2, r1
   d8018:	d00e      	beq.n	d8038 <__gethex+0x232>
   d801a:	454b      	cmp	r3, r9
   d801c:	dc02      	bgt.n	d8024 <__gethex+0x21e>
   d801e:	f04f 0902 	mov.w	r9, #2
   d8022:	e009      	b.n	d8038 <__gethex+0x232>
   d8024:	1eb9      	subs	r1, r7, #2
   d8026:	4628      	mov	r0, r5
   d8028:	f000 fd8d 	bl	d8b46 <__any_on>
   d802c:	2800      	cmp	r0, #0
   d802e:	d0f6      	beq.n	d801e <__gethex+0x218>
   d8030:	f04f 0903 	mov.w	r9, #3
   d8034:	e000      	b.n	d8038 <__gethex+0x232>
   d8036:	4681      	mov	r9, r0
   d8038:	4639      	mov	r1, r7
   d803a:	4628      	mov	r0, r5
   d803c:	f7ff fe98 	bl	d7d70 <rshift>
   d8040:	443c      	add	r4, r7
   d8042:	e00c      	b.n	d805e <__gethex+0x258>
   d8044:	da09      	bge.n	d805a <__gethex+0x254>
   d8046:	1a37      	subs	r7, r6, r0
   d8048:	4629      	mov	r1, r5
   d804a:	463a      	mov	r2, r7
   d804c:	9802      	ldr	r0, [sp, #8]
   d804e:	f000 fba7 	bl	d87a0 <__lshift>
   d8052:	1be4      	subs	r4, r4, r7
   d8054:	4605      	mov	r5, r0
   d8056:	f100 0a14 	add.w	sl, r0, #20
   d805a:	f04f 0900 	mov.w	r9, #0
   d805e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8062:	429c      	cmp	r4, r3
   d8064:	dd08      	ble.n	d8078 <__gethex+0x272>
   d8066:	9802      	ldr	r0, [sp, #8]
   d8068:	4629      	mov	r1, r5
   d806a:	f000 f9d3 	bl	d8414 <_Bfree>
   d806e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8070:	2300      	movs	r3, #0
   d8072:	6013      	str	r3, [r2, #0]
   d8074:	20a3      	movs	r0, #163	; 0xa3
   d8076:	e0e2      	b.n	d823e <__gethex+0x438>
   d8078:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d807c:	4284      	cmp	r4, r0
   d807e:	da53      	bge.n	d8128 <__gethex+0x322>
   d8080:	1b04      	subs	r4, r0, r4
   d8082:	42a6      	cmp	r6, r4
   d8084:	dc2e      	bgt.n	d80e4 <__gethex+0x2de>
   d8086:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d808a:	2b02      	cmp	r3, #2
   d808c:	d01a      	beq.n	d80c4 <__gethex+0x2be>
   d808e:	2b03      	cmp	r3, #3
   d8090:	d01c      	beq.n	d80cc <__gethex+0x2c6>
   d8092:	2b01      	cmp	r3, #1
   d8094:	d11d      	bne.n	d80d2 <__gethex+0x2cc>
   d8096:	42a6      	cmp	r6, r4
   d8098:	d11b      	bne.n	d80d2 <__gethex+0x2cc>
   d809a:	2e01      	cmp	r6, #1
   d809c:	dc0b      	bgt.n	d80b6 <__gethex+0x2b0>
   d809e:	9a06      	ldr	r2, [sp, #24]
   d80a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d80a4:	6013      	str	r3, [r2, #0]
   d80a6:	2301      	movs	r3, #1
   d80a8:	612b      	str	r3, [r5, #16]
   d80aa:	f8ca 3000 	str.w	r3, [sl]
   d80ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d80b0:	2062      	movs	r0, #98	; 0x62
   d80b2:	601d      	str	r5, [r3, #0]
   d80b4:	e0c3      	b.n	d823e <__gethex+0x438>
   d80b6:	1e71      	subs	r1, r6, #1
   d80b8:	4628      	mov	r0, r5
   d80ba:	f000 fd44 	bl	d8b46 <__any_on>
   d80be:	2800      	cmp	r0, #0
   d80c0:	d1ed      	bne.n	d809e <__gethex+0x298>
   d80c2:	e006      	b.n	d80d2 <__gethex+0x2cc>
   d80c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d80c6:	2b00      	cmp	r3, #0
   d80c8:	d0e9      	beq.n	d809e <__gethex+0x298>
   d80ca:	e002      	b.n	d80d2 <__gethex+0x2cc>
   d80cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d80ce:	2b00      	cmp	r3, #0
   d80d0:	d1e5      	bne.n	d809e <__gethex+0x298>
   d80d2:	9802      	ldr	r0, [sp, #8]
   d80d4:	4629      	mov	r1, r5
   d80d6:	f000 f99d 	bl	d8414 <_Bfree>
   d80da:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d80dc:	2300      	movs	r3, #0
   d80de:	6013      	str	r3, [r2, #0]
   d80e0:	2050      	movs	r0, #80	; 0x50
   d80e2:	e0ac      	b.n	d823e <__gethex+0x438>
   d80e4:	1e67      	subs	r7, r4, #1
   d80e6:	f1b9 0f00 	cmp.w	r9, #0
   d80ea:	d106      	bne.n	d80fa <__gethex+0x2f4>
   d80ec:	b13f      	cbz	r7, d80fe <__gethex+0x2f8>
   d80ee:	4639      	mov	r1, r7
   d80f0:	4628      	mov	r0, r5
   d80f2:	f000 fd28 	bl	d8b46 <__any_on>
   d80f6:	4681      	mov	r9, r0
   d80f8:	e001      	b.n	d80fe <__gethex+0x2f8>
   d80fa:	f04f 0901 	mov.w	r9, #1
   d80fe:	117a      	asrs	r2, r7, #5
   d8100:	2301      	movs	r3, #1
   d8102:	f007 071f 	and.w	r7, r7, #31
   d8106:	fa03 f707 	lsl.w	r7, r3, r7
   d810a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d810e:	4621      	mov	r1, r4
   d8110:	421f      	tst	r7, r3
   d8112:	4628      	mov	r0, r5
   d8114:	bf18      	it	ne
   d8116:	f049 0902 	orrne.w	r9, r9, #2
   d811a:	1b36      	subs	r6, r6, r4
   d811c:	f7ff fe28 	bl	d7d70 <rshift>
   d8120:	2702      	movs	r7, #2
   d8122:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d8126:	e000      	b.n	d812a <__gethex+0x324>
   d8128:	2701      	movs	r7, #1
   d812a:	f1b9 0f00 	cmp.w	r9, #0
   d812e:	f000 8081 	beq.w	d8234 <__gethex+0x42e>
   d8132:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8136:	2b02      	cmp	r3, #2
   d8138:	d00e      	beq.n	d8158 <__gethex+0x352>
   d813a:	2b03      	cmp	r3, #3
   d813c:	d010      	beq.n	d8160 <__gethex+0x35a>
   d813e:	2b01      	cmp	r3, #1
   d8140:	d176      	bne.n	d8230 <__gethex+0x42a>
   d8142:	f019 0f02 	tst.w	r9, #2
   d8146:	d073      	beq.n	d8230 <__gethex+0x42a>
   d8148:	f8da 0000 	ldr.w	r0, [sl]
   d814c:	ea49 0900 	orr.w	r9, r9, r0
   d8150:	f019 0f01 	tst.w	r9, #1
   d8154:	d107      	bne.n	d8166 <__gethex+0x360>
   d8156:	e06b      	b.n	d8230 <__gethex+0x42a>
   d8158:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d815a:	f1c3 0301 	rsb	r3, r3, #1
   d815e:	9315      	str	r3, [sp, #84]	; 0x54
   d8160:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8162:	2b00      	cmp	r3, #0
   d8164:	d064      	beq.n	d8230 <__gethex+0x42a>
   d8166:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d816a:	f105 0314 	add.w	r3, r5, #20
   d816e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d8172:	eb03 0109 	add.w	r1, r3, r9
   d8176:	2000      	movs	r0, #0
   d8178:	681a      	ldr	r2, [r3, #0]
   d817a:	f1b2 3fff 	cmp.w	r2, #4294967295
   d817e:	d002      	beq.n	d8186 <__gethex+0x380>
   d8180:	3201      	adds	r2, #1
   d8182:	601a      	str	r2, [r3, #0]
   d8184:	e020      	b.n	d81c8 <__gethex+0x3c2>
   d8186:	f843 0b04 	str.w	r0, [r3], #4
   d818a:	4299      	cmp	r1, r3
   d818c:	d8f4      	bhi.n	d8178 <__gethex+0x372>
   d818e:	68ab      	ldr	r3, [r5, #8]
   d8190:	459a      	cmp	sl, r3
   d8192:	db12      	blt.n	d81ba <__gethex+0x3b4>
   d8194:	6869      	ldr	r1, [r5, #4]
   d8196:	9802      	ldr	r0, [sp, #8]
   d8198:	3101      	adds	r1, #1
   d819a:	f000 f906 	bl	d83aa <_Balloc>
   d819e:	692a      	ldr	r2, [r5, #16]
   d81a0:	3202      	adds	r2, #2
   d81a2:	f105 010c 	add.w	r1, r5, #12
   d81a6:	4683      	mov	fp, r0
   d81a8:	0092      	lsls	r2, r2, #2
   d81aa:	300c      	adds	r0, #12
   d81ac:	f7fe ff36 	bl	d701c <memcpy>
   d81b0:	4629      	mov	r1, r5
   d81b2:	9802      	ldr	r0, [sp, #8]
   d81b4:	f000 f92e 	bl	d8414 <_Bfree>
   d81b8:	465d      	mov	r5, fp
   d81ba:	692b      	ldr	r3, [r5, #16]
   d81bc:	1c5a      	adds	r2, r3, #1
   d81be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d81c2:	612a      	str	r2, [r5, #16]
   d81c4:	2201      	movs	r2, #1
   d81c6:	615a      	str	r2, [r3, #20]
   d81c8:	2f02      	cmp	r7, #2
   d81ca:	f105 0214 	add.w	r2, r5, #20
   d81ce:	d111      	bne.n	d81f4 <__gethex+0x3ee>
   d81d0:	f8d8 3000 	ldr.w	r3, [r8]
   d81d4:	3b01      	subs	r3, #1
   d81d6:	429e      	cmp	r6, r3
   d81d8:	d127      	bne.n	d822a <__gethex+0x424>
   d81da:	1171      	asrs	r1, r6, #5
   d81dc:	2301      	movs	r3, #1
   d81de:	f006 061f 	and.w	r6, r6, #31
   d81e2:	fa03 f606 	lsl.w	r6, r3, r6
   d81e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d81ea:	421e      	tst	r6, r3
   d81ec:	bf0c      	ite	eq
   d81ee:	2702      	moveq	r7, #2
   d81f0:	2701      	movne	r7, #1
   d81f2:	e01a      	b.n	d822a <__gethex+0x424>
   d81f4:	692b      	ldr	r3, [r5, #16]
   d81f6:	459a      	cmp	sl, r3
   d81f8:	da0a      	bge.n	d8210 <__gethex+0x40a>
   d81fa:	2101      	movs	r1, #1
   d81fc:	4628      	mov	r0, r5
   d81fe:	f7ff fdb7 	bl	d7d70 <rshift>
   d8202:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8206:	3401      	adds	r4, #1
   d8208:	429c      	cmp	r4, r3
   d820a:	f73f af2c 	bgt.w	d8066 <__gethex+0x260>
   d820e:	e00b      	b.n	d8228 <__gethex+0x422>
   d8210:	f016 061f 	ands.w	r6, r6, #31
   d8214:	d008      	beq.n	d8228 <__gethex+0x422>
   d8216:	4491      	add	r9, r2
   d8218:	f1c6 0620 	rsb	r6, r6, #32
   d821c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d8220:	f000 f988 	bl	d8534 <__hi0bits>
   d8224:	42b0      	cmp	r0, r6
   d8226:	dbe8      	blt.n	d81fa <__gethex+0x3f4>
   d8228:	2701      	movs	r7, #1
   d822a:	f047 0720 	orr.w	r7, r7, #32
   d822e:	e001      	b.n	d8234 <__gethex+0x42e>
   d8230:	f047 0710 	orr.w	r7, r7, #16
   d8234:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8236:	601d      	str	r5, [r3, #0]
   d8238:	9b06      	ldr	r3, [sp, #24]
   d823a:	4638      	mov	r0, r7
   d823c:	601c      	str	r4, [r3, #0]
   d823e:	b00b      	add	sp, #44	; 0x2c
   d8240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8244 <L_shift>:
   d8244:	f1c2 0208 	rsb	r2, r2, #8
   d8248:	0092      	lsls	r2, r2, #2
   d824a:	b570      	push	{r4, r5, r6, lr}
   d824c:	f1c2 0620 	rsb	r6, r2, #32
   d8250:	6843      	ldr	r3, [r0, #4]
   d8252:	6805      	ldr	r5, [r0, #0]
   d8254:	fa03 f406 	lsl.w	r4, r3, r6
   d8258:	432c      	orrs	r4, r5
   d825a:	40d3      	lsrs	r3, r2
   d825c:	6004      	str	r4, [r0, #0]
   d825e:	f840 3f04 	str.w	r3, [r0, #4]!
   d8262:	4288      	cmp	r0, r1
   d8264:	d3f4      	bcc.n	d8250 <L_shift+0xc>
   d8266:	bd70      	pop	{r4, r5, r6, pc}

000d8268 <__match>:
   d8268:	b530      	push	{r4, r5, lr}
   d826a:	6803      	ldr	r3, [r0, #0]
   d826c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8270:	3301      	adds	r3, #1
   d8272:	b14c      	cbz	r4, d8288 <__match+0x20>
   d8274:	781a      	ldrb	r2, [r3, #0]
   d8276:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d827a:	2d19      	cmp	r5, #25
   d827c:	bf98      	it	ls
   d827e:	3220      	addls	r2, #32
   d8280:	42a2      	cmp	r2, r4
   d8282:	d0f3      	beq.n	d826c <__match+0x4>
   d8284:	2000      	movs	r0, #0
   d8286:	bd30      	pop	{r4, r5, pc}
   d8288:	6003      	str	r3, [r0, #0]
   d828a:	2001      	movs	r0, #1
   d828c:	bd30      	pop	{r4, r5, pc}

000d828e <__hexnan>:
   d828e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8292:	680b      	ldr	r3, [r1, #0]
   d8294:	f8d0 b000 	ldr.w	fp, [r0]
   d8298:	115e      	asrs	r6, r3, #5
   d829a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d829e:	f013 031f 	ands.w	r3, r3, #31
   d82a2:	b085      	sub	sp, #20
   d82a4:	bf18      	it	ne
   d82a6:	3604      	addne	r6, #4
   d82a8:	1f35      	subs	r5, r6, #4
   d82aa:	4617      	mov	r7, r2
   d82ac:	2200      	movs	r2, #0
   d82ae:	4682      	mov	sl, r0
   d82b0:	9301      	str	r3, [sp, #4]
   d82b2:	f846 2c04 	str.w	r2, [r6, #-4]
   d82b6:	46a8      	mov	r8, r5
   d82b8:	462c      	mov	r4, r5
   d82ba:	9200      	str	r2, [sp, #0]
   d82bc:	4691      	mov	r9, r2
   d82be:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d82c2:	2900      	cmp	r1, #0
   d82c4:	d03c      	beq.n	d8340 <__hexnan+0xb2>
   d82c6:	4608      	mov	r0, r1
   d82c8:	9203      	str	r2, [sp, #12]
   d82ca:	9102      	str	r1, [sp, #8]
   d82cc:	f7ff fd86 	bl	d7ddc <__hexdig_fun>
   d82d0:	9a03      	ldr	r2, [sp, #12]
   d82d2:	bb00      	cbnz	r0, d8316 <__hexnan+0x88>
   d82d4:	9902      	ldr	r1, [sp, #8]
   d82d6:	2920      	cmp	r1, #32
   d82d8:	d816      	bhi.n	d8308 <__hexnan+0x7a>
   d82da:	9b00      	ldr	r3, [sp, #0]
   d82dc:	4599      	cmp	r9, r3
   d82de:	ddee      	ble.n	d82be <__hexnan+0x30>
   d82e0:	4544      	cmp	r4, r8
   d82e2:	d205      	bcs.n	d82f0 <__hexnan+0x62>
   d82e4:	2a07      	cmp	r2, #7
   d82e6:	dc03      	bgt.n	d82f0 <__hexnan+0x62>
   d82e8:	4641      	mov	r1, r8
   d82ea:	4620      	mov	r0, r4
   d82ec:	f7ff ffaa 	bl	d8244 <L_shift>
   d82f0:	42bc      	cmp	r4, r7
   d82f2:	d923      	bls.n	d833c <__hexnan+0xae>
   d82f4:	2300      	movs	r3, #0
   d82f6:	f1a4 0804 	sub.w	r8, r4, #4
   d82fa:	f844 3c04 	str.w	r3, [r4, #-4]
   d82fe:	f8cd 9000 	str.w	r9, [sp]
   d8302:	4644      	mov	r4, r8
   d8304:	461a      	mov	r2, r3
   d8306:	e7da      	b.n	d82be <__hexnan+0x30>
   d8308:	2929      	cmp	r1, #41	; 0x29
   d830a:	d148      	bne.n	d839e <__hexnan+0x110>
   d830c:	f10b 0301 	add.w	r3, fp, #1
   d8310:	f8ca 3000 	str.w	r3, [sl]
   d8314:	e014      	b.n	d8340 <__hexnan+0xb2>
   d8316:	3201      	adds	r2, #1
   d8318:	2a08      	cmp	r2, #8
   d831a:	f109 0901 	add.w	r9, r9, #1
   d831e:	dd06      	ble.n	d832e <__hexnan+0xa0>
   d8320:	42bc      	cmp	r4, r7
   d8322:	d9cc      	bls.n	d82be <__hexnan+0x30>
   d8324:	2300      	movs	r3, #0
   d8326:	f844 3c04 	str.w	r3, [r4, #-4]
   d832a:	2201      	movs	r2, #1
   d832c:	3c04      	subs	r4, #4
   d832e:	6821      	ldr	r1, [r4, #0]
   d8330:	f000 000f 	and.w	r0, r0, #15
   d8334:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d8338:	6020      	str	r0, [r4, #0]
   d833a:	e7c0      	b.n	d82be <__hexnan+0x30>
   d833c:	2208      	movs	r2, #8
   d833e:	e7be      	b.n	d82be <__hexnan+0x30>
   d8340:	f1b9 0f00 	cmp.w	r9, #0
   d8344:	d02b      	beq.n	d839e <__hexnan+0x110>
   d8346:	4544      	cmp	r4, r8
   d8348:	d205      	bcs.n	d8356 <__hexnan+0xc8>
   d834a:	2a07      	cmp	r2, #7
   d834c:	dc03      	bgt.n	d8356 <__hexnan+0xc8>
   d834e:	4641      	mov	r1, r8
   d8350:	4620      	mov	r0, r4
   d8352:	f7ff ff77 	bl	d8244 <L_shift>
   d8356:	42bc      	cmp	r4, r7
   d8358:	d90c      	bls.n	d8374 <__hexnan+0xe6>
   d835a:	463b      	mov	r3, r7
   d835c:	f854 2b04 	ldr.w	r2, [r4], #4
   d8360:	f843 2b04 	str.w	r2, [r3], #4
   d8364:	42a5      	cmp	r5, r4
   d8366:	d2f9      	bcs.n	d835c <__hexnan+0xce>
   d8368:	2200      	movs	r2, #0
   d836a:	f843 2b04 	str.w	r2, [r3], #4
   d836e:	429d      	cmp	r5, r3
   d8370:	d2fb      	bcs.n	d836a <__hexnan+0xdc>
   d8372:	e00b      	b.n	d838c <__hexnan+0xfe>
   d8374:	9b01      	ldr	r3, [sp, #4]
   d8376:	b14b      	cbz	r3, d838c <__hexnan+0xfe>
   d8378:	f1c3 0220 	rsb	r2, r3, #32
   d837c:	f04f 33ff 	mov.w	r3, #4294967295
   d8380:	40d3      	lsrs	r3, r2
   d8382:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8386:	4013      	ands	r3, r2
   d8388:	f846 3c04 	str.w	r3, [r6, #-4]
   d838c:	682b      	ldr	r3, [r5, #0]
   d838e:	b943      	cbnz	r3, d83a2 <__hexnan+0x114>
   d8390:	42bd      	cmp	r5, r7
   d8392:	d102      	bne.n	d839a <__hexnan+0x10c>
   d8394:	2301      	movs	r3, #1
   d8396:	602b      	str	r3, [r5, #0]
   d8398:	e003      	b.n	d83a2 <__hexnan+0x114>
   d839a:	3d04      	subs	r5, #4
   d839c:	e7f6      	b.n	d838c <__hexnan+0xfe>
   d839e:	2004      	movs	r0, #4
   d83a0:	e000      	b.n	d83a4 <__hexnan+0x116>
   d83a2:	2005      	movs	r0, #5
   d83a4:	b005      	add	sp, #20
   d83a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d83aa <_Balloc>:
   d83aa:	b570      	push	{r4, r5, r6, lr}
   d83ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d83ae:	4604      	mov	r4, r0
   d83b0:	460e      	mov	r6, r1
   d83b2:	b93d      	cbnz	r5, d83c4 <_Balloc+0x1a>
   d83b4:	2010      	movs	r0, #16
   d83b6:	f7fd f8d5 	bl	d5564 <malloc>
   d83ba:	6260      	str	r0, [r4, #36]	; 0x24
   d83bc:	6045      	str	r5, [r0, #4]
   d83be:	6085      	str	r5, [r0, #8]
   d83c0:	6005      	str	r5, [r0, #0]
   d83c2:	60c5      	str	r5, [r0, #12]
   d83c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d83c6:	68eb      	ldr	r3, [r5, #12]
   d83c8:	b143      	cbz	r3, d83dc <_Balloc+0x32>
   d83ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d83cc:	68db      	ldr	r3, [r3, #12]
   d83ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d83d2:	b178      	cbz	r0, d83f4 <_Balloc+0x4a>
   d83d4:	6802      	ldr	r2, [r0, #0]
   d83d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d83da:	e017      	b.n	d840c <_Balloc+0x62>
   d83dc:	2221      	movs	r2, #33	; 0x21
   d83de:	2104      	movs	r1, #4
   d83e0:	4620      	mov	r0, r4
   d83e2:	f000 fbd2 	bl	d8b8a <_calloc_r>
   d83e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d83e8:	60e8      	str	r0, [r5, #12]
   d83ea:	68db      	ldr	r3, [r3, #12]
   d83ec:	2b00      	cmp	r3, #0
   d83ee:	d1ec      	bne.n	d83ca <_Balloc+0x20>
   d83f0:	2000      	movs	r0, #0
   d83f2:	bd70      	pop	{r4, r5, r6, pc}
   d83f4:	2101      	movs	r1, #1
   d83f6:	fa01 f506 	lsl.w	r5, r1, r6
   d83fa:	1d6a      	adds	r2, r5, #5
   d83fc:	0092      	lsls	r2, r2, #2
   d83fe:	4620      	mov	r0, r4
   d8400:	f000 fbc3 	bl	d8b8a <_calloc_r>
   d8404:	2800      	cmp	r0, #0
   d8406:	d0f3      	beq.n	d83f0 <_Balloc+0x46>
   d8408:	6046      	str	r6, [r0, #4]
   d840a:	6085      	str	r5, [r0, #8]
   d840c:	2300      	movs	r3, #0
   d840e:	6103      	str	r3, [r0, #16]
   d8410:	60c3      	str	r3, [r0, #12]
   d8412:	bd70      	pop	{r4, r5, r6, pc}

000d8414 <_Bfree>:
   d8414:	b570      	push	{r4, r5, r6, lr}
   d8416:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d8418:	4606      	mov	r6, r0
   d841a:	460d      	mov	r5, r1
   d841c:	b93c      	cbnz	r4, d842e <_Bfree+0x1a>
   d841e:	2010      	movs	r0, #16
   d8420:	f7fd f8a0 	bl	d5564 <malloc>
   d8424:	6270      	str	r0, [r6, #36]	; 0x24
   d8426:	6044      	str	r4, [r0, #4]
   d8428:	6084      	str	r4, [r0, #8]
   d842a:	6004      	str	r4, [r0, #0]
   d842c:	60c4      	str	r4, [r0, #12]
   d842e:	b13d      	cbz	r5, d8440 <_Bfree+0x2c>
   d8430:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d8432:	686a      	ldr	r2, [r5, #4]
   d8434:	68db      	ldr	r3, [r3, #12]
   d8436:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d843a:	6029      	str	r1, [r5, #0]
   d843c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d8440:	bd70      	pop	{r4, r5, r6, pc}

000d8442 <__multadd>:
   d8442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8446:	690d      	ldr	r5, [r1, #16]
   d8448:	461f      	mov	r7, r3
   d844a:	4606      	mov	r6, r0
   d844c:	460c      	mov	r4, r1
   d844e:	f101 0e14 	add.w	lr, r1, #20
   d8452:	2300      	movs	r3, #0
   d8454:	f8de 0000 	ldr.w	r0, [lr]
   d8458:	b281      	uxth	r1, r0
   d845a:	fb02 7101 	mla	r1, r2, r1, r7
   d845e:	0c0f      	lsrs	r7, r1, #16
   d8460:	0c00      	lsrs	r0, r0, #16
   d8462:	fb02 7000 	mla	r0, r2, r0, r7
   d8466:	b289      	uxth	r1, r1
   d8468:	3301      	adds	r3, #1
   d846a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d846e:	429d      	cmp	r5, r3
   d8470:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d8474:	f84e 1b04 	str.w	r1, [lr], #4
   d8478:	dcec      	bgt.n	d8454 <__multadd+0x12>
   d847a:	b1d7      	cbz	r7, d84b2 <__multadd+0x70>
   d847c:	68a3      	ldr	r3, [r4, #8]
   d847e:	429d      	cmp	r5, r3
   d8480:	db12      	blt.n	d84a8 <__multadd+0x66>
   d8482:	6861      	ldr	r1, [r4, #4]
   d8484:	4630      	mov	r0, r6
   d8486:	3101      	adds	r1, #1
   d8488:	f7ff ff8f 	bl	d83aa <_Balloc>
   d848c:	6922      	ldr	r2, [r4, #16]
   d848e:	3202      	adds	r2, #2
   d8490:	f104 010c 	add.w	r1, r4, #12
   d8494:	4680      	mov	r8, r0
   d8496:	0092      	lsls	r2, r2, #2
   d8498:	300c      	adds	r0, #12
   d849a:	f7fe fdbf 	bl	d701c <memcpy>
   d849e:	4621      	mov	r1, r4
   d84a0:	4630      	mov	r0, r6
   d84a2:	f7ff ffb7 	bl	d8414 <_Bfree>
   d84a6:	4644      	mov	r4, r8
   d84a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d84ac:	3501      	adds	r5, #1
   d84ae:	615f      	str	r7, [r3, #20]
   d84b0:	6125      	str	r5, [r4, #16]
   d84b2:	4620      	mov	r0, r4
   d84b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d84b8 <__s2b>:
   d84b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d84bc:	460c      	mov	r4, r1
   d84be:	4615      	mov	r5, r2
   d84c0:	461f      	mov	r7, r3
   d84c2:	2209      	movs	r2, #9
   d84c4:	3308      	adds	r3, #8
   d84c6:	4606      	mov	r6, r0
   d84c8:	fb93 f3f2 	sdiv	r3, r3, r2
   d84cc:	2100      	movs	r1, #0
   d84ce:	2201      	movs	r2, #1
   d84d0:	429a      	cmp	r2, r3
   d84d2:	da02      	bge.n	d84da <__s2b+0x22>
   d84d4:	0052      	lsls	r2, r2, #1
   d84d6:	3101      	adds	r1, #1
   d84d8:	e7fa      	b.n	d84d0 <__s2b+0x18>
   d84da:	4630      	mov	r0, r6
   d84dc:	f7ff ff65 	bl	d83aa <_Balloc>
   d84e0:	9b08      	ldr	r3, [sp, #32]
   d84e2:	6143      	str	r3, [r0, #20]
   d84e4:	2d09      	cmp	r5, #9
   d84e6:	f04f 0301 	mov.w	r3, #1
   d84ea:	6103      	str	r3, [r0, #16]
   d84ec:	dd11      	ble.n	d8512 <__s2b+0x5a>
   d84ee:	f104 0809 	add.w	r8, r4, #9
   d84f2:	46c1      	mov	r9, r8
   d84f4:	442c      	add	r4, r5
   d84f6:	f819 3b01 	ldrb.w	r3, [r9], #1
   d84fa:	4601      	mov	r1, r0
   d84fc:	3b30      	subs	r3, #48	; 0x30
   d84fe:	220a      	movs	r2, #10
   d8500:	4630      	mov	r0, r6
   d8502:	f7ff ff9e 	bl	d8442 <__multadd>
   d8506:	45a1      	cmp	r9, r4
   d8508:	d1f5      	bne.n	d84f6 <__s2b+0x3e>
   d850a:	eb08 0405 	add.w	r4, r8, r5
   d850e:	3c08      	subs	r4, #8
   d8510:	e001      	b.n	d8516 <__s2b+0x5e>
   d8512:	340a      	adds	r4, #10
   d8514:	2509      	movs	r5, #9
   d8516:	1b2d      	subs	r5, r5, r4
   d8518:	1963      	adds	r3, r4, r5
   d851a:	429f      	cmp	r7, r3
   d851c:	dd08      	ble.n	d8530 <__s2b+0x78>
   d851e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8522:	4601      	mov	r1, r0
   d8524:	3b30      	subs	r3, #48	; 0x30
   d8526:	220a      	movs	r2, #10
   d8528:	4630      	mov	r0, r6
   d852a:	f7ff ff8a 	bl	d8442 <__multadd>
   d852e:	e7f3      	b.n	d8518 <__s2b+0x60>
   d8530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8534 <__hi0bits>:
   d8534:	0c03      	lsrs	r3, r0, #16
   d8536:	041b      	lsls	r3, r3, #16
   d8538:	b913      	cbnz	r3, d8540 <__hi0bits+0xc>
   d853a:	0400      	lsls	r0, r0, #16
   d853c:	2310      	movs	r3, #16
   d853e:	e000      	b.n	d8542 <__hi0bits+0xe>
   d8540:	2300      	movs	r3, #0
   d8542:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8546:	bf04      	itt	eq
   d8548:	0200      	lsleq	r0, r0, #8
   d854a:	3308      	addeq	r3, #8
   d854c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8550:	bf04      	itt	eq
   d8552:	0100      	lsleq	r0, r0, #4
   d8554:	3304      	addeq	r3, #4
   d8556:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d855a:	bf04      	itt	eq
   d855c:	0080      	lsleq	r0, r0, #2
   d855e:	3302      	addeq	r3, #2
   d8560:	2800      	cmp	r0, #0
   d8562:	db03      	blt.n	d856c <__hi0bits+0x38>
   d8564:	0042      	lsls	r2, r0, #1
   d8566:	d503      	bpl.n	d8570 <__hi0bits+0x3c>
   d8568:	1c58      	adds	r0, r3, #1
   d856a:	4770      	bx	lr
   d856c:	4618      	mov	r0, r3
   d856e:	4770      	bx	lr
   d8570:	2020      	movs	r0, #32
   d8572:	4770      	bx	lr

000d8574 <__lo0bits>:
   d8574:	6803      	ldr	r3, [r0, #0]
   d8576:	f013 0207 	ands.w	r2, r3, #7
   d857a:	d00b      	beq.n	d8594 <__lo0bits+0x20>
   d857c:	07d9      	lsls	r1, r3, #31
   d857e:	d422      	bmi.n	d85c6 <__lo0bits+0x52>
   d8580:	079a      	lsls	r2, r3, #30
   d8582:	bf4b      	itete	mi
   d8584:	085b      	lsrmi	r3, r3, #1
   d8586:	089b      	lsrpl	r3, r3, #2
   d8588:	6003      	strmi	r3, [r0, #0]
   d858a:	6003      	strpl	r3, [r0, #0]
   d858c:	bf4c      	ite	mi
   d858e:	2001      	movmi	r0, #1
   d8590:	2002      	movpl	r0, #2
   d8592:	4770      	bx	lr
   d8594:	b299      	uxth	r1, r3
   d8596:	b909      	cbnz	r1, d859c <__lo0bits+0x28>
   d8598:	0c1b      	lsrs	r3, r3, #16
   d859a:	2210      	movs	r2, #16
   d859c:	f013 0fff 	tst.w	r3, #255	; 0xff
   d85a0:	bf04      	itt	eq
   d85a2:	0a1b      	lsreq	r3, r3, #8
   d85a4:	3208      	addeq	r2, #8
   d85a6:	0719      	lsls	r1, r3, #28
   d85a8:	bf04      	itt	eq
   d85aa:	091b      	lsreq	r3, r3, #4
   d85ac:	3204      	addeq	r2, #4
   d85ae:	0799      	lsls	r1, r3, #30
   d85b0:	bf04      	itt	eq
   d85b2:	089b      	lsreq	r3, r3, #2
   d85b4:	3202      	addeq	r2, #2
   d85b6:	07d9      	lsls	r1, r3, #31
   d85b8:	d402      	bmi.n	d85c0 <__lo0bits+0x4c>
   d85ba:	085b      	lsrs	r3, r3, #1
   d85bc:	d005      	beq.n	d85ca <__lo0bits+0x56>
   d85be:	3201      	adds	r2, #1
   d85c0:	6003      	str	r3, [r0, #0]
   d85c2:	4610      	mov	r0, r2
   d85c4:	4770      	bx	lr
   d85c6:	2000      	movs	r0, #0
   d85c8:	4770      	bx	lr
   d85ca:	2020      	movs	r0, #32
   d85cc:	4770      	bx	lr

000d85ce <__i2b>:
   d85ce:	b510      	push	{r4, lr}
   d85d0:	460c      	mov	r4, r1
   d85d2:	2101      	movs	r1, #1
   d85d4:	f7ff fee9 	bl	d83aa <_Balloc>
   d85d8:	2201      	movs	r2, #1
   d85da:	6144      	str	r4, [r0, #20]
   d85dc:	6102      	str	r2, [r0, #16]
   d85de:	bd10      	pop	{r4, pc}

000d85e0 <__multiply>:
   d85e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85e4:	4614      	mov	r4, r2
   d85e6:	690a      	ldr	r2, [r1, #16]
   d85e8:	6923      	ldr	r3, [r4, #16]
   d85ea:	429a      	cmp	r2, r3
   d85ec:	bfb8      	it	lt
   d85ee:	460b      	movlt	r3, r1
   d85f0:	4688      	mov	r8, r1
   d85f2:	bfbc      	itt	lt
   d85f4:	46a0      	movlt	r8, r4
   d85f6:	461c      	movlt	r4, r3
   d85f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d85fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8600:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8604:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d8608:	eb07 0609 	add.w	r6, r7, r9
   d860c:	429e      	cmp	r6, r3
   d860e:	bfc8      	it	gt
   d8610:	3101      	addgt	r1, #1
   d8612:	f7ff feca 	bl	d83aa <_Balloc>
   d8616:	f100 0514 	add.w	r5, r0, #20
   d861a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d861e:	462b      	mov	r3, r5
   d8620:	2200      	movs	r2, #0
   d8622:	4563      	cmp	r3, ip
   d8624:	d202      	bcs.n	d862c <__multiply+0x4c>
   d8626:	f843 2b04 	str.w	r2, [r3], #4
   d862a:	e7fa      	b.n	d8622 <__multiply+0x42>
   d862c:	f104 0214 	add.w	r2, r4, #20
   d8630:	f108 0114 	add.w	r1, r8, #20
   d8634:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8638:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d863c:	9300      	str	r3, [sp, #0]
   d863e:	9b00      	ldr	r3, [sp, #0]
   d8640:	9201      	str	r2, [sp, #4]
   d8642:	4293      	cmp	r3, r2
   d8644:	d957      	bls.n	d86f6 <__multiply+0x116>
   d8646:	f8b2 b000 	ldrh.w	fp, [r2]
   d864a:	f1bb 0f00 	cmp.w	fp, #0
   d864e:	d023      	beq.n	d8698 <__multiply+0xb8>
   d8650:	4689      	mov	r9, r1
   d8652:	46ae      	mov	lr, r5
   d8654:	f04f 0800 	mov.w	r8, #0
   d8658:	f859 4b04 	ldr.w	r4, [r9], #4
   d865c:	f8be a000 	ldrh.w	sl, [lr]
   d8660:	b2a3      	uxth	r3, r4
   d8662:	fb0b a303 	mla	r3, fp, r3, sl
   d8666:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d866a:	f8de 4000 	ldr.w	r4, [lr]
   d866e:	4443      	add	r3, r8
   d8670:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8674:	fb0b 840a 	mla	r4, fp, sl, r8
   d8678:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d867c:	46f2      	mov	sl, lr
   d867e:	b29b      	uxth	r3, r3
   d8680:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d8684:	454f      	cmp	r7, r9
   d8686:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d868a:	f84a 3b04 	str.w	r3, [sl], #4
   d868e:	d901      	bls.n	d8694 <__multiply+0xb4>
   d8690:	46d6      	mov	lr, sl
   d8692:	e7e1      	b.n	d8658 <__multiply+0x78>
   d8694:	f8ce 8004 	str.w	r8, [lr, #4]
   d8698:	9b01      	ldr	r3, [sp, #4]
   d869a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d869e:	3204      	adds	r2, #4
   d86a0:	f1ba 0f00 	cmp.w	sl, #0
   d86a4:	d021      	beq.n	d86ea <__multiply+0x10a>
   d86a6:	682b      	ldr	r3, [r5, #0]
   d86a8:	462c      	mov	r4, r5
   d86aa:	4689      	mov	r9, r1
   d86ac:	f04f 0800 	mov.w	r8, #0
   d86b0:	f8b9 e000 	ldrh.w	lr, [r9]
   d86b4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d86b8:	fb0a be0e 	mla	lr, sl, lr, fp
   d86bc:	44f0      	add	r8, lr
   d86be:	46a3      	mov	fp, r4
   d86c0:	b29b      	uxth	r3, r3
   d86c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d86c6:	f84b 3b04 	str.w	r3, [fp], #4
   d86ca:	f859 3b04 	ldr.w	r3, [r9], #4
   d86ce:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d86d2:	0c1b      	lsrs	r3, r3, #16
   d86d4:	fb0a e303 	mla	r3, sl, r3, lr
   d86d8:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d86dc:	454f      	cmp	r7, r9
   d86de:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d86e2:	d901      	bls.n	d86e8 <__multiply+0x108>
   d86e4:	465c      	mov	r4, fp
   d86e6:	e7e3      	b.n	d86b0 <__multiply+0xd0>
   d86e8:	6063      	str	r3, [r4, #4]
   d86ea:	3504      	adds	r5, #4
   d86ec:	e7a7      	b.n	d863e <__multiply+0x5e>
   d86ee:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d86f2:	b913      	cbnz	r3, d86fa <__multiply+0x11a>
   d86f4:	3e01      	subs	r6, #1
   d86f6:	2e00      	cmp	r6, #0
   d86f8:	dcf9      	bgt.n	d86ee <__multiply+0x10e>
   d86fa:	6106      	str	r6, [r0, #16]
   d86fc:	b003      	add	sp, #12
   d86fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d8704 <__pow5mult>:
   d8704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8708:	4615      	mov	r5, r2
   d870a:	f012 0203 	ands.w	r2, r2, #3
   d870e:	4606      	mov	r6, r0
   d8710:	460f      	mov	r7, r1
   d8712:	d007      	beq.n	d8724 <__pow5mult+0x20>
   d8714:	3a01      	subs	r2, #1
   d8716:	4c21      	ldr	r4, [pc, #132]	; (d879c <__pow5mult+0x98>)
   d8718:	2300      	movs	r3, #0
   d871a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d871e:	f7ff fe90 	bl	d8442 <__multadd>
   d8722:	4607      	mov	r7, r0
   d8724:	10ad      	asrs	r5, r5, #2
   d8726:	d036      	beq.n	d8796 <__pow5mult+0x92>
   d8728:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d872a:	b93c      	cbnz	r4, d873c <__pow5mult+0x38>
   d872c:	2010      	movs	r0, #16
   d872e:	f7fc ff19 	bl	d5564 <malloc>
   d8732:	6270      	str	r0, [r6, #36]	; 0x24
   d8734:	6044      	str	r4, [r0, #4]
   d8736:	6084      	str	r4, [r0, #8]
   d8738:	6004      	str	r4, [r0, #0]
   d873a:	60c4      	str	r4, [r0, #12]
   d873c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8740:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8744:	b94c      	cbnz	r4, d875a <__pow5mult+0x56>
   d8746:	f240 2171 	movw	r1, #625	; 0x271
   d874a:	4630      	mov	r0, r6
   d874c:	f7ff ff3f 	bl	d85ce <__i2b>
   d8750:	2300      	movs	r3, #0
   d8752:	f8c8 0008 	str.w	r0, [r8, #8]
   d8756:	4604      	mov	r4, r0
   d8758:	6003      	str	r3, [r0, #0]
   d875a:	f04f 0800 	mov.w	r8, #0
   d875e:	07eb      	lsls	r3, r5, #31
   d8760:	d50a      	bpl.n	d8778 <__pow5mult+0x74>
   d8762:	4639      	mov	r1, r7
   d8764:	4622      	mov	r2, r4
   d8766:	4630      	mov	r0, r6
   d8768:	f7ff ff3a 	bl	d85e0 <__multiply>
   d876c:	4639      	mov	r1, r7
   d876e:	4681      	mov	r9, r0
   d8770:	4630      	mov	r0, r6
   d8772:	f7ff fe4f 	bl	d8414 <_Bfree>
   d8776:	464f      	mov	r7, r9
   d8778:	106d      	asrs	r5, r5, #1
   d877a:	d00c      	beq.n	d8796 <__pow5mult+0x92>
   d877c:	6820      	ldr	r0, [r4, #0]
   d877e:	b108      	cbz	r0, d8784 <__pow5mult+0x80>
   d8780:	4604      	mov	r4, r0
   d8782:	e7ec      	b.n	d875e <__pow5mult+0x5a>
   d8784:	4622      	mov	r2, r4
   d8786:	4621      	mov	r1, r4
   d8788:	4630      	mov	r0, r6
   d878a:	f7ff ff29 	bl	d85e0 <__multiply>
   d878e:	6020      	str	r0, [r4, #0]
   d8790:	f8c0 8000 	str.w	r8, [r0]
   d8794:	e7f4      	b.n	d8780 <__pow5mult+0x7c>
   d8796:	4638      	mov	r0, r7
   d8798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d879c:	000d9158 	.word	0x000d9158

000d87a0 <__lshift>:
   d87a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d87a4:	460c      	mov	r4, r1
   d87a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d87aa:	6926      	ldr	r6, [r4, #16]
   d87ac:	6849      	ldr	r1, [r1, #4]
   d87ae:	68a3      	ldr	r3, [r4, #8]
   d87b0:	4456      	add	r6, sl
   d87b2:	4607      	mov	r7, r0
   d87b4:	4691      	mov	r9, r2
   d87b6:	1c75      	adds	r5, r6, #1
   d87b8:	42ab      	cmp	r3, r5
   d87ba:	da02      	bge.n	d87c2 <__lshift+0x22>
   d87bc:	3101      	adds	r1, #1
   d87be:	005b      	lsls	r3, r3, #1
   d87c0:	e7fa      	b.n	d87b8 <__lshift+0x18>
   d87c2:	4638      	mov	r0, r7
   d87c4:	f7ff fdf1 	bl	d83aa <_Balloc>
   d87c8:	2300      	movs	r3, #0
   d87ca:	4680      	mov	r8, r0
   d87cc:	f100 0114 	add.w	r1, r0, #20
   d87d0:	461a      	mov	r2, r3
   d87d2:	4553      	cmp	r3, sl
   d87d4:	da03      	bge.n	d87de <__lshift+0x3e>
   d87d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d87da:	3301      	adds	r3, #1
   d87dc:	e7f9      	b.n	d87d2 <__lshift+0x32>
   d87de:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d87e2:	6920      	ldr	r0, [r4, #16]
   d87e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d87e8:	f019 091f 	ands.w	r9, r9, #31
   d87ec:	f104 0114 	add.w	r1, r4, #20
   d87f0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d87f4:	d014      	beq.n	d8820 <__lshift+0x80>
   d87f6:	f1c9 0c20 	rsb	ip, r9, #32
   d87fa:	2200      	movs	r2, #0
   d87fc:	6808      	ldr	r0, [r1, #0]
   d87fe:	fa00 f009 	lsl.w	r0, r0, r9
   d8802:	4302      	orrs	r2, r0
   d8804:	469a      	mov	sl, r3
   d8806:	f843 2b04 	str.w	r2, [r3], #4
   d880a:	f851 2b04 	ldr.w	r2, [r1], #4
   d880e:	458e      	cmp	lr, r1
   d8810:	fa22 f20c 	lsr.w	r2, r2, ip
   d8814:	d8f2      	bhi.n	d87fc <__lshift+0x5c>
   d8816:	f8ca 2004 	str.w	r2, [sl, #4]
   d881a:	b142      	cbz	r2, d882e <__lshift+0x8e>
   d881c:	1cb5      	adds	r5, r6, #2
   d881e:	e006      	b.n	d882e <__lshift+0x8e>
   d8820:	3b04      	subs	r3, #4
   d8822:	f851 2b04 	ldr.w	r2, [r1], #4
   d8826:	f843 2f04 	str.w	r2, [r3, #4]!
   d882a:	458e      	cmp	lr, r1
   d882c:	d8f9      	bhi.n	d8822 <__lshift+0x82>
   d882e:	3d01      	subs	r5, #1
   d8830:	4638      	mov	r0, r7
   d8832:	f8c8 5010 	str.w	r5, [r8, #16]
   d8836:	4621      	mov	r1, r4
   d8838:	f7ff fdec 	bl	d8414 <_Bfree>
   d883c:	4640      	mov	r0, r8
   d883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8842 <__mcmp>:
   d8842:	6903      	ldr	r3, [r0, #16]
   d8844:	690a      	ldr	r2, [r1, #16]
   d8846:	1a9b      	subs	r3, r3, r2
   d8848:	b510      	push	{r4, lr}
   d884a:	d111      	bne.n	d8870 <__mcmp+0x2e>
   d884c:	0092      	lsls	r2, r2, #2
   d884e:	3014      	adds	r0, #20
   d8850:	3114      	adds	r1, #20
   d8852:	1883      	adds	r3, r0, r2
   d8854:	440a      	add	r2, r1
   d8856:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d885a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d885e:	428c      	cmp	r4, r1
   d8860:	d002      	beq.n	d8868 <__mcmp+0x26>
   d8862:	d307      	bcc.n	d8874 <__mcmp+0x32>
   d8864:	2001      	movs	r0, #1
   d8866:	bd10      	pop	{r4, pc}
   d8868:	4298      	cmp	r0, r3
   d886a:	d3f4      	bcc.n	d8856 <__mcmp+0x14>
   d886c:	2000      	movs	r0, #0
   d886e:	bd10      	pop	{r4, pc}
   d8870:	4618      	mov	r0, r3
   d8872:	bd10      	pop	{r4, pc}
   d8874:	f04f 30ff 	mov.w	r0, #4294967295
   d8878:	bd10      	pop	{r4, pc}

000d887a <__mdiff>:
   d887a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d887e:	460c      	mov	r4, r1
   d8880:	4607      	mov	r7, r0
   d8882:	4611      	mov	r1, r2
   d8884:	4620      	mov	r0, r4
   d8886:	4615      	mov	r5, r2
   d8888:	f7ff ffdb 	bl	d8842 <__mcmp>
   d888c:	1e06      	subs	r6, r0, #0
   d888e:	d108      	bne.n	d88a2 <__mdiff+0x28>
   d8890:	4631      	mov	r1, r6
   d8892:	4638      	mov	r0, r7
   d8894:	f7ff fd89 	bl	d83aa <_Balloc>
   d8898:	2301      	movs	r3, #1
   d889a:	6103      	str	r3, [r0, #16]
   d889c:	6146      	str	r6, [r0, #20]
   d889e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d88a2:	bfbc      	itt	lt
   d88a4:	4623      	movlt	r3, r4
   d88a6:	462c      	movlt	r4, r5
   d88a8:	4638      	mov	r0, r7
   d88aa:	6861      	ldr	r1, [r4, #4]
   d88ac:	bfba      	itte	lt
   d88ae:	461d      	movlt	r5, r3
   d88b0:	2601      	movlt	r6, #1
   d88b2:	2600      	movge	r6, #0
   d88b4:	f7ff fd79 	bl	d83aa <_Balloc>
   d88b8:	692b      	ldr	r3, [r5, #16]
   d88ba:	60c6      	str	r6, [r0, #12]
   d88bc:	6926      	ldr	r6, [r4, #16]
   d88be:	f105 0914 	add.w	r9, r5, #20
   d88c2:	3414      	adds	r4, #20
   d88c4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d88c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d88cc:	f100 0514 	add.w	r5, r0, #20
   d88d0:	f04f 0c00 	mov.w	ip, #0
   d88d4:	f854 3b04 	ldr.w	r3, [r4], #4
   d88d8:	f859 2b04 	ldr.w	r2, [r9], #4
   d88dc:	fa1c f183 	uxtah	r1, ip, r3
   d88e0:	fa1f fe82 	uxth.w	lr, r2
   d88e4:	0c12      	lsrs	r2, r2, #16
   d88e6:	ebce 0101 	rsb	r1, lr, r1
   d88ea:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d88ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d88f2:	b289      	uxth	r1, r1
   d88f4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d88f8:	45c8      	cmp	r8, r9
   d88fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d88fe:	46a6      	mov	lr, r4
   d8900:	f845 3b04 	str.w	r3, [r5], #4
   d8904:	d8e6      	bhi.n	d88d4 <__mdiff+0x5a>
   d8906:	45be      	cmp	lr, r7
   d8908:	d20e      	bcs.n	d8928 <__mdiff+0xae>
   d890a:	f85e 1b04 	ldr.w	r1, [lr], #4
   d890e:	fa1c f281 	uxtah	r2, ip, r1
   d8912:	1413      	asrs	r3, r2, #16
   d8914:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d8918:	b292      	uxth	r2, r2
   d891a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d891e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8922:	f845 2b04 	str.w	r2, [r5], #4
   d8926:	e7ee      	b.n	d8906 <__mdiff+0x8c>
   d8928:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d892c:	b90b      	cbnz	r3, d8932 <__mdiff+0xb8>
   d892e:	3e01      	subs	r6, #1
   d8930:	e7fa      	b.n	d8928 <__mdiff+0xae>
   d8932:	6106      	str	r6, [r0, #16]
   d8934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8938 <__ulp>:
   d8938:	4b12      	ldr	r3, [pc, #72]	; (d8984 <__ulp+0x4c>)
   d893a:	ee10 2a90 	vmov	r2, s1
   d893e:	401a      	ands	r2, r3
   d8940:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d8944:	2b00      	cmp	r3, #0
   d8946:	dd02      	ble.n	d894e <__ulp+0x16>
   d8948:	2000      	movs	r0, #0
   d894a:	4619      	mov	r1, r3
   d894c:	e017      	b.n	d897e <__ulp+0x46>
   d894e:	425b      	negs	r3, r3
   d8950:	151b      	asrs	r3, r3, #20
   d8952:	2b13      	cmp	r3, #19
   d8954:	f04f 0000 	mov.w	r0, #0
   d8958:	f04f 0100 	mov.w	r1, #0
   d895c:	dc04      	bgt.n	d8968 <__ulp+0x30>
   d895e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d8962:	fa42 f103 	asr.w	r1, r2, r3
   d8966:	e00a      	b.n	d897e <__ulp+0x46>
   d8968:	3b14      	subs	r3, #20
   d896a:	2b1e      	cmp	r3, #30
   d896c:	f04f 0201 	mov.w	r2, #1
   d8970:	bfda      	itte	le
   d8972:	f1c3 031f 	rsble	r3, r3, #31
   d8976:	fa02 f303 	lslle.w	r3, r2, r3
   d897a:	4613      	movgt	r3, r2
   d897c:	4618      	mov	r0, r3
   d897e:	ec41 0b10 	vmov	d0, r0, r1
   d8982:	4770      	bx	lr
   d8984:	7ff00000 	.word	0x7ff00000

000d8988 <__b2d>:
   d8988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d898a:	6905      	ldr	r5, [r0, #16]
   d898c:	f100 0614 	add.w	r6, r0, #20
   d8990:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d8994:	1f2f      	subs	r7, r5, #4
   d8996:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d899a:	4620      	mov	r0, r4
   d899c:	f7ff fdca 	bl	d8534 <__hi0bits>
   d89a0:	f1c0 0320 	rsb	r3, r0, #32
   d89a4:	280a      	cmp	r0, #10
   d89a6:	600b      	str	r3, [r1, #0]
   d89a8:	dc14      	bgt.n	d89d4 <__b2d+0x4c>
   d89aa:	f1c0 0e0b 	rsb	lr, r0, #11
   d89ae:	fa24 f10e 	lsr.w	r1, r4, lr
   d89b2:	42be      	cmp	r6, r7
   d89b4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d89b8:	bf34      	ite	cc
   d89ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d89be:	2100      	movcs	r1, #0
   d89c0:	3015      	adds	r0, #21
   d89c2:	fa04 f000 	lsl.w	r0, r4, r0
   d89c6:	fa21 f10e 	lsr.w	r1, r1, lr
   d89ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d89ce:	ea40 0201 	orr.w	r2, r0, r1
   d89d2:	e023      	b.n	d8a1c <__b2d+0x94>
   d89d4:	42be      	cmp	r6, r7
   d89d6:	bf3a      	itte	cc
   d89d8:	f1a5 0708 	subcc.w	r7, r5, #8
   d89dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d89e0:	2100      	movcs	r1, #0
   d89e2:	380b      	subs	r0, #11
   d89e4:	d015      	beq.n	d8a12 <__b2d+0x8a>
   d89e6:	4084      	lsls	r4, r0
   d89e8:	f1c0 0520 	rsb	r5, r0, #32
   d89ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d89f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d89f4:	42b7      	cmp	r7, r6
   d89f6:	fa21 fe05 	lsr.w	lr, r1, r5
   d89fa:	ea44 030e 	orr.w	r3, r4, lr
   d89fe:	bf8c      	ite	hi
   d8a00:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d8a04:	2400      	movls	r4, #0
   d8a06:	fa01 f000 	lsl.w	r0, r1, r0
   d8a0a:	40ec      	lsrs	r4, r5
   d8a0c:	ea40 0204 	orr.w	r2, r0, r4
   d8a10:	e004      	b.n	d8a1c <__b2d+0x94>
   d8a12:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d8a16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d8a1a:	460a      	mov	r2, r1
   d8a1c:	ec43 2b10 	vmov	d0, r2, r3
   d8a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8a22 <__d2b>:
   d8a22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8a26:	460e      	mov	r6, r1
   d8a28:	2101      	movs	r1, #1
   d8a2a:	ec59 8b10 	vmov	r8, r9, d0
   d8a2e:	4615      	mov	r5, r2
   d8a30:	f7ff fcbb 	bl	d83aa <_Balloc>
   d8a34:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d8a38:	4607      	mov	r7, r0
   d8a3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d8a3e:	b10c      	cbz	r4, d8a44 <__d2b+0x22>
   d8a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a44:	9301      	str	r3, [sp, #4]
   d8a46:	f1b8 0f00 	cmp.w	r8, #0
   d8a4a:	d019      	beq.n	d8a80 <__d2b+0x5e>
   d8a4c:	a802      	add	r0, sp, #8
   d8a4e:	f840 8d08 	str.w	r8, [r0, #-8]!
   d8a52:	f7ff fd8f 	bl	d8574 <__lo0bits>
   d8a56:	9b00      	ldr	r3, [sp, #0]
   d8a58:	b148      	cbz	r0, d8a6e <__d2b+0x4c>
   d8a5a:	9a01      	ldr	r2, [sp, #4]
   d8a5c:	f1c0 0120 	rsb	r1, r0, #32
   d8a60:	fa02 f101 	lsl.w	r1, r2, r1
   d8a64:	430b      	orrs	r3, r1
   d8a66:	40c2      	lsrs	r2, r0
   d8a68:	617b      	str	r3, [r7, #20]
   d8a6a:	9201      	str	r2, [sp, #4]
   d8a6c:	e000      	b.n	d8a70 <__d2b+0x4e>
   d8a6e:	617b      	str	r3, [r7, #20]
   d8a70:	9b01      	ldr	r3, [sp, #4]
   d8a72:	61bb      	str	r3, [r7, #24]
   d8a74:	2b00      	cmp	r3, #0
   d8a76:	bf14      	ite	ne
   d8a78:	2102      	movne	r1, #2
   d8a7a:	2101      	moveq	r1, #1
   d8a7c:	6139      	str	r1, [r7, #16]
   d8a7e:	e007      	b.n	d8a90 <__d2b+0x6e>
   d8a80:	a801      	add	r0, sp, #4
   d8a82:	f7ff fd77 	bl	d8574 <__lo0bits>
   d8a86:	9b01      	ldr	r3, [sp, #4]
   d8a88:	617b      	str	r3, [r7, #20]
   d8a8a:	2101      	movs	r1, #1
   d8a8c:	6139      	str	r1, [r7, #16]
   d8a8e:	3020      	adds	r0, #32
   d8a90:	b134      	cbz	r4, d8aa0 <__d2b+0x7e>
   d8a92:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d8a96:	4404      	add	r4, r0
   d8a98:	6034      	str	r4, [r6, #0]
   d8a9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d8a9e:	e009      	b.n	d8ab4 <__d2b+0x92>
   d8aa0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d8aa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d8aa8:	6030      	str	r0, [r6, #0]
   d8aaa:	6918      	ldr	r0, [r3, #16]
   d8aac:	f7ff fd42 	bl	d8534 <__hi0bits>
   d8ab0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d8ab4:	6028      	str	r0, [r5, #0]
   d8ab6:	4638      	mov	r0, r7
   d8ab8:	b003      	add	sp, #12
   d8aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8abe <__ratio>:
   d8abe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8ac2:	4688      	mov	r8, r1
   d8ac4:	4669      	mov	r1, sp
   d8ac6:	4681      	mov	r9, r0
   d8ac8:	f7ff ff5e 	bl	d8988 <__b2d>
   d8acc:	a901      	add	r1, sp, #4
   d8ace:	4640      	mov	r0, r8
   d8ad0:	ec55 4b10 	vmov	r4, r5, d0
   d8ad4:	f7ff ff58 	bl	d8988 <__b2d>
   d8ad8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d8adc:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d8ae0:	1a9a      	subs	r2, r3, r2
   d8ae2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d8ae6:	1ac9      	subs	r1, r1, r3
   d8ae8:	ec57 6b10 	vmov	r6, r7, d0
   d8aec:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d8af0:	2b00      	cmp	r3, #0
   d8af2:	bfcc      	ite	gt
   d8af4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d8af8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d8afc:	4632      	mov	r2, r6
   d8afe:	463b      	mov	r3, r7
   d8b00:	4620      	mov	r0, r4
   d8b02:	4629      	mov	r1, r5
   d8b04:	f7fe f85a 	bl	d6bbc <__aeabi_ddiv>
   d8b08:	ec41 0b10 	vmov	d0, r0, r1
   d8b0c:	b003      	add	sp, #12
   d8b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8b12 <__copybits>:
   d8b12:	3901      	subs	r1, #1
   d8b14:	b510      	push	{r4, lr}
   d8b16:	1149      	asrs	r1, r1, #5
   d8b18:	6914      	ldr	r4, [r2, #16]
   d8b1a:	3101      	adds	r1, #1
   d8b1c:	f102 0314 	add.w	r3, r2, #20
   d8b20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8b24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d8b28:	42a3      	cmp	r3, r4
   d8b2a:	4602      	mov	r2, r0
   d8b2c:	d204      	bcs.n	d8b38 <__copybits+0x26>
   d8b2e:	f853 2b04 	ldr.w	r2, [r3], #4
   d8b32:	f840 2b04 	str.w	r2, [r0], #4
   d8b36:	e7f7      	b.n	d8b28 <__copybits+0x16>
   d8b38:	2300      	movs	r3, #0
   d8b3a:	428a      	cmp	r2, r1
   d8b3c:	d202      	bcs.n	d8b44 <__copybits+0x32>
   d8b3e:	f842 3b04 	str.w	r3, [r2], #4
   d8b42:	e7fa      	b.n	d8b3a <__copybits+0x28>
   d8b44:	bd10      	pop	{r4, pc}

000d8b46 <__any_on>:
   d8b46:	f100 0214 	add.w	r2, r0, #20
   d8b4a:	6900      	ldr	r0, [r0, #16]
   d8b4c:	114b      	asrs	r3, r1, #5
   d8b4e:	4298      	cmp	r0, r3
   d8b50:	b510      	push	{r4, lr}
   d8b52:	db0c      	blt.n	d8b6e <__any_on+0x28>
   d8b54:	dd0c      	ble.n	d8b70 <__any_on+0x2a>
   d8b56:	f011 011f 	ands.w	r1, r1, #31
   d8b5a:	d009      	beq.n	d8b70 <__any_on+0x2a>
   d8b5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d8b60:	fa24 f001 	lsr.w	r0, r4, r1
   d8b64:	fa00 f101 	lsl.w	r1, r0, r1
   d8b68:	428c      	cmp	r4, r1
   d8b6a:	d10c      	bne.n	d8b86 <__any_on+0x40>
   d8b6c:	e000      	b.n	d8b70 <__any_on+0x2a>
   d8b6e:	4603      	mov	r3, r0
   d8b70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8b74:	4293      	cmp	r3, r2
   d8b76:	d904      	bls.n	d8b82 <__any_on+0x3c>
   d8b78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d8b7c:	2900      	cmp	r1, #0
   d8b7e:	d0f9      	beq.n	d8b74 <__any_on+0x2e>
   d8b80:	e001      	b.n	d8b86 <__any_on+0x40>
   d8b82:	2000      	movs	r0, #0
   d8b84:	bd10      	pop	{r4, pc}
   d8b86:	2001      	movs	r0, #1
   d8b88:	bd10      	pop	{r4, pc}

000d8b8a <_calloc_r>:
   d8b8a:	b538      	push	{r3, r4, r5, lr}
   d8b8c:	fb02 f401 	mul.w	r4, r2, r1
   d8b90:	4621      	mov	r1, r4
   d8b92:	f7fc fd0f 	bl	d55b4 <_malloc_r>
   d8b96:	4605      	mov	r5, r0
   d8b98:	b118      	cbz	r0, d8ba2 <_calloc_r+0x18>
   d8b9a:	4622      	mov	r2, r4
   d8b9c:	2100      	movs	r1, #0
   d8b9e:	f7fe fa48 	bl	d7032 <memset>
   d8ba2:	4628      	mov	r0, r5
   d8ba4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8ba8 <nanf>:
   d8ba8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8bb0 <nanf+0x8>
   d8bac:	4770      	bx	lr
   d8bae:	bf00      	nop
   d8bb0:	7fc00000 	.word	0x7fc00000

000d8bb4 <dynalib_user>:
   d8bb4:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8bc4:	00000000                                ....

000d8bc8 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d8bd0:	000d40e5 000d40f9                       .@...@..

000d8bd8 <_ZTV16JsonParserStaticILj256ELj20EE>:
	...
   d8be0:	000d410d 000d4121 55424544 202d2047     .A..!A..DEBUG - 
   d8bf0:	4e444e45 3a45444f 2a2a2a20 6e6e6f43     ENDNODE: ***Conn
   d8c00:	69746365 7420676e 454d206f 6e204853     ecting to MESH n
   d8c10:	6f777465 2a2a6b72 54495300 00315f45     etwork**.SITE_1.
   d8c20:	706d6554 69655700 00746867 45544953     Temp.Weight.SITE
   d8c30:	5300325f 5f455449 49530033 345f4554     _2.SITE_3.SITE_4
   d8c40:	444e4500 4e494f50 44203a54 63697665     .ENDPOINT: Devic
   d8c50:	44692065 4e00203a 3a45444f 00544200     e iD: .NODE:.BT.
   d8c60:	47005742 57470054 00545700 59005757     BW.GT.GW.WT.WW.Y
   d8c70:	57590054 42454400 203a4755 4e45202d     T.YW.DEBUG: - EN
   d8c80:	444f4e44 4d203a45 20485345 4e4f534a     DNODE: MESH JSON
   d8c90:	53454d20 45474153 200a0d3a 50007325      MESSAGE:.. %s.P
   d8ca0:	69737261 4620676e 454c4941 21212144     arsing FAILED!!!
   d8cb0:	72615000 676e6973 53415020 21444553     .Parsing PASSED!
   d8cc0:	52002121 69727465 64657665 6f726620     !!.Retrieved fro
   d8cd0:	534a206d 203a4e4f 00000020              m JSON:  ...

000d8cdc <_ZTV13JsonReference>:
	...
   d8ce4:	000d470d 000d470f                       .G...G..

000d8cec <_ZTV10JsonBuffer>:
	...
   d8cf4:	000d471d 000d4739                       .G..9G..

000d8cfc <_ZTV10JsonWriter>:
	...
   d8d04:	000d4785 000d4799 25006425 2500756c     .G...G..%d.%lu.%
   d8d14:	00783430 3025755c 74005834 00657572     04x.\u%04X.true.
   d8d24:	736c6166 2e250065 2500662a 2e250066     false.%.*f.%f.%.
   d8d34:	00666c2a 00666c25                       *lf.%lf.

000d8d3c <_ZTV10JsonParser>:
	...
   d8d44:	000d474d 000d4771                       MG..qG..

000d8d4c <_ZTVN5spark13EthernetClassE>:
	...
   d8d54:	000d5623 000d5619 000d560f 000d5605     #V...V...V...V..
   d8d64:	000d55f9 000d55ed 000d55e1 000d55d9     .U...U...U...U..
   d8d74:	000d55cf 000d55c5 000d61c9              .U...U...a..

000d8d80 <_ZTV8SPIClass>:
	...
   d8d88:	000d5641 000d5643 006e616e 0066766f     AV..CV..nan.ovf.
   d8d98:	6e69002e 6e6c0066 006e6600 65646f63     ..inf.ln.fn.code
   d8da8:	74656400 006c6961 25000a0d 75303130     .detail....%010u
   d8db8:	205d0020 00202c00 203a2928 005b2000      .] ., .(): . [.
   d8dc8:	65646f63 00203d20 64006925 69617465     code = .%i.detai
   d8dd8:	3d20736c 61620020 53006475 61697265     ls = .baud.Seria
   d8de8:	6553006c 6c616972 79740031 70006570     l.Serial1.type.p
   d8df8:	6d617261 646d6300 00646900 00646e68     aram.cmd.id.hnd.
   d8e08:	6d727473 6c696600 766c0074 6461006c     strm.filt.lvl.ad
   d8e18:	6e614864 72656c64 6d657200 4865766f     dHandler.removeH
   d8e28:	6c646e61 65007265 486d756e 6c646e61     andler.enumHandl
   d8e38:	00737265 4e4f534a 65727453 6f4c6d61     ers.JSONStreamLo
   d8e48:	6e614867 72656c64 70706100 6e6f6e00     gHandler.app.non
   d8e58:	72740065 00656361 6f666e69 72617700     e.trace.info.war
   d8e68:	7265006e 00726f72 696e6170 6c610063     n.error.panic.al
   d8e78:	005a006c 33302b25 30253a64 25007532     l.Z.%+03d:%02u.%
   d8e88:	6d252d59 5464252d 253a4825 53253a4d     Y-%m-%dT%H:%M:%S
   d8e98:	61007a25 69746373 0000656d              %z.asctime..

000d8ea4 <_ZTV9IPAddress>:
	...
   d8eac:	000d5d17 000d5d09 000d5d0b              .]...]...]..

000d8eb8 <_ZTV9USBSerial>:
	...
   d8ec0:	000d5df1 000d5e35 000d5e0f 000d58a9     .]..5^...^...X..
   d8ed0:	000d5e09 000d5df3 000d5dfb 000d5e2f     .^...]...]../^..
   d8ee0:	000d5e03 000d5ded                       .^...]..

000d8ee8 <_ZTV11USARTSerial>:
	...
   d8ef0:	000d5ed5 000d5ef9 000d5f05 000d58a9     .^...^..._...X..
   d8f00:	000d5ee1 000d5eed 000d5ee7 000d5ef3     .^...^...^...^..
   d8f10:	000d5ed7 000d5edb                       .^...^..

000d8f18 <_ZTV7TwoWire>:
	...
   d8f20:	000d5fa9 000d5ff3 000d5fcb 000d5fab     ._..._..._..._..
   d8f30:	000d5fd3 000d5fdb 000d5fe3 000d5feb     ._..._..._..._..

000d8f40 <_ZTVN5spark9MeshClassE>:
	...
   d8f48:	000d608b 000d6081 000d6077 000d606d     .`...`..w`..m`..
   d8f58:	000d6061 000d6055 000d6049 000d6041     a`..U`..I`..A`..
   d8f68:	000d6037 000d602d 000d61c9              7`..-`...a..

000d8f74 <_ZTVN5spark12NetworkClassE>:
	...
   d8f7c:	000d6161 000d616b 000d6175 000d617f     aa..ka..ua...a..
   d8f8c:	000d6189 000d6195 000d61a1 000d61ad     .a...a...a...a..
   d8f9c:	000d61b5 000d61bf 000d61c9              .a...a...a..

000d8fa8 <__sf_fake_stdin>:
	...

000d8fc8 <__sf_fake_stdout>:
	...

000d8fe8 <__sf_fake_stderr>:
	...
   d9008:	4f500043 00584953                       C.POSIX.

000d9010 <fpi.5344>:
   d9010:	00000035 fffffbce 000003cb 00000001     5...............
   d9020:	00000000                                ....

000d9024 <fpinan.5380>:
   d9024:	00000034 fffffbce 000003cb 00000001     4...............
   d9034:	00000000 74696e69 00000079              ....inity...

000d9040 <tinytens>:
   d9040:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   d9050:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   d9060:	64ac6f43 11680628                       Co.d(.h.

000d9068 <__mprec_tens>:
   d9068:	00000000 3ff00000 00000000 40240000     .......?......$@
   d9078:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   d9088:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   d9098:	00000000 412e8480 00000000 416312d0     .......A......cA
   d90a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   d90b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   d90c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   d90d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   d90e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   d90f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   d9108:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   d9118:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   d9128:	79d99db4 44ea7843                       ...yCx.D

000d9130 <__mprec_bigtens>:
   d9130:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   d9140:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   d9150:	7f73bf3c 75154fdd                       <.s..O.u

000d9158 <p05.5387>:
   d9158:	00000005 00000019 0000007d              ........}...

000d9164 <link_const_variable_data_end>:
   d9164:	000d42e9 	.word	0x000d42e9
   d9168:	000d51d5 	.word	0x000d51d5
   d916c:	000d51d9 	.word	0x000d51d9
   d9170:	000d562d 	.word	0x000d562d
   d9174:	000d5681 	.word	0x000d5681
   d9178:	000d5bc5 	.word	0x000d5bc5
   d917c:	000d5bd5 	.word	0x000d5bd5
   d9180:	000d5c09 	.word	0x000d5c09
   d9184:	000d6115 	.word	0x000d6115
   d9188:	000d624d 	.word	0x000d624d
   d918c:	000d62d9 	.word	0x000d62d9
   d9190:	000d6369 	.word	0x000d6369
   d9194:	000d63ed 	.word	0x000d63ed
   d9198:	000d64b1 	.word	0x000d64b1
   d919c:	000d6575 	.word	0x000d6575
